<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">

<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>Using binding to mock out even &#8220;direct linked&#8221; functions in Clojure &laquo;  searching for signal</title>

<link rel="stylesheet" href="http://blog.n01se.net/wp-content/themes/n01se-narrow/style.css" type="text/css" media="screen" />
<link rel="pingback" href="http://blog.n01se.net/xmlrpc.php" />

<style type="text/css" media="screen">

	#page { background: url("http://blog.n01se.net/wp-content/themes/n01se-narrow/images/kubrickbgwide.jpg") repeat-y top; border: none; }

</style>


<link rel="alternate" type="application/rss+xml" title="searching for signal &raquo; Feed" href="http://blog.n01se.net/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="searching for signal &raquo; Comments Feed" href="http://blog.n01se.net/?feed=comments-rss2" />
<link rel="alternate" type="application/rss+xml" title="searching for signal &raquo; Using binding to mock out even &#8220;direct linked&#8221; functions in Clojure Comments Feed" href="http://blog.n01se.net/?feed=rss2&amp;p=134" />
<script type='text/javascript' src='http://blog.n01se.net/wp-includes/js/comment-reply.js?ver=20090102'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://blog.n01se.net/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://blog.n01se.net/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='searching for signal' href='http://blog.n01se.net' />
<link rel='start' title='Placeholder post' href='http://blog.n01se.net/?p=4' />
<link rel='prev' title='clock trick' href='http://blog.n01se.net/?p=125' />
<link rel='next' title='daemonizing bash' href='http://blog.n01se.net/?p=145' />
<meta name="generator" content="WordPress 3.0.1" />
<link rel='canonical' href='http://blog.n01se.net/?p=134' />
<link href='http://blog.n01se.net/wp-content/plugins/easy-google-syntax-highlighter/styles/shCore.css' type='text/css' rel='stylesheet' /><link href='http://blog.n01se.net/wp-content/plugins/easy-google-syntax-highlighter/styles/shThemeDefault.css' type='text/css' rel='stylesheet' id='shTheme'/><style type="text/css">
.avatar {vertical-align:middle}
.credit {font-size: 50%;}
</style>
		</head>
<body class="single single-post postid-134">
<div id="page">


<div id="header" role="banner">
	<div id="headerimg">
		<h1><a href="http://blog.n01se.net/">searching for signal</a></h1>
		<div class="description">theoretically unambiguous</div>
	</div>
</div>
<hr />

	<div id="content" class="widecolumn" role="main">

	
		<div class="navigation">
			<div class="alignleft">&laquo; <a href="http://blog.n01se.net/?p=125" rel="prev">clock trick</a></div>
			<div class="alignright"><a href="http://blog.n01se.net/?p=145" rel="next">daemonizing bash</a> &raquo;</div>
		</div>

		<div class="post-134 post type-post hentry category-clojure" id="post-134">
			<h2>Using binding to mock out even &#8220;direct linked&#8221; functions in Clojure</h2>
			<small>April 17th, 2010 by Chouser</small>

			<div class="entry">
				
<div class="document">


<!-- -*- mode: rst -*- -->
<p>The Clojure macro <tt class="docutils literal"><span class="pre">binding</span></tt> is frequently handy for mocking out
functionality during testing, but this sometimes does not behave as
desired in multi-threaded context.  Fortunately, there's a solution...</p>
<p>For example, at work we have unit tests on functions that may attempt
to talk to network services, which we'd rather they not do:</p>
<pre class="literal-block">
(defn send-request [request server]
  '(...do real RPC stuff here...))

(defn average-timestamp [time-servers]
  (/ (apply + (map #(send-request :get-timestamp %)
                   time-servers))
     (count time-servers)))
</pre>
<p>In order to test <tt class="docutils literal"><span class="pre">average-timestamp</span></tt>, we need a &quot;mock&quot; function that
will stand in for <tt class="docutils literal"><span class="pre">send-request</span></tt>.  This must be a function that
takes a request and a server and returns a timestamp, just like the
real send-request.  For this example, it can take the timestamp itself
as the &quot;server&quot; and simply return that timestamp.  For bonus points we
can make sure the request parameter is what we expect:</p>
<pre class="literal-block">
(defn mock-send-request [request server]
  (assert (= request :get-timestamp))
  server)  ; assume &quot;server&quot; is actually the timestamp

(mock-send-request :get-timestamp 5)
;=&gt; 5
</pre>
<p>Using <tt class="docutils literal"><span class="pre">binding</span></tt> we can temporarily replace <tt class="docutils literal"><span class="pre">send-request</span></tt> with
<tt class="docutils literal"><span class="pre">mock-send-request</span></tt>:</p>
<pre class="literal-block">
(binding [send-request mock-send-request]
  (send-request :get-timestamp 5))
;=&gt; 5

(binding [send-request mock-send-request]
  (average-timestamp [5 15]))
;=&gt; 10
</pre>
<p>So there's the background: a pretty normal way to mock out stuff in
Clojure.  What this doesn't address is when some clever co-worker (hi,
Nathan!) realizes that <tt class="docutils literal"><span class="pre">average-timestamp</span></tt> would work better if it
talked to multiple time-servers in parallel, and that this could be
easily accomplished by replacing the use of <tt class="docutils literal"><span class="pre">map</span></tt> with <tt class="docutils literal"><span class="pre">pmap</span></tt>:</p>
<pre class="literal-block">
(defn average-timestamp [time-servers]
  (/ (apply + (pmap #(send-request :get-timestamp %) time-servers))
     (count time-servers)))
</pre>
<p>This is an easy single-letter change that indeed works quite well with
the real <tt class="docutils literal"><span class="pre">send-request</span></tt>.  But when we try to use <tt class="docutils literal"><span class="pre">binding</span></tt> to mock it
out, we run into problems:</p>
<pre class="literal-block">
(binding [send-request mock-send-request]
  (average-timestamp [5 15]))
; java.lang.ClassCastException:
;   clojure.lang.PersistentList cannot be cast to java.lang.Number
</pre>
<p>It's not obvious from the error message, but what's happening is our
original un-mocked <tt class="docutils literal"><span class="pre">send-request</span></tt> is getting called.  This is because
<tt class="docutils literal"><span class="pre">binding</span></tt> only has an effect on the current thread, but <tt class="docutils literal"><span class="pre">pmap</span></tt> causes
<tt class="docutils literal"><span class="pre">send-request</span></tt> to be called in other threads.</p>
<p>The solution is simple enough in Clojure 1.0 -- you simply mock out
<tt class="docutils literal"><span class="pre">pmap</span></tt> as well, and since the API is identical to <tt class="docutils literal"><span class="pre">map</span></tt>, it's quite
easy to do.  But as you can see, this does us no good at all in recent
versions of Clojure:</p>
<pre class="literal-block">
(binding [send-request mock-send-request
          pmap map]
  (average-timestamp [5 15]))
; java.lang.ClassCastException:
;   clojure.lang.PersistentList cannot be cast to java.lang.Number
</pre>
<p>The reason is that starting with Clojure 1.1, most clojure.core Vars
are linked directly into code that uses them.  This means that our
definition of <tt class="docutils literal"><span class="pre">average-timestamp</span></tt> above links directly to the actual
definition of <tt class="docutils literal"><span class="pre">clojure.core/pmap</span></tt>, not just the Var that points to it,
thus attempts to rebind the Var with <tt class="docutils literal"><span class="pre">binding</span></tt> are futile.</p>
<p>But do not despair, there is a solution even for this.  All you need
to do is tell Clojure not to directly link <tt class="docutils literal"><span class="pre">pmap</span></tt> when it compiles
<tt class="docutils literal"><span class="pre">average-timestamp</span></tt>.  This is done by adjusting <tt class="docutils literal"><span class="pre">pmap</span></tt>'s metadata
before <tt class="docutils literal"><span class="pre">average-timestamp</span></tt> is compiled, like so:</p>
<pre class="literal-block">
; Set pmap to be dynamically linked
(alter-meta! #'pmap assoc :dynamic true)

; Must now re-define the function that uses pmap
(defn average-timestamp [time-servers]
  (/ (apply + (pmap #(send-request :get-timestamp %)
                    time-servers))
     (count time-servers)))

; Finally, our mocking out of pmap works
(binding [send-request mock-send-request
          pmap map]
  (average-timestamp [5 15]))
;=&gt; 10
</pre>
<p>The best place to put the <tt class="docutils literal"><span class="pre">alter-meta!</span></tt> depends on your particular use
case.  You might want to figure out how to do the <tt class="docutils literal"><span class="pre">alter-meta!</span></tt> only
when in testing and not in production.  Remember that the metadata on
<tt class="docutils literal"><span class="pre">pmap</span></tt> is global -- you're changing the only metadata that
<tt class="docutils literal"><span class="pre">clojure.core/pmap</span></tt> has, so the namespace you're in when you do it
makes no difference at all.</p>
<p>In our case at work however, the performance impact of leaving pmap
dynamic all the time was not enough to worry about.  Dynamic linking
is still pretty fast and is fine even for our production uses of
<tt class="docutils literal"><span class="pre">pmap</span></tt> in this particular code base.  So we simply put the
<tt class="docutils literal"><span class="pre">alter-meta!</span></tt> at the top of the file that used <tt class="docutils literal"><span class="pre">pmap</span></tt> and got on with
our unit testing.</p>
<a class="reference image-reference" href="http://joyofclojure.com/"><img align="left" alt="http://blog.n01se.net/wp-content/uploads/2010/01/joy.png" class="align-left" src="http://blog.n01se.net/wp-content/uploads/2010/01/joy.png" /></a>
<dl class="docutils">
<dt><strong>The Joy of Clojure</strong></dt>
<dd>Thinking the Clojure Way</dd>
</dl>
<p><em>by Michael Fogus and Chris Houser</em></p>
</div>

								
				<p class="postmetadata alt">
					<small>
						This entry was posted
												on Saturday, April 17th, 2010 at 2:00 pm						and is filed under <a href="http://blog.n01se.net/?cat=14" title="View all posts in clojure" rel="category">clojure</a>.
						You can follow any responses to this entry through the <a href='http://blog.n01se.net/?feed=rss2&amp;p=134'>RSS 2.0</a> feed.

													You can <a href="#respond">leave a response</a>, or <a href="http://blog.n01se.net/wp-trackback.php?p=134" rel="trackback">trackback</a> from your own site.

						
					</small>
				</p>

			</div>
		</div>

	
<!-- You can start editing here. -->

	<h3 id="comments">9 Responses to &#8220;Using binding to mock out even &#8220;direct linked&#8221; functions in Clojure&#8221;</h3>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>

	<ol class="commentlist">
			<li class="comment even thread-even depth-1" id="comment-2154">
				<div id="div-comment-2154" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/675099cea7e9f49886f4ad551b76ff33?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<cite class="fn">Marc</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://blog.n01se.net/?p=134&amp;cpage=1#comment-2154">
			April 17, 2010 at 9:22 pm</a>		</div>

		<p>Common use of binding in tests indicates missed opportunities for abstraction.  Something like&#8230;<br />
(defn monitor [targets monitor-fn]<br />
	    (/ (apply + (pmap monitor-fn targets))<br />
	       (count targets)))</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2159">
				<div id="div-comment-2159" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/a146b0ad427ef1c0c6d7643de77e8880?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<cite class="fn">Jarkko Oranen</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://blog.n01se.net/?p=134&amp;cpage=1#comment-2159">
			April 18, 2010 at 3:25 am</a>		</div>

		<p>It should be trivial to make a macro that handles resetting the metadata at the end of its scope. You could then wrap that around code that needs to be compiled without direct linking. This approach would avoid the side-effects on unrelated namespaces.</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment byuser comment-author-chouser bypostauthor even thread-even depth-1" id="comment-2165">
				<div id="div-comment-2165" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/7a0192050ed6488670acfd3f59405c10?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<cite class="fn"><a href='http://chouser.n01se.net' rel='external nofollow' class='url'>Chouser</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://blog.n01se.net/?p=134&amp;cpage=1#comment-2165">
			April 18, 2010 at 1:36 pm</a>		</div>

		<p>@Marc: You have a good point, and sometimes the right solution is indeed more function parameters.  On the other hand, it&#8217;s not always appropriate to pass in every conceivable option &#8212; perhaps pmap and even +, /, and count should be parameters?  Which you choose may also depend on how &#8220;deep&#8221; you intend to pass those parameters.  In my simplified example, where &#8216;send-request&#8217; is only one level deep, an extra parameter may be a good choice, while in a case where the function you wish to replace is called several nested calls in, you may be right in deciding not to add a parameter to every level of that call stack.</p>
<p>@Jarkko: Such a macro might be trickier than you&#8217;re thinking, since the metadata must be set before the compilation begins on the form in question, and set back after the compilation completes.  In other words, a simple (do (set-metadata) (defn &#8230;) (reset-metadata)) will do you know good, as *all* that code would be compiled before the metadata was adjusted at all.</p>
<p>You could work around this by using &#8216;eval&#8217; or perhaps some other technique, though even then you&#8217;d still have to remember that the change is global between the setting and the resetting of the metadata.  That is, if any code is compiled in any other thread while this thread is compiling this code, that other thread may see the &#8220;:dynamic true&#8221; set.</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2166">
				<div id="div-comment-2166" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/9b31b9d123bff80f00317a1df0dd00e2?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<cite class="fn"><a href='http://alexott.blogspot.com' rel='external nofollow' class='url'>Alex Ott</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://blog.n01se.net/?p=134&amp;cpage=1#comment-2166">
			April 19, 2010 at 4:07 am</a>		</div>

		<p>Could you add Clojure label to this post, so it will appear in Planet Clojure?</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment byuser comment-author-chouser bypostauthor even thread-even depth-1" id="comment-2167">
				<div id="div-comment-2167" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/7a0192050ed6488670acfd3f59405c10?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<cite class="fn"><a href='http://chouser.n01se.net' rel='external nofollow' class='url'>Chouser</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://blog.n01se.net/?p=134&amp;cpage=1#comment-2167">
			April 19, 2010 at 10:07 am</a>		</div>

		<p>@Alex: Sorry about that.  Done.</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2169">
				<div id="div-comment-2169" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/6595ae6ba5ca0712e8e3074f2d9063d2?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<cite class="fn"><a href='http://code.google.com/p/counterclockwise/' rel='external nofollow' class='url'>Laurent Petit</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://blog.n01se.net/?p=134&amp;cpage=1#comment-2169">
			April 20, 2010 at 6:46 am</a>		</div>

		<p>@chouser: I thought that a macro expanding into (do x y z) would be compiled in sequence by the compiler, that is as if x y and z had been top level forms ? At least I remember having seen this in the compiler &#8230; Though this would not totally solve the problem, since the could would not be protected against raised exceptions.</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment byuser comment-author-chouser bypostauthor even thread-even depth-1" id="comment-2170">
				<div id="div-comment-2170" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/7a0192050ed6488670acfd3f59405c10?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<cite class="fn"><a href='http://chouser.n01se.net' rel='external nofollow' class='url'>Chouser</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://blog.n01se.net/?p=134&amp;cpage=1#comment-2170">
			April 20, 2010 at 7:31 am</a>		</div>

		<p>@Laurent: You are absolutely right.  I don&#8217;t know how I&#8217;ve had that misconception in my head so long, but a couple simple tests show that expressions in top-level &#8216;do&#8217; blocks are each compiled and evaluated before the next.</p>
<p>This is the kind of error I was expecting:<br />
  (if true (do (defmacro quxx [] 5) (quxx)))<br />
  ; java.lang.IllegalArgumentException: Wrong number of args passed to: user$eval&#8211;478$quxx (NO_SOURCE_FILE:0)</p>
<p>But if the &#8216;do&#8217; is at the top level (instead of being inside an &#8216;if&#8217; as above), there&#8217;s no error at all:<br />
  (do (defmacro foo [] 5) (foo))<br />
  ;=&gt; 5</p>
<p>Clearly in this case the &#8216;defmacro&#8217; form is fully evaluated before &#8216;(foo)&#8217; is compiled.  Thanks for the pointer, Laurent!</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2201">
				<div id="div-comment-2201" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/bb8d759cf4230bcaa238fac0018af80c?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<cite class="fn">Volkan YAZICI</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://blog.n01se.net/?p=134&amp;cpage=1#comment-2201">
			April 26, 2010 at 6:31 am</a>		</div>

		<p>You said that &#8220;&#8230; our original un-mocked send-request is getting called. This is because binding only has an effect on the current thread, but pmap causes send-request to be called in other threads.&#8221; Excuse my ignorance, but shouldn&#8217;t that be reported as a Clojure bug? AFAIC, a la fork(), Clojure should pass current thread environment/bindings to children threads, unless specified the opposite. Am I missing something?</p>

		<div class="reply">
				</div>
				</div>
		</li>
		<li class="comment byuser comment-author-chouser bypostauthor even thread-even depth-1" id="comment-2202">
				<div id="div-comment-2202" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/7a0192050ed6488670acfd3f59405c10?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32 photo' height='32' width='32' />		<cite class="fn"><a href='http://chouser.n01se.net' rel='external nofollow' class='url'>Chouser</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://blog.n01se.net/?p=134&amp;cpage=1#comment-2202">
			April 26, 2010 at 7:16 am</a>		</div>

		<p>@Volkan: It&#8217;s not a bug as such &#8212; in fact, it&#8217;s a specific feature of Vars that they can take on thread-local values, and &#8216;binding&#8217; is how you give a Var a thread-local value.  It&#8217;s more of an unfortunate (in this case) consequence of the combination of features at play.</p>
<p>The function you pass to pmap does close over its lexical environment properly, and maintains access to all non-thread-local context.</p>

		<div class="reply">
				</div>
				</div>
		</li>
	</ol>

	<div class="navigation">
		<div class="alignleft"></div>
		<div class="alignright"></div>
	</div>
 


<div id="respond">

<h3>Leave a Reply</h3>

<div class="cancel-comment-reply">
	<small><a rel="nofollow" id="cancel-comment-reply-link" href="/?p=134#respond" style="display:none;">Click here to cancel reply.</a></small>
</div>


<form action="http://blog.n01se.net/wp-comments-post.php" method="post" id="commentform">


<p><input type="text" name="author" id="author" value="" size="22" tabindex="1" aria-required='true' />
<label for="author"><small>Name (required)</small></label></p>

<p><input type="text" name="email" id="email" value="" size="22" tabindex="2" aria-required='true' />
<label for="email"><small>Mail (will not be published) (required)</small></label></p>

<p><input type="text" name="url" id="url" value="" size="22" tabindex="3" />
<label for="url"><small>Website</small></label></p>


<!--<p><small><strong>XHTML:</strong> You can use these tags: <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></small></p>-->

<p><textarea name="comment" id="comment" cols="58" rows="10" tabindex="4"></textarea></p>

<p><input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" />
<input type='hidden' name='comment_post_ID' value='134' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p>

</form>

</div>


	
	</div>


<hr />
<div id="footer" role="contentinfo">
<!-- If you'd like to support WordPress, having the "powered by" link somewhere on your blog is the best way; it's our only promotion or advertising. -->
	<p>
		searching for signal is proudly powered by
		<a href="http://wordpress.org/">WordPress</a>
		<br /><a href="http://blog.n01se.net/?feed=rss2">Entries (RSS)</a>
		and <a href="http://blog.n01se.net/?feed=comments-rss2">Comments (RSS)</a>.
		<!-- 27 queries. 0.448 seconds. -->
	</p>
</div>
</div>

<!-- Gorgeous design by Michael Heilemann - http://binarybonsai.com/kubrick/ -->

		<!--stats_footer_test--><script src="http://stats.wordpress.com/e-201051.js" type="text/javascript"></script>
<script type="text/javascript">
st_go({blog:'16041580',v:'ext',post:'134'});
var load_cmc = function(){linktracker_init(16041580,134,2);};
if ( typeof addLoadEvent != 'undefined' ) addLoadEvent(load_cmc);
else load_cmc();
</script>
</body>
</html>

<!-- Dynamic Page Served (once) in 0.448 seconds -->
<!-- Cached page served by WP-Cache -->
