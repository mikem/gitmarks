<!DOCTYPE html>
<html dir="ltr" lang="en">
<head>
<meta charset="UTF-8" />
<title>Clojure tutorial: fetching web comics (part 1) &laquo;  Occasionally sane</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" href="http://s2.wp.com/wp-content/themes/pub/contempt/style.css?m=1292348161g" type="text/css" media="screen" />
<link rel="pingback" href="http://gnuvince.wordpress.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Occasionally sane &raquo; Feed" href="http://gnuvince.wordpress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Occasionally sane &raquo; Comments Feed" href="http://gnuvince.wordpress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Occasionally sane &raquo; Clojure tutorial: fetching web comics (part&nbsp;1) Comments Feed" href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel="stylesheet" href="http://s0.wp.com/wp-content/themes/h4/global.css?m=1291749258g" type="text/css" />
<script type='text/javascript' src='http://s2.wp.com/wp-includes/js/l10n.js?m=1290133841g&amp;ver=20101110'></script>
<script type='text/javascript' src='http://s1.wp.com/wp-includes/js/jquery/jquery.js?m=1290133841g&amp;ver=1.4.4'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-includes/js/comment-reply.js?m=1268498783g&amp;ver=20090102'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gnuvince.wordpress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gnuvince.wordpress.com/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Occasionally sane' href='http://gnuvince.wordpress.com/' />
<link rel='prev' title='PHP: wrong for long-running processes (wrong for&nbsp;America?)' href='http://gnuvince.wordpress.com/2008/10/28/php-wrong-for-long-running-processes-wrong-for-america/' />
<link rel='next' title='Clojure tutorial: fetching web comics (part&nbsp;2)' href='http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/' />
<meta name="generator" content="WordPress.com" />
<link rel='canonical' href='http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/' />
<link rel='shortlink' href='http://wp.me/p61GC-85' />
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48" />
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48" />
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1268498786g" />
	<style type="text/css">
	/* <![CDATA[ */
				div#likes { margin-top: 15px; }
		.like-button { border: 1px solid #eee; padding: 2px 6px; font-size: 13px; font-family: arial, tahoma, sans-serif; }
		#wpl-likebox { clear: left; font-size: 11px; font-family: arial, tahoma, verdana, sans-serif !important; min-height: 30px; margin: 10px 0 !important; padding: 5px 0 10px 0 !important; }
		#wpl-button { float: left; background: url( /i/buttonbg.png ) top left repeat-x; margin-right: 7px; border: 1px solid #d4d4d4; -moz-border-radius: 3px; -webkit-border-radius: 3px; border-radius: 3px; }
		#wpl-button a { color: #666 !important; line-height: 130% !important; text-decoration: none !important; outline: none; float: left; padding: 3px 6px 2px 24px !important; font-size: 11px !important; background: url( /i/likestar.png ) 6px 49.8% no-repeat; }
		#wpl-button.liked { background: #feffce; border: 1px solid #f3e389; }
		#wpl-button.liked a { color: #ba871b !important; }
		#wpl-likebox #wpl-count { min-height: 25px; line-height: 130% !important; float: left; padding-top: 4px; }
		#wpl-likebox #wpl-avatars { clear: left; max-height: 98px; overflow: hidden; margin-top: 15px; line-height: 130% !important; }
		#wpl-likebox #wpl-avatars img { border: none !important; }
		#wpl-likebox #wpl-mustlogin { line-height: 14px !important; font-size: 11px; clear: left; margin-top: 5px; background: #f0f0f0; padding: 10px; width: 65%; -moz-border-radius: 3px; -webkit-border-radius: 3px; border-radius: 3px; }
		#wpl-likebox #wpl-mustlogin a { color: #888; text-decoration: underline; }
		#wpl-likebox #wpl-mustlogin p { margin: 5px 0; padding: 0 }
		#wpl-likebox #wpl-mustlogin input.input { padding: 2px; background: #fff; font-size: 11px; font-family: inherit; border: 1px solid #ccc; -moz-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1) inset; -webkit-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1) inset; line-height: 12px; }
		#wpl-likebox #wpl-mustlogin input#wp-submit { border: 1px solid #ccc; font-size: 11px; background: #fafafa; repeat-x; -moz-border-radius: 3px; -webkit-border-radius: 3px; border-radius: 3px; padding: 2px 4px !important; line-height: 12px; }
		#wpl-likebox #wpl-mustlogin label { position: relative; cursor: text; }
		#wpl-likebox #wpl-mustlogin label span { position: absolute; top: 0px; left: 5px; padding: 0 !important; }
		#wpl-likebox #wpl-mustlogin label span { top /*\**/: -10px\9; }
	/* ]]> */
	</style>
	<link rel='openid.server' href='http://gnuvince.wordpress.com/?openidserver=1' />
<link rel='openid.delegate' href='http://gnuvince.wordpress.com/' />
<link rel="search" type="application/opensearchdescription+xml" href="http://gnuvince.wordpress.com/osd.xml" title="Occasionally sane" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com" />
<style type="text/css">
#headerimg{
	background: url(http://s2.wp.com/wp-content/themes/pub/contempt/images/blue_flower/head.jpg) no-repeat;
}
#header h1 a, .description {
	color:#E5F2E9;
}
</style>
<meta name="application-name" content="Occasionally sane" /><meta name="msapplication-window" content="width=device-width;height=device-height" /><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gnuvince.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico" /><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /></head>
<body>

<div id="page">

<div id="header">
	<div id="headerimg" onclick="location.href='http://gnuvince.wordpress.com';" style="cursor: pointer;">
		<h1><a href="http://gnuvince.wordpress.com/">Occasionally sane</a></h1>
		<div class="description"></div>
	</div>
</div>

<ul id="pagebar" class="menu" style="background: url(http://s2.wp.com/wp-content/themes/pub/contempt/images/blue_flower/pagebar.jpg);">
	<li class="page_item"><a href="http://gnuvince.wordpress.com/">Home</a></li>
	<li class="page_item page-item-2"><a href="http://gnuvince.wordpress.com/about/" title="About">About</a></li>
</ul>

<div id="grad" style="height: 65px; width: 100%; background: url(http://s2.wp.com/wp-content/themes/pub/contempt/images/blue_flower/topgrad.jpg);">&nbsp;</div>

	<div id="content" class="widecolumn">
				
  	

	
		<div class="post-501 post type-post status-publish format-standard hentry category-clojure category-programming" id="post-501">
			<h2><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/" rel="bookmark" title="Permanent Link: Clojure tutorial: fetching web comics (part&nbsp;1)">Clojure tutorial: fetching web comics (part&nbsp;1)</a></h2>
	
			<div class="entry">
				<p>This post is the first of what I hope will become a series about Clojure.  Clojure is a young language, and though there is a lot of documentation already on the Internet and in the blogs of many enthusiasts, I figured there would be no harm in having some more.</p>
<p>In this series, I will start with a simple script and with each post, I will improve the program by introducing new Clojure features.  The whole thing is not mapped out, and as such, I am very receptive to constructive comments on how to make these posts better.</p>
<h2>The problem</h2>
<p>The problem we will tackle on is a fairly simple one: scraping web sites.  I am a of web comics enthusiast, I read quite a few of them, but I don&#8217;t like to go on 20 web sites to view them all, and their RSS feeds are often not to my satisfaction: some feeds only give you a link to the latest strip, others have news, information or publicity in them that you don&#8217;t want.  So we will write a script that extracts the latest strip from web comic sites and create an RSS feed with those.</p>
<h2>What we&#8217;ll do today</h2>
<p>In this first post, we&#8217;ll get something very simple working: the program will download the content of a web site, extract the strip link and print it.  This will allow us to view <a href="http://clojure.org/data_structures">data structures</a> and <a href="http://clojure.org/java_interop">Java interop</a>.  I will not assume that you know any Clojure, so I&#8217;ll try to explain as we go along.  If something is unclear, you can always check out the documentation on the official Clojure web site.</p>
<p>The pseudo code of our application will be as follows:</p>
<pre>
for each comic:
    get the html
    extract the image URL with a regex
    display the complete image URL
</pre>
<h2>Data</h2>
<p>We&#8217;ll start our program by defining our data.  We will want to scrape several comic strips and not have to write one function per web comic, so we&#8217;ll need a standard way to represent the different comics we have.  We will need four pieces of data:</p>
<ul>
<li>The name of the web comic</li>
<li>The URL where the latest comic can be found</li>
<li>A regular expression to capture the strip image link</li>
<li>An optional URL prefix to construct an absolute URL</li>
</ul>
<p>Because most sites use relative links for their images, if no URL prefix is given, we will assume that the URL of the latest strip page is to be used as the prefix.</p>
<p>We will represent the data of one comic with a <a href="http://clojure.org/data_structures#toc59">hash-map</a> and we will put all those hash-maps inside a <a href="http://clojure.org/data_structures#toc49">vector</a>.  Here&#8217;s the result with two comics:</p>
<pre>
(def *comics*
  [{:name "Penny-Arcade"
    :url "http://www.penny-arcade.com/comic/"
    :regex #"images/\\d{4}/.+?(?:png|gif|jpg)"
    :prefix "http://www.penny-arcade.com/"
    }
   {:name "We The Robots"
    :url "http://www.wetherobots.com/"
    :regex #"comics/.+?[.](?:jpg|png|gif)"
    }
  ])
</pre>
<p>A few notes about this piece of code:</p>
<ul>
<li><a href="http://clojure.org/special_forms#toc1"><code>def</code></a> is special form to assign a value to a name.  In this case, we assign our vector of hash-maps to <code>*comics*</code>.</li>
<li>* is a valid character in an identifier.  It is a Lisp convention to use asterisks around a variable name to indicate that it is a global variable.  The list of valid identifier characters is described in the page about the <a href="http://clojure.org/reader">reader</a>.</li>
<li>Clojure has literal syntax for vectors: space-separated values enclosed in square braces.</li>
<li>Clojure has literal syntax for maps: space-separated values enclosed in curly braces.  Clojure considers commas to be white space, so you can use them to clearly separate the different pairs: <code>{:false 0, :true 1}</code>.</li>
<li>Clojure has a special data type called a <em>keyword</em>.  Keywords begin with a colon followed by one or more identifier characters.</li>
<li>Clojure strings are enclosed inside double quotes.</li>
<li>Clojure has literal syntax for regular expressions: <code>#"regex"</code>.  In the latest stable release of Clojure (20080916), the text inside the quotes is not automatically escaped, and the backslashes need to be doubled.  In the Subversion repository and in future releases, this behavior has been changed and you no longer need to double the backslashes (except to represent a literal backslash.)</li>
<li>We omitted the <code>:prefix</code> key/value pair for &#8220;We The Robot&#8221;: accessing a non-existing key in a Clojure map returns <code>nil</code>, which is what we said we want when we want to use the value of the <code>:url</code> field as the prefix.</li>
</ul>
<p>That&#8217;s actually quite a lot of notes for such a short piece of code!  Now that we have our data, let&#8217;s look at the next step, fetching the HTML from a URL.</p>
<h2>Fetching the HTML</h2>
<p>Java has a class to read documents through the HTTP protocol, which means that Clojure has a class to read documents through the HTTP protocol.  Sadly, Java does not have a method to download an entire document as a string.  We&#8217;ll have to create our own function to do the deed.</p>
<p>The classes that we&#8217;ll need can be accessed by their fully-qualified names (e.g.: <code>java.io.BufferedReader</code>), but this tends to make the code long-winded.  We&#8217;ll use the <a href="http://clojure.org/api#toc252"><code>import</code></a> function to load the class names into the current namespace to keep our code shorter.</p>
<pre>
(import '(java.net URL)
        '(java.lang StringBuilder)
        '(java.io BufferedReader InputStreamReader))
</pre>
<p><code>import</code> takes an arbitrary number of lists where the first element is a symbol representing the name of the package and the rest are the classes to be added to the namespace.  Here, we import <code>URL, StringBuilder, BufferedReader and InputStreamReader</code>.</p>
<p>Now, let&#8217;s look at the code to download an HTML page:</p>
<pre>
(defn fetch-url
  "Return the web page as a string."
  [address]
  (let [url (URL. address)]
    (with-open stream (. url (openStream))
      (let [buf (BufferedReader. (InputStreamReader. stream))]
        (apply str (line-seq buf))))))
</pre>
<p>We&#8217;ll look at the code line by line in just a moment, but let me first explain quickly what this function does.  <code>fetch-url</code> is a function that takes an argument, <code>address</code>, uses this argument to create a new URL object and open a stream to that object.  We then read all the lines from that stream, join them together and return one big string.</p>
<ul>
<li><code>(defn fetch-url</code>: <a href="http://clojure.org/macros#toc7"><code>defn</code></a> is a macro used to define a new function.  It is followed by the name of the function, <em>fetch-url</em>.</li>
<li><code>"Return the web page as a string."</code>: functions can have a documentation string which can be consulted in the REPL with the <code>doc</code> function.  It appears between the name of the function and the formal parameters.</li>
<li><code>[address]</code>: the list of formal parameters is actually a vector of formal parameters.</li>
<li><code>(let [url (URL. address)]</code>: <a href="http://clojure.org/special_forms#toc4"><code>let</code></a> is a special form used to introduce a new scope with some bindings.  The bindings are defined inside square brackets with the format <code>[name1 value1 name2 value2 ...]</code>.  <code>(URL. address)</code> constructs a new URL (the Java class) from <code>address</code>.  Suffixing a dot to a class name is the same as <code>(new ClassName)</code>.</li>
<li><code>(with-open stream (. url (openStream))</code>: <a href="http://clojure.org/api#toc525"><code>with-open</code></a> is a macro that wraps code inside a try/finally block and calls the <code>close</code> method after the block has finished executing.  Here we open a stream to the URL of our comic and <code>with-open</code> will automatically close that stream when we&#8217;re done.  There are other ways to call the method: <code>(. url openStream)</code> and <code>(.openStream url)</code> are both valid.</li>
<li>Next we have one more definitions, a buffered reader. This should be familiar to Java people.</li>
<li><code>(apply str (line-seq buf))))))</code>: the function <a href="http://clojure.org/api#toc281"><code>line-seq</code></a> returns a lazy sequence of all the lines in a BufferedReader.  We then <a href="http://clojure.org/api#toc61">apply</a> the <a href="http://clojure.org/api#toc463"><code>str</code></a> function to all those lines to join them together into one string and this value is returned.  You&#8217;ll note that there are a lot of closing parentheses on this line: it&#8217;s a Lisp convention to close every parentheses on the same line instead of putting each one on a separate line as is conventional in the Java world.</li>
</ul>
<p>Phew, that was a lot to take in!  Now that we&#8217;ve completed the second line of our pseudo code, we&#8217;re ready to extract the image links.</p>
<h2>Extracting the image link</h2>
<p>The function used to get the image link is much shorter than <code>fetch-url</code>.  We will pass a comic (a map), we will use the Clojure function <code>re-find</code> to find the string we are looking for and we will return it with the prefix.  Let&#8217;s look at the code:</p>
<pre>
(defn image-url
  "Return the absolute URL of the image of a comic.
  If the comic has a prefix, prepend it to the URL,
  otherwise use the :url value."
  [comic]
  (let [src (fetch-url (:url comic))
        image (re-find (:regex comic) src)]
    (str (or (:prefix comic) (:url comic))
         image)))
</pre>
<p>This should now look familiar to you.  A function of one argument with a documentation string.  We won&#8217;t look at every line, instead I&#8217;ll explain the important parts:</p>
<ul>
<li>Maps are functions of their keys: to access a value in a map, you say <code>(map key)</code>.  If a key is a keyword, you can also say <code>(:keyword map)</code>.</li>
<li><a href="http://clojure.org/api#toc397"><code>re-find</code></a> returns either the matching string if there were no captures in the regular expression, a vector if there were captures or nil if no match was found.  We don&#8217;t do any captures in our examples, so <code>image</code> is a string.</li>
<li>The function <code>str</code> is used to concatenate strings.  <code>(str "foo" "bar")</code> returns <code>"foobar"</code>.</li>
<li><a href="http://clojure.org/macros#toc2"><code>or</code></a> returns its first argument if it&#8217;s true, the second one otherwise.  <code>nil</code> and <code>false</code> are the only false values, all other values are true.  This returns the prefix if there is one or the url if there is no defined prefix.</li>
</ul>
<h2>Printing the URLs</h2>
<p>Finally, we can print the URLs.  We will use the <a href="http://clojure.org/api#toc187"><code>doseq</code></a> macro for this purpose, which is practically a foreach loop.  <code>doseq</code> takes three argument: the name of an individual item, a collection and a body.  We will print the name of the comic and the URL of its latest strip.</p>
<pre>
(doseq comic *comics*
  (println (str (:name comic) ": " (image-url comic))))
</pre>
<p>This should give us the following output:</p>
<pre>
Penny-Arcade: http://www.penny-arcade.com/images/2008/20081029.jpg
We The Robots: http://www.wetherobots.com/comics/2008-10-22-Storytime.jpg
</pre>
<h2>Next time</h2>
<p>Next time, we&#8217;ll look at how multimethods can help us to handle cases such as Xkcd where we also want to get the URL of the strip, but also the alt text to have a complete strip.</p>
	
					
				<p class="postmetadata alt">
					<small>
					This entry was posted  on Friday, October 31st, 2008 at 8:22 am and is filed under <a href="http://en.wordpress.com/tag/clojure/" title="View all posts in clojure" rel="category tag">clojure</a>, <a href="http://en.wordpress.com/tag/programming/" title="View all posts in Programming" rel="category tag">Programming</a>.					You can follow any responses to this entry through the <a href='http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/feed/'>RSS 2.0</a> feed. 

											You can <a href="#respond">leave a response</a>, or <a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/trackback/" rel="trackback">trackback</a> from your own site.
											
					</small>
				</p>
	
			</div>
		</div>
		
	<div id="wpl-likebox"><div id="wpl-button"><a href='http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/?like=1&amp;_wpnonce=1c6ce24a74' title='I like this post' class='like needs-login'><span>Like</span></a></div><div id="wpl-count">Be the first to like this post.</div></div><div id="comments">


<h3 id="comments-title">12 Responses to <em>Clojure tutorial: fetching web comics (part&nbsp;1)</em></h3>


<ol class="commentlist">
			<li class="pingback even thread-even depth-1" id="comment-1707">
				<div id="div-comment-1707" class="comment-body">
				<div class="comment-author vcard">
				<cite class="fn"><a href='http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/' rel='external nofollow' class='url'>Fetching web comics with Clojure (part 2) &laquo; Occasionally sane</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-1707">
			November 18, 2008 at 10:08 pm</a>		</div>

		<p>[...] web comics with Clojure (part&nbsp;2)  Last time, we saw how to fetch the image URL of web comics in Clojure by using regular expressions and some [...]</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=1707#respond' onclick='return addComment.moveForm("div-comment-1707", "1707", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1712">
				<div id="div-comment-1712" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/d6c15c32412570d3b3c215cec749b441?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn">Brian Doyle</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-1712">
			November 22, 2008 at 3:20 am</a>		</div>

		<p>Vincent,</p>
<p>This is good stuff and I&#8217;m learning quite a bit.   I would recommend you use<br />
the clojure.contrib library and would allow you to change this:</p>
<p>(with-open stream (. url (openStream))<br />
      (let [buf (BufferedReader. (InputStreamReader. stream))]<br />
        (apply str (line-seq buf))))))</p>
<p>to something like:</p>
<p>(with-open [buf (reader url)]<br />
      (apply str (line-seq buf))) </p>
<p>You would have to call (use &#8216;clojure.contrib.duck-streams) beforehand<br />
to use the reader function though.</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=1712#respond' onclick='return addComment.moveForm("div-comment-1712", "1712", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment even thread-even depth-1" id="comment-1739">
				<div id="div-comment-1739" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/bfcc9047bea80035a936648dc1912ec4?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn">Gavin Sinclair</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-1739">
			January 11, 2009 at 11:46 pm</a>		</div>

		<p>Hi, thanks for this series.  I&#8217;ve just enjoyed the first part and will now move on to the second.  Two suggestions&#8230;</p>
<p>1. Update the code for the latest release of Clojure.  This series is linked from the Clojure wiki, so you&#8217;ll probably have more people come through, running the latest version.</p>
<p>2. In image-url, I would include a third binding in the let: prefix (or (:prefix comic) (:url comic).  That way &#8220;body&#8221; of the function becomes (str prefix image).  Just an idea from an inexperienced Clojure programmer.</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=1739#respond' onclick='return addComment.moveForm("div-comment-1739", "1739", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2046">
				<div id="div-comment-2046" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/dded7ffbdb3700837e32005482aad32e?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn"><a href='http://prasannapendse.com' rel='external nofollow' class='url'>Prasanna</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-2046">
			August 9, 2009 at 4:36 pm</a>		</div>

		<p>I&#8217;m guessing you haven&#8217;t had a chance to update the code-snippets for the latest version of clj.</p>
<p>Here&#8217;s one: square-brackets are required for doseq. The code should read:</p>
<p>(doseq [comic *comics*]<br />
  (println (str (:name comic) &#8220;: &#8221; (image-url comic))))</p>
<p>Thanks for putting this stuff up!</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=2046#respond' onclick='return addComment.moveForm("div-comment-2046", "2046", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment even thread-even depth-1" id="comment-2062">
				<div id="div-comment-2062" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/d2c66817f81cd301c7eacf5ec58f84eb?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn"><a href='http://www.beginner-tutorials.com' rel='external nofollow' class='url'>Web Tutorials</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-2062">
			September 10, 2009 at 5:47 am</a>		</div>

		<p>really enjoyed this set of tutorials, going to continue with second part now.</p>
<p>really great, thank again.<br />
fred.</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=2062#respond' onclick='return addComment.moveForm("div-comment-2062", "2062", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2086">
				<div id="div-comment-2086" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/cee512f1dcd234e978f7249daa1a2525?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn">mighty15</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-2086">
			October 23, 2009 at 2:58 pm</a>		</div>

		<p>FYI, Penny Arcade has changed their comic URL. Using the code you have, I found these changes in *comic* will make it work again:</p>
<p>Change the regex to:<br />
:regex #”http://art.penny-arcade.com/photos/+[0-9]+_+[a-z].+?(?:png|gif|jpg)”</p>
<p>and change the prefix to:<br />
:prefix “”</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=2086#respond' onclick='return addComment.moveForm("div-comment-2086", "2086", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment even thread-even depth-1" id="comment-2091">
				<div id="div-comment-2091" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/e22680953e96525cd8b190f87c3c2dca?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn">Jerome</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-2091">
			November 14, 2009 at 12:42 am</a>		</div>

		<p>Thanks for the tutorial. Nicely done! </p>
<p>I tried it out today with clojure 1.0 and had to make a couple modifications&#8230;</p>
<p>;;;(1) with-open bindings &amp; body in a vector<br />
(defn fetch-url<br />
  &#8220;Return the web page as a string.&#8221;<br />
  [address]<br />
  (let [url (URL. address)]<br />
   (with-open [rdr (java.io.BufferedReader.  (InputStreamReader.  (. url (openStream)))) ]<br />
    (apply str (line-seq rdr)))))</p>
<p>;;; (2) doseq requires a vector for its bindings<br />
(doseq [comic *comics*]<br />
  (println (str (:name comic) &#8220;: &#8221; (image-url comic))))</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=2091#respond' onclick='return addComment.moveForm("div-comment-2091", "2091", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-2097">
				<div id="div-comment-2097" class="comment-body">
				<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.duetsch.info/destillat-kw47-2009.html' rel='external nofollow' class='url'>Destillat KW47-2009 | duetsch.info - GNU/Linux, Open Source, Softwareentwicklung, Selbstmanagement, Vim ...</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-2097">
			November 20, 2009 at 5:45 am</a>		</div>

		<p>[...] Clojure tutorial: fetching web comics (part 1) [...]</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=2097#respond' onclick='return addComment.moveForm("div-comment-2097", "2097", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment even thread-even depth-1" id="comment-2113">
				<div id="div-comment-2113" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/2f079688afead4a0ba2a0dcbf8ff688c?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn"><a href='http://www.warriorforum.com/blogs/rayray7/8778-history-ways-avoid-nigerian-419-scam.html' rel='external nofollow' class='url'>Jarod Wolman</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-2113">
			December 22, 2009 at 5:34 pm</a>		</div>

		<p>While this matter can be very difficult for most people, my view is that there has to be a middle or common ground that we all can find. I do appreciate that you&#8217;ve added relevant and intelligent commentary here though. Thank you!</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=2113#respond' onclick='return addComment.moveForm("div-comment-2113", "2113", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2142">
				<div id="div-comment-2142" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/cfd76673575a06ba5c9ca7d7b23bd106?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn"><a href='http://devinweiss.tumblr.com/' rel='external nofollow' class='url'>Weiss - Devin</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-2142">
			March 20, 2010 at 7:55 am</a>		</div>

		<p>Barack Obama&#8217;s book, &#8220;The Audacity of Hope,&#8221; provides a catchy title. It has a taste of bravery mixed with full confidence. There&#8217;s nothing Pollyanna about it. I will possibly not support every little thing he tells, but he&#8217;s our president, and for me, he inspires trust. That may do more for a region than any volume of backroom deals. Hope gives us energy, and energy sustains us through trying times. Boy, we&#8217;ve had them. I&#8217;m from West Texas, and I did not vote for Bush. When McCain ran against Obama, I used to be a citizen of Arizona, but I gave audacious hope a chance. The fight for progress and laying the foundations of prosperity is just not over. I&#8217;ve come across the quips of those who don&#8217;t think Obama is capable of doing it. But step back a second. Would anyone have all of us fail just to tarnish the star of an incumbent for whom they didn&#8217;t vote? Trying to keep our priorities straight, let&#8217;s work together with our president and build our future.</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=2142#respond' onclick='return addComment.moveForm("div-comment-2142", "2142", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment even thread-even depth-1" id="comment-2200">
				<div id="div-comment-2200" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/2072b1c80b50917e07e278717249d089?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn"><a href='http://www.liberar-blackberry.com' rel='external nofollow' class='url'>Liberar Blackberry</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-2200">
			July 27, 2010 at 7:56 pm</a>		</div>

		<p>I Will try this out! thanks for sharing!</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=2200#respond' onclick='return addComment.moveForm("div-comment-2200", "2200", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2202">
				<div id="div-comment-2202" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/2fcef53d1c2075932a8c1f966732138c?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn">tim</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/#comment-2202">
			August 5, 2010 at 1:23 am</a>		</div>

		<p>Wow, thanks, this is great!  I&#8217;m new to Clojure and have been thinking about doing some kind of screen scraping program, this is exactly what I needed!</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/10/31/fetching-web-comics-with-clojure-part-1/?replytocom=2202#respond' onclick='return addComment.moveForm("div-comment-2202", "2202", "respond", "501")'>Reply</a>		</div>
				</div>
		</li>
</ol>



								<div id="respond">
				<h3 id="reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2008/10/31/fetching-web-comics-with-clojure-part-1/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://gnuvince.wordpress.com/wp-comments-post.php" method="post" id="commentform">
																			<p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name</label> <span class="required">*</span><input id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email</label> <span class="required">*</span><input id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label><input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label><textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;pre&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p>						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='501' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
						
<input type="hidden" name="genseq" value="1293265305" />
<p><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" tabindex="6"/> <label class="subscribe-label" id="subscribe-label" for="subscribe">Notify me of follow-up comments via email.</label></p><p><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;" tabindex="7"/> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog">Notify me of site updates</label></p><input type="hidden" name="sub-type" value="comment-form-text4" /><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="bd3b3b9cf8" /></p>					</form>
							</div><!-- #respond -->
						
</div><!-- #comments -->	
		
	</div>
	
	

	<div id="sidebar">
		<ul>

		<li id="search-2" class="widget widget_search"><form method="get" id="searchform" action="http://gnuvince.wordpress.com/">
<div><label for="s" class="search-label">Search</label><input type="text" value="" name="s" id="s" />
<input type="submit" id="searchsubmit" value="Search" />
</div>
</form></li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
				<li><a href="http://gnuvince.wordpress.com/2010/11/28/cycling-with-closures/" title="Cycling with&nbsp;closures">Cycling with&nbsp;closures</a></li>
				<li><a href="http://gnuvince.wordpress.com/2010/09/29/turing-machine-in-scala/" title="Turing Machine in&nbsp;Scala">Turing Machine in&nbsp;Scala</a></li>
				<li><a href="http://gnuvince.wordpress.com/2010/08/23/edge-cases-in-computer-programs/" title="Edge cases in computer&nbsp;programs">Edge cases in computer&nbsp;programs</a></li>
				<li><a href="http://gnuvince.wordpress.com/2009/10/18/my-quick-review-of-winning-low-limit-hold-em-by-lee-jones/" title="My quick review of Winning Low Limit Hold &#8216;em, by Lee&nbsp;Jones">My quick review of Winning Low Limit Hold &#8216;em, by Lee&nbsp;Jones</a></li>
				<li><a href="http://gnuvince.wordpress.com/2009/10/12/weechat/" title="Weechat">Weechat</a></li>
				</ul>
		</li>
<li id="linkcat-460" class="widget widget_links"><h2 class="widgettitle">Blogs</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://debugfailure.wordpress.com/">Debugger&#8217;s weblog</a></li>
<li><a href="http://www.haineault.com/blog/">Haineault.com</a></li>
<li><a href="http://hbfs.wordpress.com">Harder, Better, Faster, Stronger</a></li>
<li><a href="http://www.noidea.ca/">Un bout de DBA MySQL</a></li>

	</ul>
</li>

		<li id="top-posts" class="widget widget_stats_topposts">			<h2 class="widgettitle">Top Posts</h2>
			<ul><li><a href='http://gnuvince.wordpress.com/2008/03/28/7-ways-to-copy-protected-photos/'>7 ways to copy "protected" photos</a></li><li><a href='http://gnuvince.wordpress.com/2007/09/14/a-django-template-tag-for-the-current-active-page/'>A Django template tag for the current active page</a></li><li><a href='http://gnuvince.wordpress.com/2007/02/24/emacs-and-vim/'>Emacs and Vim</a></li><li><a href='http://gnuvince.wordpress.com/2009/09/08/enums-in-c/'>Enums in C</a></li><li><a href='http://gnuvince.wordpress.com/2007/12/22/django-paths-and-urls/'>Django, paths and URLs</a></li></ul>		</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
			<li><a href='http://gnuvince.wordpress.com/2010/11/' title='November 2010'>November 2010</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2010/09/' title='September 2010'>September 2010</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2010/08/' title='August 2010'>August 2010</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/10/' title='October 2009'>October 2009</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/09/' title='September 2009'>September 2009</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/08/' title='August 2009'>August 2009</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/06/' title='June 2009'>June 2009</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/05/' title='May 2009'>May 2009</a>&nbsp;(4)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/04/' title='April 2009'>April 2009</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/03/' title='March 2009'>March 2009</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/02/' title='February 2009'>February 2009</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/01/' title='January 2009'>January 2009</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/12/' title='December 2008'>December 2008</a>&nbsp;(4)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/11/' title='November 2008'>November 2008</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/10/' title='October 2008'>October 2008</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/09/' title='September 2008'>September 2008</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/08/' title='August 2008'>August 2008</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/07/' title='July 2008'>July 2008</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/05/' title='May 2008'>May 2008</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/04/' title='April 2008'>April 2008</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/03/' title='March 2008'>March 2008</a>&nbsp;(4)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/02/' title='February 2008'>February 2008</a>&nbsp;(5)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/01/' title='January 2008'>January 2008</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/12/' title='December 2007'>December 2007</a>&nbsp;(4)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/11/' title='November 2007'>November 2007</a>&nbsp;(6)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/10/' title='October 2007'>October 2007</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/09/' title='September 2007'>September 2007</a>&nbsp;(15)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/08/' title='August 2007'>August 2007</a>&nbsp;(5)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/07/' title='July 2007'>July 2007</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/06/' title='June 2007'>June 2007</a>&nbsp;(7)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/05/' title='May 2007'>May 2007</a>&nbsp;(8)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/04/' title='April 2007'>April 2007</a>&nbsp;(5)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/03/' title='March 2007'>March 2007</a>&nbsp;(6)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/02/' title='February 2007'>February 2007</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/01/' title='January 2007'>January 2007</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/12/' title='December 2006'>December 2006</a>&nbsp;(7)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/11/' title='November 2006'>November 2006</a>&nbsp;(16)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/10/' title='October 2006'>October 2006</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/09/' title='September 2006'>September 2006</a>&nbsp;(20)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/08/' title='August 2006'>August 2006</a>&nbsp;(6)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/07/' title='July 2006'>July 2006</a>&nbsp;(7)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/06/' title='June 2006'>June 2006</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/05/' title='May 2006'>May 2006</a>&nbsp;(23)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/04/' title='April 2006'>April 2006</a>&nbsp;(12)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/03/' title='March 2006'>March 2006</a>&nbsp;(20)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/02/' title='February 2006'>February 2006</a>&nbsp;(16)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/01/' title='January 2006'>January 2006</a>&nbsp;(27)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/12/' title='December 2005'>December 2005</a>&nbsp;(41)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/11/' title='November 2005'>November 2005</a>&nbsp;(38)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/10/' title='October 2005'>October 2005</a>&nbsp;(35)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/09/' title='September 2005'>September 2005</a>&nbsp;(22)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/08/' title='August 2005'>August 2005</a>&nbsp;(40)</li>
		</ul>
</li>
		</ul>
	</div>
	
	


<div id="footer">
	<p>
	Theme: <a href="http://theme.wordpress.com/themes/contempt/">Contempt</a> by <a href="http://www.vault9.net" rel="designer">Vault9</a>.<br />
	<a href="http://wordpress.com/?ref=footer" rel="generator">Blog at WordPress.com</a>.
	</p>
</div>

</div>

		<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script>	<script type="text/javascript">
	/* <![CDATA[ */
		jQuery( function() {
			
			jQuery('#wpl-button > a.like').click( function(e) {
				e.preventDefault();
				
				jQuery('#wpl-mustlogin').remove();

				jQuery.post( 'http://gnuvince.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_like_click'
				} );

				var tenMins = new Date();
				tenMins.setTime( tenMins.getTime() + 600000 );
				document.cookie = 'wpl_rand=9d0508a66c; expires=' + tenMins.toGMTString() + '; domain=wordpress.com; path=/;';
				
				jQuery('#wpl-count').after( '\
					<div id="wpl-mustlogin"> \
						<form action="http://gnuvince.wordpress.com/wp-login.php" method="post"> \
							<p>Just one more step to like this post:</p> \
							<label><span>Username</span> <input type="text" name="log" id="user_login" class="input" value="" size="20" tabindex="80" /></label> \
							<label><span>Password</span> <input type="password" name="pwd" id="user_pass" class="input" value="" size="20" tabindex="81" /></label> \
							<input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="Log In" tabindex="82" /> \
							<input type="hidden" name="redirect_to" value="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/?like=1" /> \
							<input type="hidden" name="wpl_rand" value="9d0508a66c" /> \
							<p>Not a member yet? <a href="http://wordpress.com/signup/?ref=likebox" id="wpl-signup-link">Sign up with WordPress.com</a></p> \
						</form> \
					</div> \
				');
				
				jQuery('#wpl-mustlogin').hide().slideDown('fast');
			} );
			
			jQuery('#wpl-mustlogin input.input').live( 'focus', function() {
				jQuery(this).prev().hide();
			}).live( 'blur', function() {
				if ( jQuery(this).val() == '' )
					jQuery(this).prev().show();
			});
			
			jQuery('#wpl-mustlogin input#wp-submit').live( 'click', function(e) {
				e.preventDefault();
				
				jQuery.post( 'http://gnuvince.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_login_submit'
				}, function() {
					jQuery('#wpl-mustlogin form').submit();
				} );
			});			
			
			jQuery('#wpl-mustlogin a#wpl-signup-link').live( 'click', function(e) {
				e.preventDefault();
				
				var link = jQuery(this).attr('href');
				
				jQuery.post( 'http://gnuvince.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_signup_click'
				}, function() {
					location.href = link;
				} );
			});					
			
		});
	/* ]]> */
	</script>
<script type="text/javascript">_qoptions={qacct:'p-18-mFEk4J448M',labels:'language.en,type.wpcom'};</script>
<script type="text/javascript" src="http://edge.quantserve.com/quant.js"></script>
<noscript><p><img class="robots-nocontent" src="http://pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif?labels=language.en%2Ctype.wpcom" style="display:none" height="1" width="1" alt="" /></p></noscript>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?n&#038;ver=MU'></script>
	<script type="text/javascript">	
	// <![CDATA[
	WPGroHo = {
		data: {},
		renderers: {},
		syncProfileData: function( hash, id ) {
			if ( !WPGroHo.data[hash] ) {
				WPGroHo.data[hash] = {};
				a = jQuery( 'div.grofile-hash-map-' + hash + ' span' ).each( function() {
					WPGroHo.data[hash][this.className] = jQuery( this ).text();
				} );
			}

			WPGroHo.appendProfileData( WPGroHo.data[hash], hash, id );
		},
		appendProfileData: function( data, hash, id ) {
			for ( var key in data ) {
				if ( jQuery.isFunction( WPGroHo.renderers[key] ) ) {
					return WPGroHo.renderers[key]( data[key], hash, id, key );
				}

				jQuery( '#' + id ).find( 'h4' ).after( jQuery( '<p class="grav-extra ' + key + '" />' ).html( data[key] ) );
			}
		}
	};
	jQuery(document).ready(function($){
		Gravatar.profile_cb = function( h, d ) {
			WPGroHo.syncProfileData( h, d );
		};
		Gravatar.attach_profiles();
	});
	// ]]>
	</script>
	<div style="display:none">
	<div class="grofile-hash-map-d6c15c32412570d3b3c215cec749b441">
	</div>
	<div class="grofile-hash-map-bfcc9047bea80035a936648dc1912ec4">
	</div>
	<div class="grofile-hash-map-dded7ffbdb3700837e32005482aad32e">
	</div>
	<div class="grofile-hash-map-d2c66817f81cd301c7eacf5ec58f84eb">
	</div>
	<div class="grofile-hash-map-cee512f1dcd234e978f7249daa1a2525">
	</div>
	<div class="grofile-hash-map-e22680953e96525cd8b190f87c3c2dca">
	</div>
	<div class="grofile-hash-map-2f079688afead4a0ba2a0dcbf8ff688c">
	</div>
	<div class="grofile-hash-map-b30c04eb50e375f9d6cd2ddcf1681308">
	</div>
	<div class="grofile-hash-map-2072b1c80b50917e07e278717249d089">
	</div>
	<div class="grofile-hash-map-2fcef53d1c2075932a8c1f966732138c">
	</div>
	</div>
<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js"></script><script type="text/javascript">try{COMSCORE.beacon({c1:2,c2:7518284});}catch(e){}</script><noscript><p class="robots-nocontent"><img src="http://b.scorecardresearch.com/p?cj=1c1=2&#038;c2=7518284" alt="" style="display:none" width="1" height="1" /></p></noscript><script src="http://s.stats.wordpress.com/w.js?19" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'1436454','v':'wpcom','user_id':'0','post':'501','subd':'gnuvince'});
ex_go({'crypt':'RDZ8LFkxbXFDLnxkNj0xeTJkcS9ZcVtLLHhNNFg4V0VXb01jXz9mdEF5QlduQndhSi03N0Z2K2xFP0t1QUFuVk1qQ1IuWnglRGdyLXRzRjJ6UGdGa29NZVNfaV0rYXpZTysmLDZoYT9bNyxNWFlkcUNKMSZYeVt5T1ZpS2lWemFmYl1RYXxkVmU5al81WEVWejJuYS5YeE8vS05kQ3FWNi0uLUJBTFVZUlZwbXhic2ZNPUdjb0J5MnROaGovfHhOTjhZeFRERkZsMDRB'});
addLoadEvent(function(){linktracker_init('1436454',501);});
	</script>

</body>
</html>