<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en">
<head profile="http://gmpg.org/xfn/11">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>The SEC and the Python &laquo; Prof. Jayanth R. Varma&#8217;s Financial Markets Blog</title>

	<style type="text/css" media="screen">
		@import url( http://s0.wp.com/wp-content/themes/pub/connections/style.css?m=1293051392g );
	</style>
	<link rel="pingback" href="http://jrvarma.wordpress.com/xmlrpc.php" />

<!--[if IE 7]>
<style type="text/css"> 
	#topnav li {
		display: inline;
	}
</style>
<![endif]-->

	<link rel="alternate" type="application/rss+xml" title="Prof. Jayanth R. Varma&#039;s Financial Markets Blog &raquo; Feed" href="http://jrvarma.wordpress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Prof. Jayanth R. Varma&#039;s Financial Markets Blog &raquo; Comments Feed" href="http://jrvarma.wordpress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Prof. Jayanth R. Varma&#039;s Financial Markets Blog &raquo; The SEC and the&nbsp;Python Comments Feed" href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel="stylesheet" href="http://s0.wp.com/wp-content/themes/h4/global.css?m=1291749258g" type="text/css" />
<script type='text/javascript' src='http://s2.wp.com/wp-includes/js/l10n.js?m=1290133841g&amp;ver=20101110'></script>
<script type='text/javascript' src='http://s1.wp.com/wp-includes/js/jquery/jquery.js?m=1290133841g&amp;ver=1.4.4'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-includes/js/comment-reply.js?m=1235111560g&amp;ver=20090102'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://jrvarma.wordpress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://jrvarma.wordpress.com/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Prof. Jayanth R. Varma&#8217;s Financial Markets Blog' href='http://jrvarma.wordpress.com/' />
<link rel='prev' title='Icesave: What is in a&nbsp;name?' href='http://jrvarma.wordpress.com/2010/04/14/icesave-what-is-in-a-name/' />
<link rel='next' title='SEBI, IRDA and the&nbsp;courts' href='http://jrvarma.wordpress.com/2010/04/17/sebi-irda-and-the-courts/' />
<meta name="generator" content="WordPress.com" />
<link rel='canonical' href='http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/' />
<link rel='shortlink' href='http://wp.me/pjxBC-6C' />
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48" />
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48" />
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1250548519g" />
	<style type="text/css">
	/* <![CDATA[ */
				div#likes { margin-top: 15px; }
		.like-button { border: 1px solid #eee; padding: 2px 6px; font-size: 13px; font-family: arial, tahoma, sans-serif; }
		#wpl-likebox { clear: left; font-size: 11px; font-family: arial, tahoma, verdana, sans-serif !important; min-height: 30px; margin: 10px 0 !important; padding: 5px 0 10px 0 !important; }
		#wpl-button { float: left; background: url( /i/buttonbg.png ) top left repeat-x; margin-right: 7px; border: 1px solid #d4d4d4; -moz-border-radius: 3px; -webkit-border-radius: 3px; border-radius: 3px; }
		#wpl-button a { color: #666 !important; line-height: 130% !important; text-decoration: none !important; outline: none; float: left; padding: 3px 6px 2px 24px !important; font-size: 11px !important; background: url( /i/likestar.png ) 6px 49.8% no-repeat; }
		#wpl-button.liked { background: #feffce; border: 1px solid #f3e389; }
		#wpl-button.liked a { color: #ba871b !important; }
		#wpl-likebox #wpl-count { min-height: 25px; line-height: 130% !important; float: left; padding-top: 4px; }
		#wpl-likebox #wpl-avatars { clear: left; max-height: 98px; overflow: hidden; margin-top: 15px; line-height: 130% !important; }
		#wpl-likebox #wpl-avatars img { border: none !important; }
		#wpl-likebox #wpl-mustlogin { line-height: 14px !important; font-size: 11px; clear: left; margin-top: 5px; background: #f0f0f0; padding: 10px; width: 65%; -moz-border-radius: 3px; -webkit-border-radius: 3px; border-radius: 3px; }
		#wpl-likebox #wpl-mustlogin a { color: #888; text-decoration: underline; }
		#wpl-likebox #wpl-mustlogin p { margin: 5px 0; padding: 0 }
		#wpl-likebox #wpl-mustlogin input.input { padding: 2px; background: #fff; font-size: 11px; font-family: inherit; border: 1px solid #ccc; -moz-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1) inset; -webkit-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1) inset; line-height: 12px; }
		#wpl-likebox #wpl-mustlogin input#wp-submit { border: 1px solid #ccc; font-size: 11px; background: #fafafa; repeat-x; -moz-border-radius: 3px; -webkit-border-radius: 3px; border-radius: 3px; padding: 2px 4px !important; line-height: 12px; }
		#wpl-likebox #wpl-mustlogin label { position: relative; cursor: text; }
		#wpl-likebox #wpl-mustlogin label span { position: absolute; top: 0px; left: 5px; padding: 0 !important; }
		#wpl-likebox #wpl-mustlogin label span { top /*\**/: -10px\9; }
	/* ]]> */
	</style>
	<link rel='openid.server' href='http://jrvarma.wordpress.com/?openidserver=1' />
<link rel='openid.delegate' href='http://jrvarma.wordpress.com/' />
<link rel="search" type="application/opensearchdescription+xml" href="http://jrvarma.wordpress.com/osd.xml" title="Prof. Jayanth R. Varma&#039;s Financial Markets Blog" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com" />
<style type="text/css">
#headimg {
	background:#7d8b5a url(http://s0.wp.com/wp-content/themes/pub/connections/img/just-train.jpg) center repeat-y;
}
#headimg h1 a, #headimg h1 a:hover, #headimg #desc {
	color: #B5C09D;
}	
</style>
<meta name="application-name" content="Prof. Jayanth R. Varma&#039;s Financial Markets Blog" /><meta name="msapplication-window" content="width=device-width;height=device-height" /><meta name="msapplication-tooltip" content="A blog on financial markets and their regulation" /><meta name="msapplication-task" content="name=Subscribe;action-uri=http://jrvarma.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico" /><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /></head>

<body>
<div id="rap">

<div id="header">
		<ul id="topnav">
		<li><a href="http://jrvarma.wordpress.com" id="navHome" title="Posted Recently" accesskey="h">Home</a></li>
		<li class="page_item page-item-2"><a href="http://jrvarma.wordpress.com/about/" title="About">About</a></li>
	</ul>

	<div id="headimg">
	<h1><a href="http://jrvarma.wordpress.com" title="Prof. Jayanth R. Varma&#8217;s Financial Markets Blog">Prof. Jayanth R. Varma&#8217;s Financial Markets Blog</a></h1>
	<div id="desc">A blog on financial markets and their regulation</div>
	</div>
</div>	
	<div id="main">
	<div id="content">
						<div class="post-410 post type-post status-publish format-standard hentry category-uncategorized">
				<p class="post-date">April 16, 2010</p>
<div class="post-info"><h2 class="post-title"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/" rel="bookmark" title="Permanent Link: The SEC and the&nbsp;Python">The SEC and the&nbsp;Python</a></h2>
Posted by Jayanth Varma under <a href="http://jrvarma.wordpress.com/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a> <br/><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comments" title="Comment on The SEC and the&nbsp;Python">[105] Comments</a>&nbsp;</div>
<div class="post-content">
	<p>Last week, the SEC put out a 667 page <a href="http://www.sec.gov/rules/proposed/2010/33-9117.pdf">proposal</a> regarding disclosures for asset backed securities. What I found exciting was this:</p>
<blockquote>
<p>We are proposing to require that most ABS issuers file a computer program that gives effect to the flow of funds, or &ldquo;waterfall,&rdquo; provisions of the transaction.  We are proposing that the computer program be filed on EDGAR in the form of downloadable source code in Python. &#8230; (page 205)</p>
<p>Under the proposed requirement, the filed source code, when downloaded and run by an investor, must provide the user with the ability to programmatically input the user&rsquo;s own assumptions regarding the future performance and cash flows from the pool assets, including but not limited to assumptions about future interest rates, default rates, prepayment speeds, loss-given-default rates, and any other necessary assumptions &#8230;  (page 210)</p>
<p> The waterfall computer program must also allow the use of the proposed asset-level data file that will be filed at the time of the offering and on a periodic basis thereafter.  (page 211)</p>
</blockquote>
<p>This is absolutely the right way to go particularly when coupled with the other proposal that detailed asset level data be also provided in machine readable (XML) format. For a securitization of residential mortgages for example, the proposal requires disclosure of as many as 137 fields (page 135) on each of the possibly thousands of mortgages in the pool. </p>
<p>Waterfall provisions in modern securitizations and CDOs are horrendously complicated and even the trustees who are supposed to implement these provisions are known to make mistakes. A year ago, Expect[ed] Loss gave an <a href="http://expectedloss.blogspot.com/2009/05/is-your-cdo-leaking.html">example</a> where approximately $4 million was paid to equity when that amount should have been used to pay down senior notes (hat tip <a href="http://blog.rivast.com/?cat=58">Deus Ex Macchiato</a>).</p>
<p>Even when the trustees do not make a mistake, the result is not always what investors had expected. A few months ago, <a href="http://ftalphaville.ft.com/blog/2009/11/16/83386/weird-waterfalls-and-the-synthetic-cdo-stumper-part-deux/">FT Alphaville reported</a> on two Abacus deals where the documentation allowed the issuer (Goldman Sachs) to use its &ldquo;sole discretion&rdquo; to redeem the notes without regard to seniority. People realized that this was possible only when Goldman Sachs actually paid off (at face value) some junior tranches of these CDOs at the expense of senior tranches.</p>
<p>When provisions become complex beyond a point, computer code is actually the simplest way to describe them and requiring the entire waterfall to be implemented in open source software is a very good idea. The SEC does not say so, but it would be useful to add that if there is a conflict between the software and textual description, the software should prevail.</p>
<p>Now to the inevitable question &mdash; Why Python? The SEC actually asks for comments on whether they should mandate Perl, Java or something else instead. I use Perl quite extensively, but the idea that Perl is a suitable language for implementing a transparency requirement is laughable. Perl is a model of powerful but unreadable and cryptic code. As for Java and C-Sharp, there is little point in having open source code if the interpreter is not also open source. I do not use Python myself, but it appears to be a good choice for the task at hand.</p>
<p>It is gratifying that the SEC continues the one good thing that Cox initiated when he was Chairman &ndash; the use of technology as a key regulatory tool.</p>
<div style="margin-top: 1em" class="possibly-related"><hr /><p><strong>Possibly related posts: (automatically generated)</strong></p><ul><li><a rel='related nofollow' href='http://breakingcode.wordpress.com/2010/07/23/quickpost-hiding-your-python-source-with-rot13/'>Quickpost: &ldquo;Hiding&rdquo; your Python source with ROT13</a></li><li><a rel='related nofollow' href='http://wedonotsow.wordpress.com/2009/11/04/what-does-notpron-do-specifically/'>What does notpron do, specifically?</a></li><li><a rel='related nofollow' href='http://haas414.wordpress.com/2010/07/20/apples-macpaint-and-quickdraw-source-code-released-to-the-world/'>Apple&rsquo;s MacPaint and QuickDraw source code released to the world</a></li></ul></div>	<div class="post-info">
													
	</div>
	<div class="post-footer">&nbsp;</div>
</div>
				<div id="wpl-likebox"><div id="wpl-button"><a href='http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/?like=1&amp;_wpnonce=1c6ce24a74' title='I like this post' class='like needs-login'><span>Like</span></a></div><div id="wpl-count">Be the first to like this post.</div></div>	<h3 id="comments">105 Responses to &#8220;The SEC and the&nbsp;Python&#8221;</h3> 

	<ol class="commentlist">
	<li class="comment even thread-even depth-1 parent" id="comment-399">
	<div id="div-comment-399">
	<div class="comment-author vcard">
				<cite class="fn">Tom</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-399" title="">
	April 17, 2010 at 2:55 am</a> </small>

	<p>So Python and XML?  Hate to see what the average investor&#8217;s site-packages directory will look like when they finally download all the different Python XML parsing libraries that will inevitably be used.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=399#respond' onclick='return addComment.moveForm("div-comment-399", "399", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2 parent" id="comment-459">
	<div id="div-comment-459">
	<div class="comment-author vcard">
				<cite class="fn">Phil Stephens</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-459" title="">
	April 21, 2010 at 1:03 am</a> </small>

	<p>Red herring. Installation of python libraries is easy.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=459#respond' onclick='return addComment.moveForm("div-comment-459", "459", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment even depth-3" id="comment-499">
	<div id="div-comment-499">
	<div class="comment-author vcard">
				<cite class="fn">Quux</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-499" title="">
	May 5, 2010 at 6:43 am</a> </small>

	<p>Also, there aren&#8217;t that many Python XML parsing libraries&#8230;</p>
	
	<div class="reply">
			</div>
	</div>
</li>
<li class="comment byuser comment-author-whayworth odd alt depth-3" id="comment-528">
	<div id="div-comment-528">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://thelonelyqueer.wordpress.com' rel='external nofollow' class='url'>tlq</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-528" title="">
	May 17, 2010 at 5:33 am</a> </small>

	<p>Also, based on the *size* of these proposals, the only one they&#8217;ll use is cElementTree.  &gt;_&gt;</p>
	
	<div class="reply">
			</div>
	</div>
</li>
</ol>
</li>
</ol>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-400">
	<div id="div-comment-400">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://Gnarlodious.com' rel='external nofollow' class='url'>Gnarlodious</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-400" title="">
	April 17, 2010 at 4:51 am</a> </small>

	<p>&#8220;technology as a regulatory tool&#8221;, what a concept! Pretty impressive<br />
change we can believe in. Here&#8217;s hoping open-source human-readable<br />
computer programs become the standard for verifiable elections and all<br />
sorts of financial uses. Otherwise, computers will end up being used<br />
to defraud the populace rather than to serve it.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=400#respond' onclick='return addComment.moveForm("div-comment-400", "400", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-even depth-1" id="comment-401">
	<div id="div-comment-401">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://stage.vambenepe.com/' rel='external nofollow' class='url'>William V.</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-401" title="">
	April 17, 2010 at 4:52 am</a> </small>

	<p>I can already read the first line:</p>
<p>from random import *</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=401#respond' onclick='return addComment.moveForm("div-comment-401", "401", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-402">
	<div id="div-comment-402">
	<div class="comment-author vcard">
				<cite class="fn">Kurt</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-402" title="">
	April 17, 2010 at 5:29 am</a> </small>

	<p>Python has a background in scientific computing, aka very high performance libraries (in C) designed for number crunching. Check out Scipy and Numpy. Plus Python is really easy to learn so there is less of an excuse of &#8220;programming language foo is hard, waaa!&#8221; and easy to validate/examine (thanks to enforced white space/etc.).</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=402#respond' onclick='return addComment.moveForm("div-comment-402", "402", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-even depth-1 parent" id="comment-403">
	<div id="div-comment-403">
	<div class="comment-author vcard">
				<cite class="fn">Robert</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-403" title="">
	April 17, 2010 at 7:13 am</a> </small>

	<p>&#8220;Perl is a model of powerful but unreadable and cryptic code&#8221;</p>
<p>That, sir, is a bunch of malarky. That, sir, is your fault and not the Perl languages fault. Any language, including Python, when programmed in a half-ass way becomes &#8220;unreadable and cryptic&#8221;. Don&#8217;t fault the language. Fault the programmer.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=403#respond' onclick='return addComment.moveForm("div-comment-403", "403", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment even depth-2 parent" id="comment-445">
	<div id="div-comment-445">
	<div class="comment-author vcard">
				<cite class="fn">foljs</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-445" title="">
	April 19, 2010 at 4:37 pm</a> </small>

	<p>Any language, including Python, when programmed in a half-ass way becomes “unreadable and cryptic”.</p>
<p>=== </p>
<p>Yes, any language does. SOME languages though, *cough* Perl *cough*, are particularly prone to that, due to having a bad syntax to begin with.</p>
<p>Do you seriously insist (a) or (b):</p>
<p>(a) All programming languages have equally clear syntax?</p>
<p>(b) All programming languages do not have equally clear syntax, but Perl&#8217;s is as good as Python?</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=445#respond' onclick='return addComment.moveForm("div-comment-445", "445", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-3" id="comment-449">
	<div id="div-comment-449">
	<div class="comment-author vcard">
				<cite class="fn">Nilson</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-449" title="">
	April 20, 2010 at 8:14 am</a> </small>

	<p>You can write modern Perl code which is as clear or clearer than Python. But you can also write ancient-style Perl code which looks like crap.</p>
<p>It&#8217;s like programming in C++ but sticking to the old C ways &#8211; the language allows it, but it&#8217;s definitely not recommended.</p>
<p>The important point is: Perl has evolved in the past few years, you should take a look in case you&#8217;re interested. </p>
<p>To be honest, stating that modern Perl is unreadable makes people look a bit silly to me.</p>
<p>However, I do agree that Python is a better choice in this case. Of course, for a very different reason: Perl is much more dynamic and evolving these days, while Python seems more &#8220;static&#8221; and thus more suitable for what will be a legal requirement.</p>
	
	<div class="reply">
			</div>
	</div>
</li>
</ol>
</li>
<li class="comment even depth-2 parent" id="comment-480">
	<div id="div-comment-480">
	<div class="comment-author vcard">
				<cite class="fn">Mark</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-480" title="">
	April 27, 2010 at 8:48 pm</a> </small>

	<p>Although it&#8217;s true that &#8220;Any language, including Python, when programmed in a half-ass way becomes &#8216;unreadable and cryptic&#8217;&#8221;, Perl is unique as a &#8220;write-only language&#8221;.  When Larry Wall designed it, he seems to have taken every language construct he&#8217;d ever encountered in Unix and tried to throw them all into a single language.  Google the phrase, &#8220;There&#8217;s more than one way to do it&#8221;.  That&#8217;s Perl&#8217;s motto.  And that&#8217;s what&#8217;s wrong with Perl.</p>
<p>In 1980 I learned C by reading the K&amp;R book.  It took me about 3 days, and by the end of the week I had a high level of confidence that if someone handed me C source code, I&#8217;d be able to recognize all but the most obscure syntactic constructs without having to refer back to the manual.  I&#8217;ve written Perl on and off for over 15 years, and yet I&#8217;m still constantly encountering constructs in other people&#8217;s code that I have to look up in the manual.</p>
<p>Every Perl programmer codes in his own unique subset of the language, so it&#8217;s virtually guaranteed that you&#8217;ll encounter syntax you&#8217;re unfamiliar with when reading someone else&#8217;s code.  The Perl &#8220;There&#8217;s more than one way to do it&#8221; mantra is a great philosophy for creative writing.  It&#8217;s a lousy philosophy for designing a programming language.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=480#respond' onclick='return addComment.moveForm("div-comment-480", "480", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-3" id="comment-481">
	<div id="div-comment-481">
	<div class="comment-author vcard">
				<cite class="fn">Nilson</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-481" title="">
	April 28, 2010 at 10:13 am</a> </small>

	<p>Any decent, up-to-date Perl programmer can understand any of the currently used idioms and also the previous ones. Most of these up-to-date Perl programmers currently write code using the same idioms.</p>
<p>Perl is *not* a language which you learn once and you&#8217;re good to go. You need to constantly relearn Perl as it&#8217;s an evolving language.</p>
<p>Good Perl code written today is very different than good Perl code written 5 years ago. And some Perl code which was considered good 15 years ago might even be considered a steaming pile of antiquated junk by today&#8217;s standards.</p>
<p>As I&#8217;ve said, it probably isn&#8217;t suited for SEC purposes, as it&#8217;s a moving target. </p>
<p>However, saying that Perl has a &#8220;lousy philosophy&#8221; clearly shows a lack of desire to understand different philosophies. </p>
<p>If you try to read some piece of recent Perl code once every couple of years you&#8217;re sure to find new idioms every time. That&#8217;s a feature of the language.</p>
<p>I&#8217;d argue that the problem isn&#8217;t with the language but with you not being able to cope with changes.</p>
	
	<div class="reply">
			</div>
	</div>
</li>
</ol>
</li>
</ol>
</li>
<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-404">
	<div id="div-comment-404">
	<div class="comment-author vcard">
				<cite class="fn">Moof</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-404" title="">
	April 17, 2010 at 8:31 am</a> </small>

	<p>R5RS Scheme (let&#8217;s forget R6RS ever happened) or maybe even islisp strike me as rather more suitable languages than Python for such things.</p>
<p>Python is simply not standardised in a manner that makes sense for a legal requirement to refer to &#8211; basically it&#8217;s &#8220;whatever CPython does, try and make other implementations (Jython, Iron Python, PyPy etc.) do something vaguely similar&#8221;.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=404#respond' onclick='return addComment.moveForm("div-comment-404", "404", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2" id="comment-436">
	<div id="div-comment-436">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://brainscroll.wordpress.com/' rel='external nofollow' class='url'>RickRussellTX</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-436" title="">
	April 18, 2010 at 4:53 am</a> </small>

	<p>You could, however, formally limit the structures that are allowed in the submitted &#8220;financial Python&#8221;. That wouldn&#8217;t absolutely prevent someone from writing in obfuscated code, but it might make it far more difficult to bury a loophole in the details.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=436#respond' onclick='return addComment.moveForm("div-comment-436", "436", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="comment even thread-even depth-1" id="comment-405">
	<div id="div-comment-405">
	<div class="comment-author vcard">
				<cite class="fn">Richard Lowe</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-405" title="">
	April 17, 2010 at 8:56 am</a> </small>

	<p>It&#8217;s very astute of you to point out this gem, and I absolutely agree with the usefulness this approach.</p>
<p>I also like the choice of Python as an expressive, easy to learn language.</p>
<p>I will point out, however, that this: &#8220;&#8230;there is little point in having open source code if the interpreter is not also open source&#8230;&#8221; is not really true in two senses.  </p>
<p>In the first sense it&#8217;s not correct in the sense of being unnecessary to the idea, because as long as the correct version of the compiler is specified along with the source code, and the tools are verified as the same as the issuer used, it&#8217;s the consistent output of the program that is important.  In other words, as long as the Python or PERL or C# or Java program produces the same output (and therefore same expectation) for the investor as for the issuer, then the purpose of the idea fulfilled.</p>
<p>In the second sense, both C# and Java have open source compilers available which could be used to implement the idea.  </p>
<p>However, I don&#8217;t think a statically typed language is necessary for this idea to work, I think Python (CPython in this case) is still a very good choice.</p>
<p>Richard</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=405#respond' onclick='return addComment.moveForm("div-comment-405", "405", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406">
	<div id="div-comment-406">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://jeremynicoll.com' rel='external nofollow' class='url'>Jeremy Nicoll</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-406" title="">
	April 17, 2010 at 9:43 am</a> </small>

	<p>-1 for Perl. My preference would be for Ruby, but I don&#8217;t know if it would be acceptable in this case or not. Couldn&#8217;t imagine why not, just don&#8217;t know. And yes: I do know Ruby borrows some stuff from Perl, which is equally unreadable. Too many syntax uses in Perl that are not obvious.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=406#respond' onclick='return addComment.moveForm("div-comment-406", "406", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-even depth-1 parent" id="comment-407">
	<div id="div-comment-407">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://TryRuby.org' rel='external nofollow' class='url'>Andrew</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-407" title="">
	April 17, 2010 at 9:56 am</a> </small>

	<p>Why not Ruby?</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=407#respond' onclick='return addComment.moveForm("div-comment-407", "407", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2" id="comment-444">
	<div id="div-comment-444">
	<div class="comment-author vcard">
				<cite class="fn">LV.XKOE AI.XKCD ME 303</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-444" title="">
	April 19, 2010 at 3:35 pm</a> </small>

	<p>Why not LOLCode?<br />
Why not Whirl?<br />
Why not Brainfuck?<br />
Why not VBA?<br />
- sorry, took it a little too far there.</p>
<p>If they are to specify such a requirement there must be a mandate &#8211; it appears they plumped for a (set of) coding language(s) over a (set of) modelling language(s) and their choice then may have come down to error likelihood and how common the language is amongst practitioners.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=444#respond' onclick='return addComment.moveForm("div-comment-444", "444", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-408">
	<div id="div-comment-408">
	<div class="comment-author vcard">
				<cite class="fn">Mark</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-408" title="">
	April 17, 2010 at 10:11 am</a> </small>

	<p>Why mandate a particular language? If anything, use C. It&#8217;s (fairly) platform-agnostic.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=408#respond' onclick='return addComment.moveForm("div-comment-408", "408", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2" id="comment-426">
	<div id="div-comment-426">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.dieblinkenlights.com/blog_en' rel='external nofollow' class='url'>Ricardo Bánffy</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-426" title="">
	April 17, 2010 at 6:22 pm</a> </small>

	<p>Because C would make the logic harder to grasp. Python is a very readable language. Someone compared it to executable pseudocode.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=426#respond' onclick='return addComment.moveForm("div-comment-426", "426", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="comment even thread-even depth-1 parent" id="comment-409">
	<div id="div-comment-409">
	<div class="comment-author vcard">
				<cite class="fn">Nathan Sobo</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-409" title="">
	April 17, 2010 at 10:41 am</a> </small>

	<p>Plus one for Ruby. It reads extremely naturally and yields itself well to embedded languages, which make code more descriptive. It&#8217;s not as declarative as say, Haskell, but it&#8217;s friendlier to a broader variety of programs while still having a more declarative feel than Python.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=409#respond' onclick='return addComment.moveForm("div-comment-409", "409", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2" id="comment-410">
	<div id="div-comment-410">
	<div class="comment-author vcard">
				<cite class="fn">Nathan Sobo</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-410" title="">
	April 17, 2010 at 10:42 am</a> </small>

	<p>I meant to say: friendlier to a broader variety of *programmers*</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=410#respond' onclick='return addComment.moveForm("div-comment-410", "410", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even depth-2 parent" id="comment-500">
	<div id="div-comment-500">
	<div class="comment-author vcard">
				<cite class="fn">Quux</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-500" title="">
	May 5, 2010 at 7:19 am</a> </small>

	<p>Why is a more declarative feel an advantage?</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=500#respond' onclick='return addComment.moveForm("div-comment-500", "500", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-3" id="comment-501">
	<div id="div-comment-501">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://bobkerns.typepad.com' rel='external nofollow' class='url'>Bob Kerns</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-501" title="">
	May 5, 2010 at 9:16 am</a> </small>

	<p>(After your first post, I was wondering if you might be Guy Steele, noted language guru and author of the Java standard. He used to use the login and nom de plume Quux back in the 1970&#8242;s&#8230; But he wouldn&#8217;t need to ask this question).</p>
<p>Imperative vs Declarative is NOT a matter of &#8220;feel&#8221;. It is a fundamental concept in computer science. You can think of it as being &#8220;program&#8221; vs &#8220;data&#8221;.</p>
<p>Imperative means &#8212; it&#8217;s a program, and you have to run it to find out what it does.</p>
<p>Declarative, on the other hand, means that, rather than being a program you execute, it is information about something. A program can take that information, and tell you the answer to a question, much like with an imperative program &#8212; but another program could take that same information, and do quite a different analysis.</p>
<p>Further, there is a major difference in what can be said. Imperative programs cannot, in general, be fully analyzed &#8212; you can&#8217;t even tell if they will ever complete. That&#8217;s because they are &#8220;Turing equivalent&#8221; &#8212; fully powerful.</p>
<p>Declarative information, on the other hand, is more constrained.   While you can describe a non-halting program declaratively, since you&#8217;re not executing it, it does not present the same kinds of problems.</p>
<p>This is a MUCH deeper difference than just C++ vs Java vs Python. Basically, what I (and a few others here) are saying is that it should not even BE a program.</p>
<p>Given a declarative description of the behavior, and a suitable program, you can still achieve the same results. But you can also do many, many other things. Search for certain characteristics, for example. Apply compliance checking rules to see if there are any conditions under which this contract would fail to meet regulatory requirements &#8212; or which a pool of them might push an institution out of regulatory compliance.</p>
<p>That&#8217;s simply not possible with imperative programs.</p>
	
	<div class="reply">
			</div>
	</div>
</li>
</ol>
</li>
</ol>
</li>
<li class="comment byuser comment-author-cdsmith even thread-odd thread-alt depth-1 parent" id="comment-411">
	<div id="div-comment-411">
	<div class="comment-author vcard">
				<cite class="fn">cdsmith</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-411" title="">
	April 17, 2010 at 10:56 am</a> </small>

	<p>This strikes me as very similar to the work that was actually done here: <a href="http://research.microsoft.com/en-us/um/people/simonpj/papers/financial-contracts/contracts-icfp.htm" rel="nofollow">http://research.microsoft.com/en-us/um/people/simonpj/papers/financial-contracts/contracts-icfp.htm</a></p>
<p>Of course, the language there is Haskell, which made sense because Haskell has some pretty strong advantages as a base for EDSLs, which was the goal of that project.  They wanted to build a language embedded in Haskell that could actually be used by financial brokers to describe their own contracts, so there couldn&#8217;t be breakdowns where the contract actually sold doesn&#8217;t agree with the description.  Not sure how the goals here are similar or different.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=411#respond' onclick='return addComment.moveForm("div-comment-411", "411", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2" id="comment-451">
	<div id="div-comment-451">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://twitter.com/sclopit' rel='external nofollow' class='url'>Stefano Bertolo</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-451" title="">
	April 20, 2010 at 1:02 pm</a> </small>

	<p>I posted this</p>
<p><a href="http://twitter.com/sclopit/status/12501736501" rel="nofollow">http://twitter.com/sclopit/status/12501736501</a></p>
<p>just minutes before reading your comment. What I find promising about the Haskell combinator approach is that it may help reducing contracts to a canonical form. and the canonical form may itself be easier for humans to read.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=451#respond' onclick='return addComment.moveForm("div-comment-451", "451", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="comment even thread-even depth-1 parent" id="comment-412">
	<div id="div-comment-412">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://bobkerns.typepad.com' rel='external nofollow' class='url'>Bob Kerns</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-412" title="">
	April 17, 2010 at 11:11 am</a> </small>

	<p>While I think Python is a satisfactory choice from a purely language standpoint, I share the concern of others around standardization. The lack of a standard could result in a rather gnarly legal mess, should an investor&#8217;s choice of interpreter produce a different result than the one the trustee uses.</p>
<p>If you want a purely interpreted language, Scheme would seem to be a good choice. Widely known, with many free implementations, and an actual de jure standard.</p>
<p>If even wider familiarity with the language is desired, Java would be the obvious choice. Sun has made it available under GPLv2, so the argument that it is not open source is obsolete, if it were ever relevant.</p>
<p>Frankly, though, the attraction in this case of a de jure standard surely outweighs whether interpreters are open source or even how widely familiar the language is. Scheme has used as a language for computer science instruction, so decades of CS graduates will be familiar with it from their coursework, even if they&#8217;ve never used it professionally.</p>
<p>Let me differ with Mark in his suggestion of C &#8212; C is extremely platform GNOSTIC, though it can, with care, be used in a platform-agnostic way. C, and by extension, C++, would be extremely poor choices, because of the potential for memory allocation errors and corruption, which could go undetected except under specific circumstances. (Otherwise, the presence of a de jure standard would be attractive).</p>
<p>Java has a standard, but it is administered by a commercial entity (Oracle) rather than a formal standards body. I don&#8217;t see this as a major shortcoming, though others might.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=412#respond' onclick='return addComment.moveForm("div-comment-412", "412", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2 parent" id="comment-420">
	<div id="div-comment-420">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://paddy3118.blogspot.com' rel='external nofollow' class='url'>Paddy3118</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-420" title="">
	April 17, 2010 at 2:47 pm</a> </small>

	<p>Hi Bob,<br />
just like all the other languages &#8211; standardised or not, You would state the version of Python used and compile options etc &#8211; everything from the &#8216;python -V&#8217; output.</p>
<p>Standards change and implementations are knowingly/unknowingly different to the standard. You would end up doing exactly the same thing if you used Algol or ADA, or .</p>
<p>By choosing Python, they buy into a culture where obfuscation is frowned on, The Zen of Python, and code readabilty are guiding principles of the developers.</p>
<p>I think Python is a good thing for the financial world &#8211; if only the Zen were adopted for their financial transactions.</p>
<p>- Paddy.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=420#respond' onclick='return addComment.moveForm("div-comment-420", "420", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment even depth-3" id="comment-427">
	<div id="div-comment-427">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.dieblinkenlights.com/blog_en' rel='external nofollow' class='url'>Ricardo Bánffy</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-427" title="">
	April 17, 2010 at 6:25 pm</a> </small>

	<p>PEP8 compliance could be mandated</p>
	
	<div class="reply">
			</div>
	</div>
</li>
</ol>
</li>
</ol>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-413">
	<div id="div-comment-413">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.weightlossdietpills.org/' rel='external nofollow' class='url'>Lauren</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-413" title="">
	April 17, 2010 at 11:33 am</a> </small>

	<p>Totally agree guys. Keep it up.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=413#respond' onclick='return addComment.moveForm("div-comment-413", "413", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-even depth-1 parent" id="comment-414">
	<div id="div-comment-414">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://bobkerns.typepad.com' rel='external nofollow' class='url'>Bob Kerns</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-414" title="">
	April 17, 2010 at 12:06 pm</a> </small>

	<p>Actually, I just had another thought.</p>
<p>I&#8217;d like to argue against using a procedural language for this.</p>
<p>I think using a language is a wonderful idea. I&#8217;m not being critical. However, I think a suitably-designed, purely *declarative* model may be substantially superior.</p>
<p>One aspect is that it allows us to control just what kind of stuff can be specified with this language. That is, it more tightly CONSTRAINS the range of possible behaviors. It doesn&#8217;t constrain them in any particular way &#8212; but we have to decide to allow them by introducing declarative vocabulary, rather than just anything you can code up.</p>
<p>A big advantage of this is that it will facilitate formal verification and analysis. In particular, it will allow auditing for regulatory compliance, as well as allowing users of this information to determine in an automated way whether the behavior meets their criteria. It will allow automated tools (such as search engines) to categorize these offerings, or produce automated comparisons not solely based on a specific assumptions, but rather on more abstract and general criteria (such as not having a particular trait at all, rather than whether it happens within a particular date range in a particular set of assumptions).</p>
<p>For example &#8212; does the face value ever drop below what I paid?</p>
<p>This would also allow various non-numeric assertions to be captured, such as the type of underlying investments, fund asset allocation rules, etc.</p>
<p>There would still be a computer program that allows the investor to do the kind of explorations envisioned by the original proposal here. The difference is, that the program would not be specific to the investment company, but rather common to all, and operating to a standard.</p>
<p>The published data would be in XML format to allow a variety of tools to access it.</p>
<p>I think this information would be FAR more valuable, when viewed as knowledge to be represented, rather than just a program you can download and run.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=414#respond' onclick='return addComment.moveForm("div-comment-414", "414", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2" id="comment-503">
	<div id="div-comment-503">
	<div class="comment-author vcard">
				<cite class="fn">Martin</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-503" title="">
	May 5, 2010 at 11:02 pm</a> </small>

	<p>&gt; For example — does the face value ever drop below what I paid?</p>
<p>Clearly this question does not require a declarative model.</p>
<p>It couples the investigator / investor too closely to the issuer.  A procedural programming language relaxes this coupling to a useful extent, and a procedural language like python still allows enough expressibility to answer interesting questions in a reasonable amount of time.</p>
<p>The difference between a sufficiently high level language like python and a sufficiently complete domain-specific language is more and more a matter of hair-splitting.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=503#respond' onclick='return addComment.moveForm("div-comment-503", "503", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="pingback even thread-odd thread-alt depth-1" id="comment-415">
	<div id="div-comment-415">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://committeeofpublicsafety.wordpress.com/2010/04/17/fighting-the-man-with-python/' rel='external nofollow' class='url'>Fighting the Man With Python &laquo; The Committee of Public Safety</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-415" title="">
	April 17, 2010 at 12:32 pm</a> </small>

	<p>[...] this fulfills my fundamental political belief. From the usually plutocratic shills at the Security and [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=415#respond' onclick='return addComment.moveForm("div-comment-415", "415", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-even depth-1 parent" id="comment-416">
	<div id="div-comment-416">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://blog.opini.eu' rel='external nofollow' class='url'>Christos Giogkarakis</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-416" title="">
	April 17, 2010 at 1:12 pm</a> </small>

	<p>As someone who had the responsibility in the past to audit CDO &#8220;waterfalls&#8221;, I can tell you that the tool we used most was Excel. The intermediate calculation layers that occur in Excel give more drill-down capabilities and visibility of the logic for non-IT users of the information. A standardized disclosure in the form of a program would be a blessing for auditors but care has to be taken that some structure in these programs is also standardized.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=416#respond' onclick='return addComment.moveForm("div-comment-416", "416", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment even depth-2" id="comment-428">
	<div id="div-comment-428">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.dieblinkenlights.com/blog_en' rel='external nofollow' class='url'>Ricardo Bánffy</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-428" title="">
	April 17, 2010 at 6:27 pm</a> </small>

	<p><a href="http://www.python.org/dev/peps/pep-0008/" rel="nofollow">http://www.python.org/dev/peps/pep-0008/</a> should help</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=428#respond' onclick='return addComment.moveForm("div-comment-428", "428", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt depth-2" id="comment-432">
	<div id="div-comment-432">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://paddy3118.blogspot.com' rel='external nofollow' class='url'>Paddy3118</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-432" title="">
	April 17, 2010 at 9:39 pm</a> </small>

	<p>In no way should a spreadsheet be used for this task. They are opaque, and very hard to audit!</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=432#respond' onclick='return addComment.moveForm("div-comment-432", "432", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-417">
	<div id="div-comment-417">
	<div class="comment-author vcard">
				<cite class="fn">tzs</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-417" title="">
	April 17, 2010 at 1:36 pm</a> </small>

	<p>If the intent is that investors will be running the program and need to interact with it to enter parameters, then perhaps JavaScript would be a good choice. An HTML file with embedded JavaScript can be run locally in most browsers. Languages like Python will require the investor to have their runtime installed. Also, an HTML form is a pretty natural way to do the input.</p>
<p>Of all the languages people have suggested, JavaScript is the only one that is ready out of the box on nearly every desktop computer, and even many mobile devices. Python, Perl, Ruby, and so on are add-ons for many.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=417#respond' onclick='return addComment.moveForm("div-comment-417", "417", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2" id="comment-452">
	<div id="div-comment-452">
	<div class="comment-author vcard">
				<cite class="fn">Louis Cordier</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-452" title="">
	April 20, 2010 at 3:02 pm</a> </small>

	<p><a href="http://www.hunlock.com/blogs/The_Complete_Javascript_Number_Reference" rel="nofollow">http://www.hunlock.com/blogs/The_Complete_Javascript_Number_Reference</a></p>
<p>I don&#8217;t think JavaScript is good for finance.<br />
Numeric data types, and it&#8217;s various issues with NaN&#8217;s.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=452#respond' onclick='return addComment.moveForm("div-comment-452", "452", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="comment even thread-even depth-1 parent" id="comment-421">
	<div id="div-comment-421">
	<div class="comment-author vcard">
				<cite class="fn">Robert Wittams</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-421" title="">
	April 17, 2010 at 2:53 pm</a> </small>

	<p>This should definitely be in a declarative ( but executable) form of some kind.</p>
<p>I vote that the SEC acquires and open sources Lexifi.<br />
<a href="http://www.lexifi.com/" rel="nofollow">http://www.lexifi.com/</a> . It is the evolution of SPJs contract work<br />
nearly a decade on in OCaml.</p>
<p>A great piece of work, but due to the structure of banks IT departments and quant teams, politically impossible to sell.</p>
<p>Although, the python thing might lead to a lot of interest in PyPy.. I certainly wouldn&#8217;t like to have the horrors of CPython in the middle of my inner loops.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=421#respond' onclick='return addComment.moveForm("div-comment-421", "421", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2 parent" id="comment-456">
	<div id="div-comment-456">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.lexifi.com' rel='external nofollow' class='url'>Alain Frisch</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-456" title="">
	April 20, 2010 at 10:55 pm</a> </small>

	<p>Thanks for mentioning us!</p>
<p>Indeed, our approach seems to be really in line with the SEC proposal: we propose to describe complex (or simple) derivatives in a domain specific language, made of a few building blocks and combinators. That way, we have formal description of terms and conditions of contracts, which could, if needed, be understood by humans. More importantly, the description of contracts are just data, which can be exchanged between institutions (e.g. in XML format) and analyzed in a precise way by various and independent tools.</p>
<p>Based on our DSL, we have implemented various &#8220;universal&#8221; treatments (that can be applied to any contract represented in the DSL): pricing, life-cycle management, all kinds of reporting and risk analysis tools. Of course, we expose that to the end users in regular GUI applications, but the same descriptions of contracts can also be used as executable &#8220;electronic term sheets&#8221;.</p>
<p>And this is not impossible to sell to IT departments and quant teams! Just a little bit difficult <img src='http://s2.wp.com/wp-includes/images/smilies/icon_smile.gif?m=1235111561g' alt=':-)' class='wp-smiley' /> </p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=456#respond' onclick='return addComment.moveForm("div-comment-456", "456", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment even depth-3" id="comment-506">
	<div id="div-comment-506">
	<div class="comment-author vcard">
				<cite class="fn">Martin</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-506" title="">
	May 7, 2010 at 1:17 am</a> </small>

	<p>I&#8217;d be concerned that a) now there are two things to learn &#8211; OCaml and the DSL; b) the DSL couples the investigator / investor too closely to the issuer.</p>
<p>A more general-purpose programming language relaxes this coupling to a useful extent, and a language like python still allows enough expressibility to answer interesting questions in a reasonable amount of time.</p>
<p>The difference between a sufficiently high level language like python and a sufficiently complete domain-specific language is more and more a matter of hair-splitting.</p>
	
	<div class="reply">
			</div>
	</div>
</li>
<li class="comment odd alt depth-3" id="comment-507">
	<div id="div-comment-507">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.lexifi.com' rel='external nofollow' class='url'>Alain Frisch</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-507" title="">
	May 7, 2010 at 1:36 am</a> </small>

	<p>Martin: you don&#8217;t need to learn OCaml. The contracts expressed in the DSL are just pieces of data, which you can manipulate in the language of your choice.</p>
<p>The problem with expressing contracts as programs in a general-purpose language (be it Python, OCaml, or anything) is that the only operation you can mechanically apply to a program is to run it. Inspecting the program for other purposes requires heavy artillery. The purpose of the DSL is to make these operations easier.</p>
<p>As a concrete example, if we have a contract described in our DSL, it is straightforward to answer questions like &#8220;What are the possible currencies for future cash flows?&#8221;. If the contract were described in a general purpose language, we would need at least to use a parser for this language, an then perform non-trivial data-flow and control-flow analysis to get some rough approximations of the call the the &#8220;cash flow&#8221; function.</p>
<p>And this assumes we have a well-specified interface for things like the &#8220;cash flow&#8221; function. If each program uses its own convention to report cash flows, or produces this info in the form of, say, an XML document, then any hope of doing any non-trivial analysis is lost.</p>
	
	<div class="reply">
			</div>
	</div>
</li>
<li class="comment even depth-3" id="comment-508">
	<div id="div-comment-508">
	<div class="comment-author vcard">
				<cite class="fn">Martin</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-508" title="">
	May 7, 2010 at 2:12 am</a> </small>

	<p>You highlight a number of problems in the space, but I&#8217;m not sure how you&#8217;ve clashed with the assertion that the difference between python and a DSL is a matter of degree; for example, you state:</p>
<p>&gt; the only operation you can mechanically apply to a program is to run it</p>
<p>and:</p>
<p>&gt; we would need at least to use a parser for this language</p>
<p>and then contrast this scary <img src='http://s2.wp.com/wp-includes/images/smilies/icon_smile.gif?m=1235111561g' alt=':)' class='wp-smiley' />  state of affairs with a contract expressed in a DSL, where presumably without &#8220;parsing&#8221; it, it is:</p>
<p>&gt; &#8230;straightforward to answer questions like “What are the possible currencies for future cash flows?”.</p>
<p>How, precisely, does one achieve this answer without parsing the contract definition?</p>
<p>I&#8217;m sure we both can think of clear python that makes it just as &#8220;straightforward&#8221; given a few reasonable assumptions, and can also think of a confused DSL that makes it quite obfuscated without getting too pathalogical.</p>
<p>Thus I see a good case for saying that a good DSL is sufficient to aid processing, but no case for saying it&#8217;s necessary.  And when we consider why it&#8217;s not necessary, I find it hard to miss concluding that &#8220;the difference between any sufficiently high level language and sufficiently broad DSL is a matter of degree&#8221;.</p>
<p>&gt; Martin: you don’t need to learn OCaml.</p>
<p>I would love to understand how far LexFi&#8217;s come since your paper ( <a href="http://www.lexifi.com/downloads/MLFiPaper.pdf" rel="nofollow">http://www.lexifi.com/downloads/MLFiPaper.pdf</a> ), but I have yet to see an existence proof for a useful financial contracts DSL that obviates the need for understanding the underlying programming language (or descends into hairbrained complexity, negating any benefit of the DSL).  For example, while I admire the expressiveness of the simple, quite minimal set of combinators discussed in that paper, try explaining &#8220;give (c1 &#8216;or&#8217; c2) != (give c1) &#8216;or&#8217; (give c2)&#8221; with descending to the underlying &#8220;max&#8221; definition.  Trying to get away without, say &#8220;min&#8221; (sure it&#8217;s roughly -max(-a, &#8230;)), is going to really make one annoyed after a while.  And once you&#8217;ve got min, or defined &#8220;max&#8221; as &#8220;or&#8221; to appease some boolean-logic afficionado, exactly when do you decide you&#8217;ve got a half-decent general purpose programming language on your hands?  Again, I don&#8217;t see how you&#8217;re going to be able to claim many of the advantage of the _non-general-purpose_ quality trumpeted by the term &#8220;DSL&#8221;.</p>
<p>&gt; The contracts expressed in the DSL are just pieces of data, which you can manipulate in the language of your choice.</p>
<p>The how what advantages does your DSL offer above, say, XBRL?  Is just the same idea, but perhaps with a better ontology and tools?</p>
	
	<div class="reply">
			</div>
	</div>
</li>
<li class="comment odd alt depth-3" id="comment-509">
	<div id="div-comment-509">
	<div class="comment-author vcard">
				<cite class="fn">Martin</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-509" title="">
	May 7, 2010 at 2:14 am</a> </small>

	<p>&#8230;sorry, the bit &#8220;with descending to&#8221; should of course read &#8220;without descending to&#8221;</p>
	
	<div class="reply">
			</div>
	</div>
</li>
<li class="comment even depth-3" id="comment-510">
	<div id="div-comment-510">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.lexifi.com' rel='external nofollow' class='url'>Alain Frisch</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-510" title="">
	May 7, 2010 at 2:44 am</a> </small>

	<p>&gt; the assertion that the difference between python and a DSL is a matter of degree</p>
<p>Of course it is. A badly designed DSL can become as difficult to analyze as a general purpose language, and a sufficiently controlled restriction of a general-purpose language (with a limited set of allowed constructions, no call to external libraries, and well-specified APIs for the domain of interest) is in effect a DSL.</p>
<p>&gt; try explaining “give (c1 ‘or’ c2) != (give c1) ‘or’ (give c2)”</p>
<p>That&#8217;s quite simple. These two contracts are different because &#8220;giving the option to choose between receiving c1 or receiving c2&#8243; (i.e. the short party decides) is different from &#8220;receiving the option to choose between giving c1 and giving c2&#8243; (i.e. the long party decides).</p>
	
	<div class="reply">
			</div>
	</div>
</li>
<li class="comment odd alt depth-3" id="comment-511">
	<div id="div-comment-511">
	<div class="comment-author vcard">
				<cite class="fn">Martin</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-511" title="">
	May 7, 2010 at 3:24 am</a> </small>

	<p>&gt;&gt; try explaining “give (c1 ‘or’ c2) != (give c1) ‘or’ (give c2)”</p>
<p>&gt; That’s quite simple. These two contracts are different because “giving the option to choose between receiving c1 or receiving c2″ (i.e. the short party decides) is different from “receiving the option to choose between giving c1 and giving c2″ (i.e. the long party decides).</p>
<p>Thanks for putting it succinctly.  I find it interesting that a) your exposition is not as simple as &#8220;think about why -max(a, b) != max(-a, -b)&#8221; (though your explanation requires less handwaving); and b) if you try to replace &#8220;option to choose&#8221; with &#8220;choose&#8221; in your exposition &#8211; it&#8217;s simpler and seems more intuitive given the paper&#8217;s example where &#8220;c1 &#8216;or&#8217; c2&#8243; is explained as &#8220;you must immediately acquire c1 or c2 but not both&#8221; &#8211; I find the exposition even more succinct but now, IMO, a bit less clear:</p>
<p>&#8220;giving the choice between receiving c1 or receiving c2″<br />
is different from &#8220;receiving the choice between giving c1 and giving c2″</p>
<p>&#8230;perhaps making a bit my point elsewhere about the Illusion of Comprehensibility (it&#8217;s what you know that ain&#8217;t so, and all that).</p>
<p>But if I go further in succinctness, clarity comes back, I think:</p>
<p>&#8220;having the choice of receiving c1 or receiving c2″<br />
is different from &#8220;having the choice between giving c1 and giving c2″</p>
<p>Finally, even more succinct is your parenthetical: the long party chooses vs. the short party chooses.</p>
<p>But now I think I&#8217;m really making my point that in many cases, to avoid applying natural language ambiguity resolution to a precisely-specified DSL that is designed at, least partially, to look like a natural language, one has to effectively compile the DSL to a general purpose programming language.  Or, I suppose, reduce it to another, more familiar DSL like -max(a, b) != max(-a, -b) (lest you point out that this is not the precise justification for the inequality: sure, but then we&#8217;re back to that you have to understand the nuances of the DSL to avoid the pitfalls of trying to understand it like natural language).</p>
<p>&gt; If each program uses its own convention to report cash flows, or produces this info in the form of, say, an XML document, then any hope of doing any non-trivial analysis is lost.</p>
<p>I didn&#8217;t pick up on this earlier, but: a) I agree that saying &#8220;the cash-flows shall be described in XML&#8221; is far from sufficient to make any meaningful improvement, what&#8217;s roughly the minimum you think that would be needed?  Do we need a non-trivial DSL to describe the cash flows?</p>
	
	<div class="reply">
			</div>
	</div>
</li>
</ol>
</li>
</ol>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-422">
	<div id="div-comment-422">
	<div class="comment-author vcard">
				<cite class="fn">Rahul</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-422" title="">
	April 17, 2010 at 4:58 pm</a> </small>

	<p>I agree that this is a change in the right direction. However I suppose something like Prolog along with constraints would have been much more closer to requirements of the financial transactions and safer to use than python. Also even if it is opensource, I hope that the libraries that are used have the behaviors specified in a watertight way or it introduces subtle means to manipulate the meaning of the code.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=422#respond' onclick='return addComment.moveForm("div-comment-422", "422", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-even depth-1 parent" id="comment-423">
	<div id="div-comment-423">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://bit.ly/1Kl0t5' rel='external nofollow' class='url'>Derik Pereira</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-423" title="">
	April 17, 2010 at 5:06 pm</a> </small>

	<p>In as much that I am a Python advocate (when appropriate for the application requirements) why on earth does the SEC meddle with such things and push Python?</p>
<p>The SEC mandate does not include technology architecture. By getting into the technology domain they are dabbling with tightly coupling a technology with a business application requirement, so to speak.</p>
<p>It gets even more messy when they advocate XML (which, in my opinion, has reached it usefulness). There are indeed other technologies that may be better suited for such things such as JSON and YAML.</p>
<p>The SEC should stick with their mandate of regulation. Nothing else.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=423#respond' onclick='return addComment.moveForm("div-comment-423", "423", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment even depth-2" id="comment-429">
	<div id="div-comment-429">
	<div class="comment-author vcard">
				<cite class="fn">Colin W.</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-429" title="">
	April 17, 2010 at 7:34 pm</a> </small>

	<p>I agree, but feel that the complexity of these Asset Based Securities have done immense damage.</p>
<p>They should be banned.</p>
<p>Colin W.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=429#respond' onclick='return addComment.moveForm("div-comment-429", "429", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-430">
	<div id="div-comment-430">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://humanleg.org.uk' rel='external nofollow' class='url'>ris</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-430" title="">
	April 17, 2010 at 8:04 pm</a> </small>

	<p>This is very much the right sort of thing to do.</p>
<p>However, I&#8217;m slightly surprised as I would have thought they would have chosen a language that has better sandboxing support (javascript?), because people will surely want to be able to do automated fetching &amp; execution.</p>
<p>Don&#8217;t get me wrong &#8211; I love python.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=430#respond' onclick='return addComment.moveForm("div-comment-430", "430", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-even depth-1" id="comment-434">
	<div id="div-comment-434">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://doriantaylor.com/' rel='external nofollow' class='url'>Dorian Taylor</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-434" title="">
	April 18, 2010 at 12:39 am</a> </small>

	<p>I agree with Bob; wondering why one would pick an imperative language for this kind of task when the problem space begs to be represented by a language which is declarative and/or functional.</p>
<p>That said, it&#8217;s better than nothing; now if only the same was being considered for the US Code.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=434#respond' onclick='return addComment.moveForm("div-comment-434", "434", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-438">
	<div id="div-comment-438">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://realtangible.com/2010/04/18/rules-where-were-going/' rel='external nofollow' class='url'>real tangible &raquo; Blog Archive &raquo; Rules? Where we&#8217;re going&#8230;</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-438" title="">
	April 18, 2010 at 4:22 pm</a> </small>

	<p>[...] The SEC and the Python « Prof. Jayanth R. Varma’s Financial Markets Blog [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=438#respond' onclick='return addComment.moveForm("div-comment-438", "438", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback even thread-even depth-1" id="comment-441">
	<div id="div-comment-441">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://botd.wordpress.com/2010/04/18/top-posts-1449/' rel='external nofollow' class='url'>Top Posts &#8212; WordPress.com</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-441" title="">
	April 19, 2010 at 5:34 am</a> </small>

	<p>[...]  The SEC and the Python Last week, the SEC put out a 667 page proposal regarding disclosures for asset backed securities. What I found exciting [...] [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=441#respond' onclick='return addComment.moveForm("div-comment-441", "441", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-443">
	<div id="div-comment-443">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://tamped.info' rel='external nofollow' class='url'>meki</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-443" title="">
	April 19, 2010 at 2:02 pm</a> </small>

	<p>i think this article so help full for me&#8230;i will back soon to read more..ono your blog..</p>
<p>http:_//tamped.info -&gt; fastest news, showbiz news, healt news and headline<br />
http:_//corhot.info -&gt; fastest web proxy unblock your access<br />
http:_//dragulaz.info -&gt; fastest web proxy unblock your access</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=443#respond' onclick='return addComment.moveForm("div-comment-443", "443", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment byuser comment-author-lpsmith even thread-even depth-1" id="comment-446">
	<div id="div-comment-446">
	<div class="comment-author vcard">
				<cite class="fn">lpsmith</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-446" title="">
	April 19, 2010 at 5:49 pm</a> </small>

	<p>I think moof makes a fairly good point with respect to python;  potential variance in various CPython versions and possible alternative implementations of Python  is a potential cause for concern here.  </p>
<p>However,  although I love Scheme,  I think the same concern applies in slightly different ways.   Scheme&#8217;s cross-implementation portability is not good,  and even within the standard it is easy to write programs that evaluate to two different values on different implementations.</p>
<p>On the other hand,  it should not too difficult to avoid these variances by mandating a particular subset of Scheme without side effects and without &#8220;eq?&#8221;.</p>
<p>Honestly,  I think the winner here would be Standard ML:  it has a battle-tested formal definition,  and no other language comes close to SML&#8217;s consistency across a multitude of implementations.   </p>
<p>The only technical downside would be SML&#8217;s fairly impoverished default numerics;  R5RS&#8217;s numerical tower (especially exact integers and rationals) would be a win.</p>
<p>But in any case,  I think that Python, Scheme, or SML would all be good choices.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=446#respond' onclick='return addComment.moveForm("div-comment-446", "446", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-447">
	<div id="div-comment-447">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://jetlib.com/news/2010/04/19/sec-proposes-wall-street-transparency-via-python/' rel='external nofollow' class='url'>SEC Proposes Wall Street Transparency Via Python | JetLib News</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-447" title="">
	April 20, 2010 at 4:11 am</a> </small>

	<p>[...] SEC Proposes Wall Street Transparency Via Python  April 19th, 2010 04:25 admin Leave a comment Go to comments    Hello there! If you are new here, you might want to subscribe to the RSS feed for updates on this topic.Powered by WP Greet Box WordPress PluginAn anonymous reader writes &#8220;A US federal agency is considering the use of computing languages to specify legal requirements. &#8216;We are proposing that the computer program be filed on EDGAR in the form of downloadable source code in Python. &#8230; Under the proposed requirement, the filed source code, when downloaded and run by an investor, must provide the user with the ability to programmatically input the user&#8217;s own assumptions regarding the future performance and cash flows from the pool assets, including but not limited to assumptions about future interest rates, default rates, prepayment speeds, loss-given-default rates, and any other necessary assumptions.&#8217; Does this move make sense? If the proposed rule is enacted, it certainly will bring attention to Python or other permitted languages. Will that be a good thing?&#8221; The above quotes were pulled from pages 205 and 210 of the dense, 667-page proposal document (PDF). Market expert and professor of finance Jayanth R. Varma says it&#8217;s a good idea. [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=447#respond' onclick='return addComment.moveForm("div-comment-447", "447", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback even thread-even depth-1" id="comment-450">
	<div id="div-comment-450">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://neobject.wordpress.com/2010/04/20/links-for-2010-04-19/' rel='external nofollow' class='url'>links for 2010-04-19 &laquo; Object neo = neo Object</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-450" title="">
	April 20, 2010 at 10:00 am</a> </small>

	<p>[...] The SEC and the Python « Prof. Jayanth R. Varma’s Financial Markets Blog (tags: python stories government mortgage) [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=450#respond' onclick='return addComment.moveForm("div-comment-450", "450", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-454">
	<div id="div-comment-454">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.untyped.com/untyping/2010/04/20/formalising-bonds-with-the-informal/' rel='external nofollow' class='url'>Formalising Bonds with the Informal &#8211; Untyping</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-454" title="">
	April 20, 2010 at 10:06 pm</a> </small>

	<p>[...] has covered the story from a high level, but what of particular interest to me is the proposal to specify the meaning of the bonds in Python. This is a step is the right direction but Python is not the [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=454#respond' onclick='return addComment.moveForm("div-comment-454", "454", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-even depth-1" id="comment-457">
	<div id="div-comment-457">
	<div class="comment-author vcard">
				<cite class="fn">Orange</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-457" title="">
	April 21, 2010 at 12:12 am</a> </small>

	<p>Will it have RSS?</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=457#respond' onclick='return addComment.moveForm("div-comment-457", "457", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-460">
	<div id="div-comment-460">
	<div class="comment-author vcard">
				<cite class="fn">ExRatingAgency</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-460" title="">
	April 21, 2010 at 2:41 am</a> </small>

	<p>Ratings agencies and most banks have sophisticated (usu. web based) tools to run both credit and cashflow models on securitizations. These are usually scripting based, and with the right permissions users can see/vary all historical data, assumptions, inputs and cashflow scripts.</p>
<p>These would provide the user with a full suite of sophisticated tools &#8220;to programmatically input the user’s own assumptions regarding the future performance and cash flows from the pool assets, including but not limited to assumptions about future interest rates, default rates, prepayment speeds, loss-given-default rates, and any other necessary assumptions … (page 210)&#8221; as mentioned above.</p>
<p>I think the SEC should mandate that these should be freely available to all investors, rather than forcing everybody down a limited functionality Python / XML route that may not be the best solution.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=460#respond' onclick='return addComment.moveForm("div-comment-460", "460", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback even thread-even depth-1" id="comment-461">
	<div id="div-comment-461">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://financworld.com/?p=11' rel='external nofollow' class='url'>271208 CHANNEL R FINANCE NEWS | financworld.com</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-461" title="">
	April 21, 2010 at 10:12 am</a> </small>

	<p>[...] The SEC and the Python « Prof. Jayanth R. Varma&#39;s Financial &#8230; [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=461#respond' onclick='return addComment.moveForm("div-comment-461", "461", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-463">
	<div id="div-comment-463">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.javajobs.net' rel='external nofollow' class='url'>james smith</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-463" title="">
	April 21, 2010 at 1:17 pm</a> </small>

	<p>very informative..thanks a lot..james<br />
javajobs.net</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=463#respond' onclick='return addComment.moveForm("div-comment-463", "463", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback even thread-even depth-1" id="comment-464">
	<div id="div-comment-464">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://crankycoder.com/2010/04/21/links-for-april-21st/' rel='external nofollow' class='url'>crankycoder.com &raquo; Links for April 21st</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-464" title="">
	April 21, 2010 at 5:34 pm</a> </small>

	<p>[...] The SEC and the Python &laquo; Prof. Jayanth R. Varma&rsquo;s Financial Markets Blog &#8211; Fantastic. I&#39;m apparently inventing the future.  Share/Save [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=464#respond' onclick='return addComment.moveForm("div-comment-464", "464", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment byuser comment-author-jrvarma bypostauthor odd alt thread-odd thread-alt depth-1 parent" id="comment-465">
	<div id="div-comment-465">
	<div class="comment-author vcard">
				<cite class="fn">Jayanth Varma</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-465" title="">
	April 21, 2010 at 6:26 pm</a> </small>

	<p>I am overwhelmed by the number and quality of comments on this post. Clearly, many of the readers commenting here know more about Python and other programming languages than I do or ever will. </p>
<p>I will respond to only one broad issue raised in several comments: should the SEC mandate a specific computer language? I think it should just as it mandates a specific natural language (English). Imagine how difficult life would be if some SEC filings were in English, some in Esparanto and some in Korean. Mandating a specific computer language has the same benefits.</p>
<p>In fact, the SEC mandates not only that filings be in English; it has for more than a decade now mandated that large parts of the disclosures be in &#8220;Plain English&#8221;. They even have a handbook on the subject: <a href="http://www.sec.gov/pdf/handbook.pdf" rel="nofollow">http://www.sec.gov/pdf/handbook.pdf</a> </p>
<p>I think of a specific programming language and even a specific coding style within that language as consistent with the overall philosophy of disclosures that the SEC has adopted.</p>
<p>Over a period of time, we might even need to move towards a highly configurable and extensible &#8220;universal&#8221; waterfall program that each issuer would only configure and extend to model its specific waterfall so that investors can understand it very quickly. </p>
<p>The analogy that comes to my mind is that of a program for sorting (for example, quicksort). Most of these programs are universal sorters in the sense that they accept a &#8220;comparison function&#8221; as one of the inputs and then the same sorting program can sort many different kinds of objects without knowing anything about them. </p>
<p>Come to think of it, a waterfall program is a bit like a sorting program &#8211; you sort all the investors on some basis and then pay off the first guy/guys in the list! If there is any cash left, you continue doing this recursively until the cash is all gone.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=465#respond' onclick='return addComment.moveForm("div-comment-465", "465", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment even depth-2 parent" id="comment-469">
	<div id="div-comment-469">
	<div class="comment-author vcard">
				<cite class="fn">Richard Cottrill</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-469" title="">
	April 22, 2010 at 10:53 am</a> </small>

	<p>I think a rigorously defined (in the Comp Sci. definition of &#8220;rigorous&#8221;) Domain Specific Language would be a better choice than any off-the-shelf, general-purpose programming language.</p>
<p>A representative Python implementation of the DSL interpreter could be a handy tool, but it could not be &#8220;the definition&#8221;.</p>
<p>The DSL could use some/all of the terms of &#8220;Plain English&#8221;, but in a rigorously defined, machine readable form.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=469#respond' onclick='return addComment.moveForm("div-comment-469", "469", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-3" id="comment-485">
	<div id="div-comment-485">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://SteveSmithBlog.com/' rel='external nofollow' class='url'>Steve Smith</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-485" title="">
	April 29, 2010 at 3:16 am</a> </small>

	<p>I think a DSL could certainly work.  A DSL also has the advantage of being something that could be implemented in a variety of lower level programs and on any number of platforms.  What I don&#8217;t like is the idea of a government agency dictating a particular technology of software tool to accomplish a job.  It would be like saying that from now on only Philips screws can be used for government construction jobs.  There are lots of different kinds of screws, and (I imagine &#8211; I&#8217;m not a carpenter) lots of reasons to use different screws.  All the government should care about is that when used, the screws should hold things together and that generally carpenters should know which screws to use when.  So too with software developers.</p>
<p>I blogged more about my thoughts on this here:<br />
<a href="http://stevesmithblog.com/blog/government-mandates-and-programming-languages/" rel="nofollow">http://stevesmithblog.com/blog/government-mandates-and-programming-languages/</a></p>
	
	<div class="reply">
			</div>
	</div>
</li>
</ol>
</li>
</ol>
</li>
<li class="pingback even thread-even depth-1" id="comment-466">
	<div id="div-comment-466">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.falsepositives.com/index.php/2010/04/21/another-episode-of-its-charlies-strosss-fiction-we-are-just-living-in-it-will-wall-street-require-python/' rel='external nofollow' class='url'>Another episode of &#8220;It&#8217;s Charlie&#8217;s Stross&#8217;s fiction, we are just living in it&#8221; : Will Wall Street require Python? | False Positives</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-466" title="">
	April 21, 2010 at 7:50 pm</a> </small>

	<p>[...] relevant quote (via a sub link on Prof. Jayanth R. Varma’s Financial Markets Blog The SEC and the Python ) from the SEC proposal : &#8220;We are proposing to require that most ABS (asset backed [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=466#respond' onclick='return addComment.moveForm("div-comment-466", "466", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-467">
	<div id="div-comment-467">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://paulwilkinson.com' rel='external nofollow' class='url'>Paul Wilkinson</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-467" title="">
	April 22, 2010 at 1:53 am</a> </small>

	<p>Great discussion. Bob Kerns&#8217; idea for a &#8220;suitably-designed, purely *declarative* model&#8221; is particularly interesting. There&#8217;s been discussion in the XBRL community about whether XBRL is necessary to achieve the validation sought, or whether plain XML is better. This group might be interested in the SEC&#8217;s three use cases for XBRL to date, described here:<br />
<a href="http://www.sec.gov/spotlight/xbrl.shtml" rel="nofollow">http://www.sec.gov/spotlight/xbrl.shtml</a>. ABS, with only about 130 concepts (compared to U.S. GAAP&#8217;s more than 10,000) would require an XBRL taxonomy the fraction of the size of GAAP. (Not counting the &#8220;waterfall&#8221; part of the disclosure &#8212; don&#8217;t know how many elements might be required for that.) But since XBRL is already a global standard for business reporting and the SEC has used it for comparable sized projects, like mutual funds, and smaller projects, like credit rating agencies, the question arises whether the benefits of consistency outweigh the benefits of innovation. Also, there&#8217;s been concerned raised about whether investors would be on a level playing field with respect to accessing and processing the information. Charlie Hoffman&#8217;s blog has lots more on XBRL if you&#8217;re interested: <a href="http://xbrl.squarespace.com/" rel="nofollow">http://xbrl.squarespace.com/</a></p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=467#respond' onclick='return addComment.moveForm("div-comment-467", "467", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback even thread-even depth-1" id="comment-470">
	<div id="div-comment-470">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://dhananjaynene.com/2010/04/23/links-for-2010-04-22/' rel='external nofollow' class='url'>&raquo; links for 2010-04-22 (Dhananjay Nene)</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-470" title="">
	April 23, 2010 at 1:32 am</a> </small>

	<p>[...] The SEC and the Python « Prof. Jayanth R. Varma’s Financial Markets Blog @kshashi Its more than just data. One of my prof&#39;s wrote a blog post on it <a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/" rel="nofollow">http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/</a> (tags: via:packrati.us) [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=470#respond' onclick='return addComment.moveForm("div-comment-470", "470", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-471">
	<div id="div-comment-471">
	<div class="comment-author vcard">
				<cite class="fn">drewhk</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-471" title="">
	April 23, 2010 at 2:25 am</a> </small>

	<p>But Java interpreter IS open source!! Called OpenJDK if you have not noticed.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=471#respond' onclick='return addComment.moveForm("div-comment-471", "471", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback even thread-even depth-1" id="comment-472">
	<div id="div-comment-472">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://dhananjaynene.com/2010/04/22/tweets-for-2010-04-22/' rel='external nofollow' class='url'>&raquo; Tweets for 2010-04-22 (Dhananjay Nene)</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-472" title="">
	April 23, 2010 at 5:01 am</a> </small>

	<p>[...] Its more than just data. One of my prof&#39;s wrote a blog post on it <a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/" rel="nofollow">http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/</a> in reply to kshashi [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=472#respond' onclick='return addComment.moveForm("div-comment-472", "472", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-474">
	<div id="div-comment-474">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.eiffel.com' rel='external nofollow' class='url'>Manu</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-474" title="">
	April 23, 2010 at 11:53 pm</a> </small>

	<p>For such things, they should use a high programming language like Eiffel which is also open source and that will bring them Design By Contract features for a better accountability.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=474#respond' onclick='return addComment.moveForm("div-comment-474", "474", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-even depth-1" id="comment-479">
	<div id="div-comment-479">
	<div class="comment-author vcard">
				<cite class="fn">Martin</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-479" title="">
	April 27, 2010 at 4:13 pm</a> </small>

	<p>Most of the comments raise points that are too specific to be helpful or too general to be actionable.</p>
<p>What&#8217;s needed from the SEC is:</p>
<p>1) a set of simple principles (e.g., &#8220;The programs must meaningfully increase ABS contracts&#8217; accessibility, transparency, verifiability, and processability&#8221;)</p>
<p>2) a set of tests thereof (e.g., &#8220;The program must be executable by any person with reasonable computing resources e.g., at home on their PC using the standard CPython distribution or at a library via the SEC-hosted testing website&#8221;)</p>
<p>2) a standing committee of buy- and sell-side Computer Scientists, Quants, and investors to recommend to the SEC improvements to and compliance with these rules.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=479#respond' onclick='return addComment.moveForm("div-comment-479", "479", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-483">
	<div id="div-comment-483">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://conmergence.com/blog' rel='external nofollow' class='url'>Ed Dodds</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-483" title="">
	April 28, 2010 at 8:11 pm</a> </small>

	<p>Why Python? Isn&#8217;t it OBVIOUS? G O O G L E</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=483#respond' onclick='return addComment.moveForm("div-comment-483", "483", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback even thread-even depth-1" id="comment-484">
	<div id="div-comment-484">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://stevesmithblog.com/blog/government-mandates-and-programming-languages/' rel='external nofollow' class='url'>Government Mandates and Programming Languages : Steve Smith's Blog</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-484" title="">
	April 29, 2010 at 3:09 am</a> </small>

	<p>[...] You can read more about this issue, including the favorable position on it, on Jayanth Varma’s blog. [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=484#respond' onclick='return addComment.moveForm("div-comment-484", "484", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-486">
	<div id="div-comment-486">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.srobbinsconsulting.com' rel='external nofollow' class='url'>Stuart Robbins</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-486" title="">
	April 29, 2010 at 5:07 am</a> </small>

	<p>I am embarrassed by the discussion thread but must post a reply, howsoever brief.  90% of the  commentary exemplifies our industry (computer professionals) at our most narrow-minded, namely, our cliche&#8217;d bias that any problem can be solved by software, and furthermore, by a particular language.</p>
<p>The &#8220;business process&#8221; is broken.  Even the most elegant Python code cannot compensate for an absence of critical thinking, and an excess amount of bad human behavior.  But I can easily imagine how this happened: an SEC analyst asks the IT department if they can fix the problem, and the IT department says yes without gathering full requirements, and when the code is delivered for testing, the analyst says, Does It Work? Of course, the reply is, Of Course, but They must submit the data in the language that we wrote our module, nothing else will do.  It is as humorous (sad) as if our Dept. of Education said that we were going to fix all of the education problems in the Afghanistan mountains, then mandate that teachers must use English in the schools we build or the buildings will not work.</p>
<p>There is either a published and documented API for a true Web Service, or there is not.  Done properly, any client should be able to interact with the API across the Web.</p>
<p>The issue of large data sets is not lingual, but a performance issue at several layers of the stack.  I cannot imagine financial reporting is more complicated than sequencing human DNA, and even with that amount of data, I don&#8217;t recall anyone proposing that all institutions working on the Human Genome must use C++, or even better, let&#8217;s require Cobol, I think I know someone who still knows how.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=486#respond' onclick='return addComment.moveForm("div-comment-486", "486", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-even depth-1" id="comment-487">
	<div id="div-comment-487">
	<div class="comment-author vcard">
				<cite class="fn">Sammy</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-487" title="">
	April 29, 2010 at 4:55 pm</a> </small>

	<p>What about freedom of speech? I want to write my software in the language of my choice.  Python?  You have to be kidding.  The government shouldn&#8217;t be able to dictate this.  I want to use the language and skillset that is correct for my business, not have the government dictate it.  What&#8217;s next, we all have to run Linux?  Another step toward socialism (Open Source &#8211; FREE) from a government that knows nothing about technology.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=487#respond' onclick='return addComment.moveForm("div-comment-487", "487", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-488">
	<div id="div-comment-488">
	<div class="comment-author vcard">
				<cite class="fn">D</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-488" title="">
	April 30, 2010 at 9:28 am</a> </small>

	<p>In theory, this would be a great idea, but it could never happen. The amount of work to accurately model the cashflows would prohibit the securitization in the first place. Even if the waterfall was simple, modeling the collateral is very non-trivial: imagine writing the code to accurately model the principal and interest payments of  a pool of ARM loans given a ramping index rate, a non-linear prepayment curve, defaults, severities, delinquencies, etc. Then, once all of that is modeled, now you can push it through the bond waterfall to see how the bonds pay. What if the deal has triggers? What about modified loans? Wraps and financial guarantees?</p>
<p>Plus, every month this perfect loan by loan information has to be accurately disclosed in a format that will allow it to be plugged back into the model above so the new analysis can be done? Is the issuer going to continue to provide that service long after the deal has been issued?</p>
<p>Look, I&#8217;m all for transparency, but that kind of analysis is up to the buyer/seller. Either model it up yourself or pay a 3rd party to do so. But if this is required for every deal issued, I&#8217;d expect issuance to grind to a halt.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=488#respond' onclick='return addComment.moveForm("div-comment-488", "488", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-even depth-1" id="comment-489">
	<div id="div-comment-489">
	<div class="comment-author vcard">
				<cite class="fn">Amazed</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-489" title="">
	April 30, 2010 at 11:43 am</a> </small>

	<p>In as much as I&#8217;m currently a Haskell advocate, I&#8217;m not convinced that it would be the best choice from a readability standpoint. However, giving people the illusion that they understand the code just because it appears readable isn&#8217;t necessarily the right goal (see COBOL).</p>
<p>Something I haven&#8217;t seen mentioned is MATLAB, in particular Simulink. Yes, I know, it&#8217;s OUTRAGEOUSLY expensive from a consumer&#8217;s standpoint. That said, I&#8217;m under the impression that the target market for this would be institutions, at which point MATLAB costs would amount to noise (assuming they didn&#8217;t already have licenses).</p>
<p>Certainly it doesn&#8217;t have all the touchy-feely-good-vibes of FOSS (dude!), but I see it as a much better solution to the problem.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=489#respond' onclick='return addComment.moveForm("div-comment-489", "489", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-490">
	<div id="div-comment-490">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://bobkerns.typepad.com' rel='external nofollow' class='url'>Bob Kerns</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-490" title="">
	April 30, 2010 at 1:49 pm</a> </small>

	<p>@D: So you&#8217;re saying these deals are too complicated to model, so let the buyer model it?</p>
<p>#FAIL</p>
<p>If issuance of deals too complicated for buyers to understand grinds to a halt, I shall not shed a tear.</p>
<p>However I believe the core issue you are pointing to is that the model has to be properly modularized. A single monolithic model that embodies both the waterflow and the collateral would be a problem.</p>
<p>But I think what&#8217;s needed is a model for the waterfall, including all the contractual aspects, that the user can plug in his own modified collateral model.</p>
<p>I don&#8217;t pretend to really understand the structure of these deals. But I believe part of the value here lies precisely in limiting the amount of complexity and obscurity that can be introduced. That&#8217;s a part of why I favor a declarative approach.</p>
<p>Using a general programing language, you can specify a program which is so complicated that you cannot prove it will ever give you an answer.</p>
<p>What&#8217;s needed is a way that there can be a meeting of the minds between buyer and seller, so that they&#8217;re on an equal footing.</p>
<p>Let&#8217;s say each ARM in the pool had its own model, in some standardized form that allows for composition. This could be a matter of declarative descriptions, or a program with a standardized interface.</p>
<p>Let&#8217;s say the collateral pool&#8217;s structure also has a model. Compose this model with the ones for the underlying ARMs</p>
<p>Compose this with the waterfall.</p>
<p>If you want to select half the ARMs with some characteristic, and subject them to an alternate model of your choosing, you can can do that.</p>
<p>If the servicers of the ARMs provide performance data, and the packager of the deal aggregates it, this is something you only have to set up once. The ongoing burden is negligible &#8212; assuming everyone follows through.</p>
<p>In the real world, some banks handling the ARMs would likely fall out of compliance. Maybe get bought up by some giant, or (gasp) be allowed to fail, and parceled out.</p>
<p>I don&#8217;t see that as a major problem. Well, it&#8217;s a problem, it&#8217;s just not a problem with this system. You either extrapolate from stale data (&#8220;still current&#8221;, &#8220;still in default&#8221;, etc.) or substitute a better model (perhaps a transition probability matrix) of the projected course of the loan, that captures how you&#8217;d handle the missing information in your analysis anyway.</p>
<p>What I&#8217;m getting at here, is that if you can&#8217;t model the contractual portions, and you can&#8217;t obtain and plugin in ongoing performance data, then maybe you&#8217;re buying a pig in a poke, and it&#8217;s just too complicated to be allowed to exist.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=490#respond' onclick='return addComment.moveForm("div-comment-490", "490", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment even depth-2 parent" id="comment-493">
	<div id="div-comment-493">
	<div class="comment-author vcard">
				<cite class="fn">D</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-493" title="">
	April 30, 2010 at 5:39 pm</a> </small>

	<p>&#8220;it’s just too complicated to be allowed to exist&#8221; seems wrong to me. I agree that in some cases these deals are too complicated&#8230;.so don&#8217;t buy them! These are major institutions buying these bonds, not individuals- institutions with time, money, and very bright people working for them who should do whatever research they feel necessary before purchasing. </p>
<p>If modeling these deals is as simple as you seem to think, why would institutions pay 3rd parties like Bloomberg millions of dollars to do it for them?</p>
<p>I am certain that any of the major banks that purchased any mortgage backed securities that subsequently failed had all of the necessary research tools available to them. </p>
<p>Regulating the sell side seems un-American to me. Let the open market decide what&#8217;s a good purchase and what&#8217;s not. Why did these deals get issued in the first place? Because people bought them up. Not the other way around.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=493#respond' onclick='return addComment.moveForm("div-comment-493", "493", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-3" id="comment-494">
	<div id="div-comment-494">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://bobkerns.typepad.com' rel='external nofollow' class='url'>Bob Kerns</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-494" title="">
	April 30, 2010 at 8:24 pm</a> </small>

	<p>Yes, I fully realize these are institutions buying these. It is institutions which have been the major victims in the news, is it not?</p>
<p>Caveat Emptor is a nice idea. But it presumes the buyer is actually buying what he thinks he is.</p>
<p>I never said I thought modelling these is easy. But tell me, does it make sense for 100 institutions to pay 3rd parties for the same model?</p>
<p>The goal here isn&#8217;t to regulate the sell side. The goal here is simply the traditional role of government in enforcing contracts, by demanding that contracts be clear and unambiguous enough that both parties can agree on the operation of the contract itself.</p>
<p>It&#8217;s fine if different potential buyers bring different economic assumptions to the table, and I agree that that shouldn&#8217;t be the seller&#8217;s responsibility.</p>
<p>That&#8217;s why my point was about modularity &#8212; construct the models in such a way as to separate modelling of the contract being sold, from modelling the assumptions under which the buyer chooses to operate.</p>
<p>I think that&#8217;s pretty essential to the idea. I suspect we agree on that point, and probably only disagree about whether it&#8217;s feasible to do so.</p>
<p>My point about &#8220;too complex to exist&#8221; is simply that if the contract itself is too complex to be modeled by the seller (not the economic assumptions), then the seller will be operating blind as well as the buyer. The seller should have a model, and done right, it should be one that can be usefully shared with the buyer, and be basically an executable form of the contract.</p>
<p>After all, there has to be SOME way, at a given point in time, to determine what the contract says should happen. If it&#8217;s that complicated, that computers can&#8217;t do it, just lawyers reading the contract, where do you think things will end up? The courts!</p>
	
	<div class="reply">
			</div>
	</div>
</li>
</ol>
</li>
</ol>
</li>
<li class="comment even thread-even depth-1 parent" id="comment-491">
	<div id="div-comment-491">
	<div class="comment-author vcard">
				<cite class="fn">Amazed</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-491" title="">
	April 30, 2010 at 2:08 pm</a> </small>

	<p>@D: I think the crux of the problem you&#8217;re pointing out (and I would *hope* that the SEC is aware &amp; planning for this), is that any specification system would have to have an SEC provided and managed library of objects that the contracts would rely upon. There&#8217;s no point in reinventing the wheel with each piece of code.</p>
<p>@Bob Kerns: I may be mistaken, but I think your point is allied with my response to D. Also, the halting problem doesn&#8217;t require a very complex program at all. Damned Gödel!</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=491#respond' onclick='return addComment.moveForm("div-comment-491", "491", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2" id="comment-492">
	<div id="div-comment-492">
	<div class="comment-author vcard">
				<cite class="fn">Amazed</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-492" title="">
	April 30, 2010 at 2:14 pm</a> </small>

	<p>I forgot to add (what does wordpress have against &#8220;preview&#8221; anyway?), the linked paper earlier to the Simon Peyton-Jones research at Microsoft essentially provides for a library from which to draw (the combinator library).</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=492#respond' onclick='return addComment.moveForm("div-comment-492", "492", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-502">
	<div id="div-comment-502">
	<div class="comment-author vcard">
				<cite class="fn">Martin</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-502" title="">
	May 5, 2010 at 5:12 pm</a> </small>

	<p>What the DSL proponents fail to consider / adequately weight is that DSLs&#8217;s readability benefits come with at least three costs:</p>
<p>1) The Illusion of Comprehensibility: a DSL that is simple is useless, and a DSL that is useful isn&#8217;t simple.  People may expect something that looks a bit like a natural language to be easily comprehensible, but the precision that we gain from a rigourous definition trip up people that don&#8217;t have a detailed understanding of the DSL and how it contributes to the value.  If you think you&#8217;re immune, read that Simon Peyton-Jones paper that&#8217;s been mentioned ( <a href="http://research.microsoft.com/en-us/um/people/simonpj/papers/financial-contracts/pj-eber.ps" rel="nofollow">http://research.microsoft.com/en-us/um/people/simonpj/papers/financial-contracts/pj-eber.ps</a> ) and do the &#8220;routine&#8221; proof that &#8220;give (c1 or c2) != give c1 or give c2&#8243;.  How many people are going to say that using &#8220;give&#8221; instead of &#8220;negation&#8221; and &#8220;or&#8221; instead of &#8220;max&#8221; is a net win?  Check out SPJ&#8217;s justifications on page 2: &#8220;it becomes much easier to describe &#8230; unforeseen contracts&#8221; and &#8220;we can [where we couldn't before] systematically analyse, manipulate, and perform computations over&#8221;.  Such are advantages that a DSL or Haskell combinator library has over C.  These are not significant advantages over python, especially when balanced against the&#8230;</p>
<p>2) Loss of Imperative: show me one person who checks a computation declaritively and I&#8217;ll show you 50 who check it imperatively.  While is is easier to describe contracts declaratively, it&#8217;s easier to evaluate them imperatively.  To make up for this loss, DSLs have to supply a lot in semantic compression.  But see point #1.  A bad DSL is as bad as a bad imperative implementation; and don&#8217;t forget the&#8230;</p>
<p>3) Loss of Generality: sure, DSLs are great because of semantic compression.  But what if the DSL doesn&#8217;t allow you to express what you need?  You&#8217;re back to needing a general purpose programming language.  A well-designed API or library in a general-purpose programming language is better than a badly-designed DSL.  A complete API or library in a general-purpose programming language is better than an incomplete DSL.  And a complete DSL is a pipe dream for this problem space.</p>
<p>Reactions?</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=502#respond' onclick='return addComment.moveForm("div-comment-502", "502", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-even depth-1" id="comment-518">
	<div id="div-comment-518">
	<div class="comment-author vcard">
				<cite class="fn">Truman</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-518" title="">
	May 10, 2010 at 4:26 pm</a> </small>

	<p>Dear all,</p>
<p>Since, I am a true person, I put some undisputable points.</p>
<p>1) We can write clean code in perl</p>
<p>2) With perl Moose, we can write superior OOP in perl compared to python</p>
<p>3) Perl is faster than python on any given day (for 90% of works)</p>
<p>4) Python is also a good language but till such time, it has faster implementation without using a C extension, it will not be used by industry</p>
<p>5) 99% of all programming projects that get outsourced to India don&#8217;t mention use of python. So, we may assume (may or maynot be true) that a vast majority of projects in the world don&#8217;t involve python.</p>
<p>6) Stick to one programming language for life and learn perl or python depending on ur convinience. Says perl is bad is an ugly joke.</p>
<p>Cheers</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=518#respond' onclick='return addComment.moveForm("div-comment-518", "518", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-519">
	<div id="div-comment-519">
	<div class="comment-author vcard">
				<cite class="fn">Truman</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-519" title="">
	May 10, 2010 at 4:27 pm</a> </small>

	<p>sorry! I point 6, I meant &#8220;Saying perl is bad is an ugly joke&#8221;</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=519#respond' onclick='return addComment.moveForm("div-comment-519", "519", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-even depth-1" id="comment-530">
	<div id="div-comment-530">
	<div class="comment-author vcard">
				<cite class="fn">dodododadada</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-530" title="">
	May 18, 2010 at 8:25 am</a> </small>

	<p>It should definitely be in Flash.  ActionScript.  No &#8220;reverse engineering&#8221; allowed.  It&#8217;s not your business how the software works, you silly investors.  Only Adobe and &#8220;software developers&#8221; need to know that information.  </p>
<p>Alternatively, it could be in Javascript. But it will only work correctly if you use ____ browser.</p>
<p>Why not just give investors the machine readable language and let them decide what to do with it?  If the investor wants to buy a program to display the data a certain way, then that&#8217;s her choice.  If she wants to use someone else&#8217;s open source interpreter (e.g. Python), then that too is her choice.  Or maybe she&#8217;ll just use UNIX tools and a shell.</p>
<p>Is the SEC is trying to create jobs for Python programmers?  Will every company need to employ or outsource Python coders to write these apps?  </p>
<p>Very strange idea, singling out an interpreter.  Why not use Tcl?  Why not learn to use a UNIX shell?</p>
<p>You see, the problem is personal preference.  Making the choice for investors is pushing someone else&#8217;s preference on investors.</p>
<p>Investors just need data.  Maybe they don&#8217;t want to use Python. (Though it wouldn&#8217;t hurt because Google makes such heavy use of it.)</p>
<p>But I admire the SEC for their continuing attention to giving investors machine readable data.  Good show.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=530#respond' onclick='return addComment.moveForm("div-comment-530", "530", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-531">
	<div id="div-comment-531">
	<div class="comment-author vcard">
				<cite class="fn">dodododadada</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-531" title="">
	May 18, 2010 at 8:31 am</a> </small>

	<p>correction: change &#8220;machine readable language&#8221; to &#8220;machine readable data&#8221;</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=531#respond' onclick='return addComment.moveForm("div-comment-531", "531", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-even depth-1" id="comment-532">
	<div id="div-comment-532">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.topfatburners.org/' rel='external nofollow' class='url'>Jessi</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-532" title="">
	May 19, 2010 at 10:18 am</a> </small>

	<p>Very cool news; now I&#8217;m trying wrap my head around MBAs using list comprehension constructs and generators.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=532#respond' onclick='return addComment.moveForm("div-comment-532", "532", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-535">
	<div id="div-comment-535">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://financemarket.iblogger.org' rel='external nofollow' class='url'>super</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-535" title="">
	May 24, 2010 at 1:40 pm</a> </small>

	<p>more on <a href="http://financemarket.iblogger.org" rel="nofollow">http://financemarket.iblogger.org</a> free back links and finance markets news</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=535#respond' onclick='return addComment.moveForm("div-comment-535", "535", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback odd alt thread-even depth-1" id="comment-537">
	<div id="div-comment-537">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://webmink.com/2010/05/29/links-for-2010-05-29/' rel='external nofollow' class='url'>links for 2010-05-29 &laquo; Wild Webmink</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-537" title="">
	May 29, 2010 at 5:37 pm</a> </small>

	<p>[...] The SEC and The Python What does open source have to do with open data? This extremely insightful move by the SEC demonstrates that the syntax of open data is not enough to provide transparency. We also need an implementation of the semantics of that syntax, provided openly, freely and as the basis for reimplementation, so that we can understand what we are being shown. (tags: SEC USA transparency) [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=537#respond' onclick='return addComment.moveForm("div-comment-537", "537", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-546">
	<div id="div-comment-546">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.manateepro.com' rel='external nofollow' class='url'>manateepro.com</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-546" title="">
	June 3, 2010 at 4:59 am</a> </small>

	<p>The amount of rent escalation is written in the agreement, lease must meet or exceed the expected increase in the level of expenditure in the coming years, the landlord is otherwise going to lose money</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=546#respond' onclick='return addComment.moveForm("div-comment-546", "546", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-even depth-1" id="comment-547">
	<div id="div-comment-547">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://quannabe.wordpress.com/' rel='external nofollow' class='url'>Quannabe</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-547" title="">
	June 3, 2010 at 6:46 am</a> </small>

	<p>My core issue with using something like Python for SEC contracts is that it&#8217;s not restrictive enough. I&#8217;ve had a moderate amount (~20 years) of experience with scripting languages used to test software systems. In every case, testers will flex the language to its full extent in order to save themselves time. Additionally, they will flex the language in order to make their dreary work more enjoyable. I have never seen an exception to this observation (although, more likely than not, I personally would have written a tool to generate the script &#8212; only because that was even more fun than flexing the language).</p>
<p>To me, the bottom line is that, in order to create a system that is both understandable and correct, one has to create a very limited language that is targeted to the problem at hand.</p>
<p>Now, I realize this is an extreme example, but here&#8217;s a Python script that sets variable = 1. It&#8217;s not that I think anyone will go quite this far, but it exemplifies the issue I have with full-featured languages that target a narrow problem.This example was stolen from <a href="http://www.p-nand-q.com/python/obfuscated_python.html" rel="nofollow">http://www.p-nand-q.com/python/obfuscated_python.html</a></p>
<p>&#8212;&#8212;&#8212;&#8211;<br />
import thread, time, whrandom, mutex</p>
<p># alias for better code readability<br />
x = whrandom.randint</p>
<p>def func(o):<br />
    if o[-1]:<br />
        o[1][0] -= 1<br />
        o[1].extend(o[2])<br />
        o[0].unlock()<br />
    else:<br />
        o[-2].extend([0]*50000)<br />
        for j in range(0,len(o[-2])):<br />
            o[-2][j] = x(0,100)<br />
            while not o[-2][j]:<br />
                o[-2][j] = x(0,100)<br />
            o[-2][j] = x(0,100) / o[-2][j]<br />
        o[0][1].lock(func,[o[0][1],o[0],o[1],1])</p>
<p># this is just meant as a threadsafe way of finding out<br />
# how many threads are alive (if I understand the elaborate<br />
# manual that is the python documentation on this)<br />
def getcount():<br />
    result = [0]<br />
    def i(result):<br />
        global queue<br />
        result[0] = queue[0]<br />
        queue[1].unlock()<br />
    queue[1].lock(i,result)<br />
    return result[0]</p>
<p># testprogram: can be either single-or multithreaded.<br />
singlethreaded = 0<br />
start = time.clock()<br />
if singlethreaded:<br />
    queue = [-1,mutex.mutex()]<br />
    func([queue,[],0])<br />
else:<br />
    queue = [10,mutex.mutex()]<br />
    for i in range(queue[0]):<br />
        thread.start_new_thread(func,([queue,[],0],))<br />
    time.sleep(1)<br />
    while getcount() &gt; 1:<br />
        time.sleep(1)<br />
        print getcount()</p>
<p>variable = reduce(lambda x,y:x+y,map(int,queue[4:]))/len(queue[4:])/2</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=547#respond' onclick='return addComment.moveForm("div-comment-547", "547", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment byuser comment-author-magikwarlock even thread-odd thread-alt depth-1 parent" id="comment-549">
	<div id="div-comment-549">
	<div class="comment-author vcard">
				<cite class="fn">magikwarlock</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-549" title="">
	June 5, 2010 at 11:15 pm</a> </small>

	<p>Python?i don&#8217;t think is so popular.<br />
There are plenty of visual programming languages, but unfortunately most of them are not free</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=549#respond' onclick='return addComment.moveForm("div-comment-549", "549", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment odd alt depth-2" id="comment-551">
	<div id="div-comment-551">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://quannabe.wordpress.com/' rel='external nofollow' class='url'>Quannabe</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-551" title="">
	June 6, 2010 at 9:54 am</a> </small>

	<p>What do visual programming languages have to do with this discussion?</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=551#respond' onclick='return addComment.moveForm("div-comment-551", "551", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="trackback even thread-even depth-1" id="comment-556">
	<div id="div-comment-556">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://aleatory.clientsideweb.net/2010/06/04/friday-linkdump-8/' rel='external nofollow' class='url'>aleatory</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-556" title="">
	June 15, 2010 at 3:49 am</a> </small>

	<p><strong>Friday Linkdump&#8230;</strong></p>
<p>Take deep breath and&#8230; Agree? I just got me some contrast true UI innovation &#8211; prefab should billing solutions be this expensive? is whacking a paypal badge on your site not free and relatively painless? nice &#8211; google analytics now asy&#8230;</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=556#respond' onclick='return addComment.moveForm("div-comment-556", "556", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment byuser comment-author-richardcareaga odd alt thread-odd thread-alt depth-1 parent" id="comment-573">
	<div id="div-comment-573">
	<div class="comment-author vcard">
				<cite class="fn">richardcareaga</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-573" title="">
	July 9, 2010 at 6:46 am</a> </small>

	<p>An simplified example of what a waterfall program in Python might look like is at <a href="http://www.pylaw.org/demonstration.txt" rel="nofollow">http://www.pylaw.org/demonstration.txt</a> .</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=573#respond' onclick='return addComment.moveForm("div-comment-573", "573", "respond", "410")'>Reply</a>	</div>
	</div>
<ol class='children'>
<li class="comment even depth-2" id="comment-574">
	<div id="div-comment-574">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.martindengler.com' rel='external nofollow' class='url'>Martin</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-574" title="">
	July 9, 2010 at 5:19 pm</a> </small>

	<p>I cleaned up the python a little bit:</p>
<p>patch: <a href="http://www.martindengler.com/proj/sec_python/demonstration.patch" rel="nofollow">http://www.martindengler.com/proj/sec_python/demonstration.patch</a></p>
<p>New version:</p>
<p><a href="http://www.martindengler.com/proj/sec_python/demonstration.py" rel="nofollow">http://www.martindengler.com/proj/sec_python/demonstration.py</a></p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=574#respond' onclick='return addComment.moveForm("div-comment-574", "574", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
</ol>
</li>
<li class="comment odd alt thread-even depth-1" id="comment-575">
	<div id="div-comment-575">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.richard-careaga.com' rel='external nofollow' class='url'>Richard Careaga</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-575" title="">
	July 9, 2010 at 7:03 pm</a> </small>

	<p>Thank you, Martin. I especially appreciate the replacement of the clunky dict definitions. Your response and improvements illustrate one of the great strengths of open source, the large community of &#8220;second pair of eyes,&#8221; that seems to organize itself spontaneously to improve whatever code it sees.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=575#respond' onclick='return addComment.moveForm("div-comment-575", "575", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-582">
	<div id="div-comment-582">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.ljubavnice.com' rel='external nofollow' class='url'>amaterke</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-582" title="">
	July 17, 2010 at 12:16 am</a> </small>

	<p>Hello,<br />
I am new in blogs world. If someone  want to now about blog history:</p>
<p>The term &#8220;weblog&#8221; was coined by Jorn Barger] on 17 December 1997. The short form, &#8220;blog,&#8221; was coined by Peter Merholz, who jokingly broke the word weblog into the phrase we blog in the sidebar of his blog Peterme.com in April or May 1999.]]] Shortly thereafter, Evan Williams at Pyra Labs used &#8220;blog&#8221; as both a noun and verb (&#8220;to blog,&#8221; meaning &#8220;to edit one&#8217;s weblog or to post to<br />
one&#8217;s weblog&#8221;) and devise the term &#8220;blogger&#8221; in connection with Pyra Labs&#8217; Blogger product, leading to the popularization of the terms.</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=582#respond' onclick='return addComment.moveForm("div-comment-582", "582", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback odd alt thread-even depth-1" id="comment-590">
	<div id="div-comment-590">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://dexision.com/blog/?p=101' rel='external nofollow' class='url'>Yves Hilpisch&#039;s Blog &raquo; Blog Archive &raquo; Python for Financial Engineering</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-590" title="">
	July 27, 2010 at 4:09 pm</a> </small>

	<p>[...] and rather complex class of securities. For comments on this remarkable initiative see also the Blog entry of Prof. [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=590#respond' onclick='return addComment.moveForm("div-comment-590", "590", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="pingback even thread-odd thread-alt depth-1" id="comment-629">
	<div id="div-comment-629">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www2.dexision.com/?p=145' rel='external nofollow' class='url'>Python for Financial Engineering &laquo; DEXISION</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-629" title="">
	August 17, 2010 at 7:01 pm</a> </small>

	<p>[...] and rather complex class of securities. For comments on this remarkable initiative see also the Blog entry of Prof. [...]</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=629#respond' onclick='return addComment.moveForm("div-comment-629", "629", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment odd alt thread-even depth-1" id="comment-638">
	<div id="div-comment-638">
	<div class="comment-author vcard">
				<cite class="fn"><a href='http://www.nuqudy.com' rel='external nofollow' class='url'>nuqudy</a></cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-638" title="">
	August 29, 2010 at 4:05 pm</a> </small>

	<p>are there enough Python XML parsing libraries???</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=638#respond' onclick='return addComment.moveForm("div-comment-638", "638", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
<li class="comment even thread-odd thread-alt depth-1" id="comment-655">
	<div id="div-comment-655">
	<div class="comment-author vcard">
				<cite class="fn">Truman</cite> <span class="says">Says:</span>	</div>
		<br />

	<small class="comment-meta commentmetadata"><a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/#comment-655" title="">
	September 13, 2010 at 12:59 pm</a> </small>

	<p>In perl there are many libraries to parse XML. If it is a big file, Python is going to be slooooooooooooow&#8230;&#8230;.. U can make it fast by pypy, Psycho. Little bit of &#8220;C&#8221; knowledge is needed. There is also some book on python and XML. I don&#8217;t remember the title.</p>
<p>In Indian industry, no body (except google) uses python. PHP, Perl and Java Rock!! here.<br />
Final conclusion, use Perl! for any job !!! Perl 6 &#8220;will&#8221; &#8220;surely&#8221; come by Jul 30th 2012 and &#8220;will&#8221; sweep all.</p>
<p>Till then wait.</p>
<p>Sorry for being off-topic!</p>
<p>Cheers,<br />
Truman</p>
<p>My Quote: &#8221; Englishmen put lot of terminilogies and abbreviations to classify <img src='http://s2.wp.com/wp-includes/images/smilies/icon_smile.gif?m=1235111561g' alt=':-)' class='wp-smiley' />  but then they catch themselves <img src='http://s0.wp.com/wp-includes/images/smilies/icon_sad.gif?m=1235111561g' alt=':-(' class='wp-smiley' />  &#8220;</p>
	
	<div class="reply">
		<a class='comment-reply-link' href='/2010/04/16/the-sec-and-the-python/?replytocom=655#respond' onclick='return addComment.moveForm("div-comment-655", "655", "respond", "410")'>Reply</a>	</div>
	</div>
</li>
	</ol>
	
	<div class="navigation">
	<div class="alignleft"></div>
	<div class="alignright"></div>
	</div>

	

									<div id="respond">
				<h3 id="reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2010/04/16/the-sec-and-the-python/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://jrvarma.wordpress.com/wp-comments-post.php" method="post" id="commentform">
																			<p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name</label> <span class="required">*</span><input id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email</label> <span class="required">*</span><input id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label><input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label><textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;pre&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p>						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='410' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
						
<input type="hidden" name="genseq" value="1293264773" />
<p><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" tabindex="6"/> <label class="subscribe-label" id="subscribe-label" for="subscribe">Notify me of follow-up comments via email.</label></p><p><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;" tabindex="7"/> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog">Notify me of new posts via email.</label></p><input type="hidden" name="sub-type" value="comment-form-text0" /><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="43e46da2b9" /></p>					</form>
							</div><!-- #respond -->
						
			</div>
					<p align="center"></p>		
	</div>
	<div id="sidebar">
		<h2>Archived Entry</h2>
	<ul>
	<li><strong>Post Date :</strong></li>
	<li>April 16, 2010 at 6:22 pm</li>
		<li><strong>Category :</strong></li>
	<li><a href="http://jrvarma.wordpress.com/category/uncategorized/" title="View all posts in Uncategorized" rel="category tag">Uncategorized</a></li>
			<li><strong>Do More :</strong></li>
	<li>							You can <a href="#respond">leave a response</a>, or <a href="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/trackback/">trackback</a> from your own site.
						
						</li>
	</ul>
		
	</div>
<p id="footer"><a href="http://wordpress.com/?ref=footer" rel="generator">Blog at WordPress.com</a>. &#8212; Theme: <a href="http://theme.wordpress.com/themes/connections/">Connections</a> by <a href="http://www.vanillamist.com" rel="designer">www.vanillamist.com</a>.</p>

<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script>	<script type="text/javascript">
	/* <![CDATA[ */
		jQuery( function() {
			
			jQuery('#wpl-button > a.like').click( function(e) {
				e.preventDefault();
				
				jQuery('#wpl-mustlogin').remove();

				jQuery.post( 'http://jrvarma.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_like_click'
				} );

				var tenMins = new Date();
				tenMins.setTime( tenMins.getTime() + 600000 );
				document.cookie = 'wpl_rand=6fb476e6e7; expires=' + tenMins.toGMTString() + '; domain=wordpress.com; path=/;';
				
				jQuery('#wpl-count').after( '\
					<div id="wpl-mustlogin"> \
						<form action="http://jrvarma.wordpress.com/wp-login.php" method="post"> \
							<p>Just one more step to like this post:</p> \
							<label><span>Username</span> <input type="text" name="log" id="user_login" class="input" value="" size="20" tabindex="80" /></label> \
							<label><span>Password</span> <input type="password" name="pwd" id="user_pass" class="input" value="" size="20" tabindex="81" /></label> \
							<input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="Log In" tabindex="82" /> \
							<input type="hidden" name="redirect_to" value="http://jrvarma.wordpress.com/2010/04/16/the-sec-and-the-python/?like=1" /> \
							<input type="hidden" name="wpl_rand" value="6fb476e6e7" /> \
							<p>Not a member yet? <a href="http://wordpress.com/signup/?ref=likebox" id="wpl-signup-link">Sign up with WordPress.com</a></p> \
						</form> \
					</div> \
				');
				
				jQuery('#wpl-mustlogin').hide().slideDown('fast');
			} );
			
			jQuery('#wpl-mustlogin input.input').live( 'focus', function() {
				jQuery(this).prev().hide();
			}).live( 'blur', function() {
				if ( jQuery(this).val() == '' )
					jQuery(this).prev().show();
			});
			
			jQuery('#wpl-mustlogin input#wp-submit').live( 'click', function(e) {
				e.preventDefault();
				
				jQuery.post( 'http://jrvarma.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_login_submit'
				}, function() {
					jQuery('#wpl-mustlogin form').submit();
				} );
			});			
			
			jQuery('#wpl-mustlogin a#wpl-signup-link').live( 'click', function(e) {
				e.preventDefault();
				
				var link = jQuery(this).attr('href');
				
				jQuery.post( 'http://jrvarma.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_signup_click'
				}, function() {
					location.href = link;
				} );
			});					
			
		});
	/* ]]> */
	</script>
<script type="text/javascript">_qoptions={qacct:'p-18-mFEk4J448M',labels:'language.en,type.wpcom'};</script>
<script type="text/javascript" src="http://edge.quantserve.com/quant.js"></script>
<noscript><p><img class="robots-nocontent" src="http://pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif?labels=language.en%2Ctype.wpcom" style="display:none" height="1" width="1" alt="" /></p></noscript>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?n&#038;ver=MU'></script>
	<script type="text/javascript">	
	// <![CDATA[
	WPGroHo = {
		data: {},
		renderers: {},
		syncProfileData: function( hash, id ) {
			if ( !WPGroHo.data[hash] ) {
				WPGroHo.data[hash] = {};
				a = jQuery( 'div.grofile-hash-map-' + hash + ' span' ).each( function() {
					WPGroHo.data[hash][this.className] = jQuery( this ).text();
				} );
			}

			WPGroHo.appendProfileData( WPGroHo.data[hash], hash, id );
		},
		appendProfileData: function( data, hash, id ) {
			for ( var key in data ) {
				if ( jQuery.isFunction( WPGroHo.renderers[key] ) ) {
					return WPGroHo.renderers[key]( data[key], hash, id, key );
				}

				jQuery( '#' + id ).find( 'h4' ).after( jQuery( '<p class="grav-extra ' + key + '" />' ).html( data[key] ) );
			}
		}
	};
	jQuery(document).ready(function($){
		Gravatar.profile_cb = function( h, d ) {
			WPGroHo.syncProfileData( h, d );
		};
		Gravatar.attach_profiles();
	});
	// ]]>
	</script>
	<div style="display:none">
	</div>
<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js"></script><script type="text/javascript">try{COMSCORE.beacon({c1:2,c2:7518284});}catch(e){}</script><noscript><p class="robots-nocontent"><img src="http://b.scorecardresearch.com/p?cj=1c1=2&#038;c2=7518284" alt="" style="display:none" width="1" height="1" /></p></noscript><script src="http://s.stats.wordpress.com/w.js?19" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'4657416','v':'wpcom','user_id':'0','post':'410','subd':'jrvarma'});
ex_go({'crypt':'RDZ8LFkxbXFDLnxzdyZ0LlVGclZsRU92T1hDVC0mbTktTzUtSlJFUWRbbUJwNHQtZWxibWd2WTd8XzdnQy44c3pIT1c0aXFJfkgySHRQbSZdTT1KVTg2ZH5RSFJhbj05dWhDRTkmL2daUk5IK0dhakQwTEJxeXpSTHRtJjE5Sld3N1t8Lz9nQlZbSSVDc1AvLm01UVRKflZZaDJwWElfNkRdWlIucHZsVnh0a1VqZDFWTDQ9VVMvRUgsVDJmK2lyQUtRST15c2FPbjklNF9SQTQ9JjErRT1UNjFLRyZpS3hocFRRKw=='});
re_go({'d[breakingcode.wordpress.com]':'1','d[wedonotsow.wordpress.com]':'1','d[haas414.wordpress.com]':'1','v':'sph','b':'4657416','p':'410'});
addLoadEvent(function(){linktracker_init('4657416',410);});
	</script>
</div>
</div>
</body>
</html>
