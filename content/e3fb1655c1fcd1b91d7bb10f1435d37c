<head><title>Linda Rising - Patterns Almanac</title>

<h1><img src="Almanac.jpg"> Linda Rising - Patterns Almanac 2000</h1>
<hr>
<table >
<tr><td width=500>
Based on the book "Patterns Almanac 2000" by <a href="http://www.lindarising.org/">Linda Rising</a>.<br>
Web version by <a href="http://www.charlesweir.com/">Charles Weir</a>. <br>Hosted by the <a href="..">Small Memory Software</a> site.
</td><td><!-- Begin FusionBot.com site search engine code -->
<FORM NAME=fbsearch METHOD="GET" ACTION="http://ss529.fusionbot.com/cgi-bin/ss_query">
  <DIV align="left">Search the almanac:<BR>
  <INPUT TYPE=text NAME="keys" SIZE="15">
  <INPUT TYPE=submit VALUE="GO"><BR>
  <FONT face="Arial" size="1"><A href=http://ss529.fusionbot.com/cgi-bin/ss_help?sitenbr=155144613>search tips</A></FONT> 
  <FONT face="Arial" size="1"><A href=http://ss529.fusionbot.com/cgi-bin/ss_sitemap?sitenbr=155144613>sitemap</A></FONT>
  <INPUT TYPE=hidden NAME="sitenbr" VALUE="155144613">
  </DIV>
</FORM> 
<!-- End FusionBot.com site search engine code -->
</td></tr>
</table>
<hr>
The following are summaries by Linda Rising of the major software pattern books and papers published prior to 2000.  <br>
Enjoy browsing! <p>

<table align="center" border=0 cellspacing=0 cellpadding=1>

<tr><td><a href="AarstenEtc95.html">Aarsten+95</a></td><td> G++: A Pattern Language for Computer-Integrated Manufacturing</td></tr>
<tr><td><a href="AarstenEtc96a.html">Aarsten+96a</a></td><td> Designing Concurrent and Distributed Control Systems</td></tr>
<tr><td><a href="AarstenEtc96b.html">Aarsten+96b</a></td><td> Object-Oriented Design Patterns in Reactive Systems</td></tr>
<tr><td><a href="AdamsEtc96.html">Adams+96</a></td><td> Fault-Tolerant Telecommunication System Patterns</td></tr>
<tr><td><a href="Adams95.html">Adams95</a></td><td> Functionality Ala Carte</td></tr>
<tr><td><a href="AlexanderEtc75.html">Alexander+75</a></td><td> The Oregon Experiment</td></tr>
<tr><td><a href="AlexanderEtc77.html">Alexander+77</a></td><td> A Pattern Language</td></tr>
<tr><td><a href="Alexander79.html">Alexander79</a></td><td> The Timeless Way of Building</td></tr>
<tr><td><a href="AlpertEtc98.html">Alpert+98</a></td><td> The Design Patterns Smalltalk Companion</td></tr>
<tr><td><a href="Anderson99.html">Anderson99</a></td><td> A Collection of History Patterns</td></tr>
<tr><td><a href="Anthony96.html">Anthony96</a></td><td> Patterns for Classroom Education</td></tr>
<tr><td><a href="Auer95.html">Auer95</a></td><td> Reusability Through Self-Encapsulation</td></tr>
<tr><td><a href="AuerEtc96.html">Auer+96</a></td><td> Lazy Optimization: Patterns for Efficient Smalltalk Programming</td></tr>
<tr><td><a href="BarkatakiEtc98.html">Barkataki+98</a></td><td>  Reengineering A Legacy System Using Design Patterns and Ada-95 Object-Oriented Features</td></tr>
<tr><td><a href="BaumerEtc97.html">B&auml;umer+97</a></td><td> Framework Development for Large Systems</td></tr>
<tr><td><a href="BaumerEtc98.html">B&auml;umer+98</a></td><td> Product Trader</td></tr>
<tr><td><a href="BaumerEtc99.html">B&auml;umer+99</a></td><td> The Role Object Pattern</td></tr>
<tr><td><a href="Beck97.html">Beck97</a></td><td> Smalltalk Best Practice Patterns</td></tr>
<tr><td><a href="BeedleEtc99.html">Beedle+99</a></td><td> Scrum: A Pattern Language for Hyperproductive Software Development</td></tr>
<tr><td><a href="Berczuk95.html">Berczuk95</a></td><td> A Pattern for Separating Assembly and Processing</td></tr>
<tr><td><a href="Berczuk96.html">Berczuk96</a></td><td> Organizational Multiplexing: Patterns for Processing Satellite Telemetry with Distributed Teams</td></tr>
<tr><td><a href="Berczuk97.html">Berczuk97</a></td><td> Teamwork and Configuration Management</td></tr>
<tr><td><a href="Boyd98a.html">Boyd98a</a></td><td> Architecture Patterns for Business Systems</td></tr>
<tr><td><a href="Boyd98b.html">Boyd98b</a></td><td> Business Patterns of Association Objects</td></tr>
<tr><td><a href="BradacEtc98.html">Bradac+98</a></td><td> A Pattern Language for Developing Form Style Windows</td></tr>
<tr><td><a href="BragaEtc99.html">Braga+99</a></td><td> Tropyc: A Pattern Language for Cryptographic Software</td></tr>
<tr><td><a href="BrantEtc99.html">Brant+99</a></td><td> Creating Reports with Query Objects</td></tr>
<tr><td><a href="Brown96.html">Brown96</a></td><td> Experiencing Patterns at the Design Level</td></tr>
<tr><td><a href="BrownEtc96b.html">Brown+96b</a></td><td> Crossing Chasms: A Pattern Language for Object-RDBMS Integration</td></tr>
<tr><td><a href="BrownEtc96a.html">Brown+96a</a></td><td> A Pattern Language for Smalltalk &amp; Relational Databases</td></tr>
<tr><td><a href="Buschmann95.html">Buschmann95</a></td><td> The Master-Slave Pattern</td></tr>
<tr><td><a href="Buschmann96.html">Buschmann96</a></td><td> Reflection</td></tr>
<tr><td><a href="BuschmannEtc96.html">Buschmann+96</a></td><td> Pattern-Oriented Sofware Archicture--A System of Patterns</td></tr>
<tr><td><a href="Cargill96.html">Cargill96</a></td><td> Localized Ownership: Managing Dynamic Objects in C++</td></tr>
<tr><td><a href="Carlson99.html">Carlson99</a></td><td> Essence</td></tr>
<tr><td><a href="CarlsonEtc99.html">Carlson+99</a></td><td> Temporal Patterns</td></tr>
<tr><td><a href="Carmichael98.html">Carmichael98</a></td><td> Applying Analysis Patterns in a Component Architecture</td></tr>
<tr><td><a href="Cerwin98.html">Cerwin98</a></td><td> Using the Mediator Design Pattern to Perform Multiplexing</td></tr>
<tr><td><a href="CleelandEtc98b.html">Cleeland+98b</a></td><td> External Polymorphism</td></tr>
<tr><td><a href="CleelandEtc98a.html">Cleeland+98a</a></td><td> External Polymorphism</td></tr>
<tr><td><a href="Cockburn96.html">Cockburn96</a></td><td> Prioritizing Forces in Software Design</td></tr>
<tr><td><a href="Cockburn98.html">Cockburn98</a></td><td> Surviving Object-Oriented Projects: A Manager's Guide</td></tr>
<tr><td><a href="Coad95.html">Coad95</a></td><td> Object Models: Strategies, Patterns, &amp; Applications</td></tr>
<tr><td><a href="Coplien92.html">Coplien92</a></td><td> Advanced C++ Programming Styles and Idioms</td></tr>
<tr><td><a href="Coplien94a.html">Coplien94a</a></td><td> Software Design Patterns: Common Questions and Answers</td></tr>
<tr><td><a href="Coplien94b.html">Coplien94b</a></td><td> Setting the Stage</td></tr>
<tr><td><a href="Coplien95a.html">Coplien95a</a></td><td> Curiously Recurring Template Patterns</td></tr>
<tr><td><a href="Coplien95b.html">Coplien95b</a></td><td> A Generative Development-Process Pattern Language</td></tr>
<tr><td><a href="Coplien97.html">Coplien97</a></td><td> A Pattern Language for Writers' Workshops</td></tr>
<tr><td><a href="Coplien99a.html">Coplien99a</a></td><td> More on the Geometry of C++ Objects, Part 1</td></tr>
<tr><td><a href="Coplien99b.html">Coplien99b</a></td><td> More on the Geometry of C++ Objects, Part 2</td></tr>
<tr><td><a href="Coplien99c.html">Coplien99c</a></td><td> C++ Idioms</td></tr>
<tr><td><a href="Coplien99d.html">Coplien99d</a></td><td> A Pattern Language for Writers' Workshops</td></tr>
<tr><td><a href="Coram96.html">Coram96</a></td><td> Demo Prep: A Pattern Language for the Preparation of Software Demonstrations</td></tr>
<tr><td><a href="Cunningham95.html">Cunningham95</a></td><td> CHECKS: A Pattern Language of Information Integrity</td></tr>
<tr><td><a href="Cunningham96.html">Cunningham96</a></td><td> EPISODES: A Pattern Language of Competitive Development</td></tr>
<tr><td><a href="CybulskiEtc99.html">Cybulski+99</a></td><td> Composing Multimedia Artifacts for Reuse</td></tr>
<tr><td><a href="DagermoEtc98.html">Dagermo+98</a></td><td> Development of an Object-Oriented Framework for Vessel Control Systems</td></tr>
<tr><td><a href="DasNevesEtc98.html">DasNeves+98</a></td><td> Bodyguard</td></tr>
<tr><td><a href="DeBruler95.html">DeBruler95</a></td><td> A Generative Pattern Language for Distributed Processing</td></tr>
<tr><td><a href="DeLanoEtc98.html">DeLano+98</a></td><td> Patterns for System Testing</td></tr>
<tr><td><a href="Doble96.html">Doble96</a></td><td> Shopper</td></tr>
<tr><td><a href="DobleEtc99.html">Doble+99</a></td><td> Smalltalk Scaffolding Patterns</td></tr>
<tr><td><a href="Duell98.html">Duell98</a></td><td> Experience in Applying Design Patterns to Decouple Object Interactions in the Ingage? IP Prototype</td></tr>
<tr><td><a href="DysonEtc98.html">Dyson+98</a></td><td> State Patterns</td></tr>
<tr><td><a href="Edwards95.html">Edwards95</a></td><td> Streams: A Pattern for &quot;Pull-Driven&quot; Processing</td></tr>
<tr><td><a href="FeilerEtc99.html">Feiler+99</a></td><td> Propagator: A Family of Patterns</td></tr>
<tr><td><a href="FooteEtc95.html">Foote+95</a></td><td> Life cycle and Refactoring Patterns that Support Evolution and Reuse</td></tr>
<tr><td><a href="FooteEtc96.html">Foote+96</a></td><td> Evolution, Architecture, and Metamorphosis</td></tr>
<tr><td><a href="FooteEtc98.html">Foote+98</a></td><td> The Selfish Class</td></tr>
<tr><td><a href="FooteEtc99.html">Foote+99</a></td><td> Big Ball of Mud</td></tr>
<tr><td><a href="FosterEtc97.html">Foster+97</a></td><td> A Pattern Language of Transport Systems (Point and Route)</td></tr>
<tr><td><a href="FosterEtc98.html">Foster+98</a></td><td> Modeling Transport Objects with Patterns</td></tr>
<tr><td><a href="FosterEtc99.html">Foster+99</a></td><td> Cascade</td></tr>
<tr><td><a href="Fowler96.html">Fowler96</a></td><td> Accountability and Organizational Structures</td></tr>
<tr><td><a href="Fowler97.html">Fowler97</a></td><td> Analysis Patterns</td></tr>
<tr><td><a href="Fowler98.html">Fowler98</a></td><td> Analysis Patterns</td></tr>
<tr><td><a href="GammaEtc95.html">Gamma+95</a></td><td> Design Patterns: Elements of Reusable Object-Oriented Systems</td></tr>
<tr><td><a href="Gamma98.html">Gamma98</a></td><td> Extension Object</td></tr>
<tr><td><a href="GammaEtc99.html">Gamma+99</a></td><td> JUnit: A Cook's Tour</td></tr>
<tr><td><a href="HanmerEtc99.html">Hanmer+99</a></td><td> An Input and Output Pattern Language</td></tr>
<tr><td><a href="Harrison96.html">Harrison96</a></td><td> Organizational Patterns for Teams</td></tr>
<tr><td><a href="Harrison98.html">Harrison98</a></td><td> Patterns for Logging Diagnostic Messages</td></tr>
<tr><td><a href="Hopley96.html">Hopley96</a></td><td> Decision Deferral and Capture Pattern Language</td></tr>
<tr><td><a href="HuniEtc95.html">H&uuml;ni+95</a></td><td> A Framework for Network Protocol Software</td></tr>
<tr><td><a href="IslamEtc96.html">Islam+96</a></td><td> An Essential Design Pattern for Fault-Tolerant Distributed State Sharing</td></tr>
<tr><td><a href="Jackson99.html">Jackson99</a></td><td> EventHandler: The Chain of Responsibility Pattern without Cyclic Link Dependencies</td></tr>
<tr><td><a href="JainEtc97.html">Jain+97</a></td><td> Dynamically Configuring Communication Services</td></tr>
<tr><td><a href="Janoff98.html">Janoff98</a></td><td> Organizational Patterns at AG Communication Systems</td></tr>
<tr><td><a href="Johnson94a.html">Johnson94a</a></td><td> Patterns of Thought: An Introduction to Patterns</td></tr>
<tr><td><a href="Johnson94b.html">Johnson94b</a></td><td> Patterns of Thought: How Patterns Work in Teams</td></tr>
<tr><td><a href="Johnson95.html">Johnson95</a></td><td> Patterns of Thought: Patterns and Frameworks</td></tr>
<tr><td><a href="Johnson96.html">Johnson96</a></td><td> Transactions and Accounts</td></tr>
<tr><td><a href="JohnsonEtc98.html">Johnson+98</a></td><td> Type Object</td></tr>
<tr><td><a href="KellerEtc98a.html">Keller+98a</a></td><td> A Pattern System for Network Management Interfaces</td></tr>
<tr><td><a href="KellerEtc98b.html">Keller+98b</a></td><td> Accessing Relational Databases</td></tr>
<tr><td><a href="Kerth95.html">Kerth95</a></td><td> Caterpillar's Fate: A Pattern Language for the Transformation from Analysis to Design</td></tr>
<tr><td><a href="KimEtc96.html">Kim+96</a></td><td> Implementation Patterns for the Observer Pattern</td></tr>
<tr><td><a href="KircherEtc99.html">Kircher+99</a></td><td> DOVE: A Distributed Object Visualization Environment</td></tr>
<tr><td><a href="LavenderEtc96.html">Lavender+96</a></td><td> Active Object: An Object Behavioral Pattern for Concurrent Programming</td></tr>
<tr><td><a href="Lea95.html">Lea95</a></td><td> Christopher Alexander: An Introduction for Object-Oriented Designers</td></tr>
<tr><td><a href="Lea00.html">Lea00</a></td><td> Concurrent Programming in Java, Second Edition: Design Principles and Patterns</td></tr>
<tr><td><a href="Long99.html">Long99</a></td><td> To Do Or Not To Do--That Is The Question</td></tr>
<tr><td><a href="Manolescu99.html">Manolescu99</a></td><td> Feature Extraction--A Pattern for Information Retrieval</td></tr>
<tr><td><a href="Martin95a.html">Martin95a</a></td><td> PLoP, PLoP, Fizz, Fizz</td></tr>
<tr><td><a href="Martin95b.html">Martin95b</a></td><td> Discovering Patterns in Existing Applications</td></tr>
<tr><td><a href="Martin95c.html">Martin95c</a></td><td> Button, Button, Who's Got the Button?</td></tr>
<tr><td><a href="Martin98.html">Martin98</a></td><td> Acyclic Visitor</td></tr>
<tr><td><a href="MartinEtc98.html">Martin+98</a></td><td> Object-Oriented Methods: A Foundation</td></tr>
<tr><td><a href="MasudaEtc98.html">Masuda+98</a></td><td> Applying Design Patterns to Decision Tree Learning System</td></tr>
<tr><td><a href="McKenney96a.html">McKenney96a</a></td><td> Selecting Locking Designs for Parallel Programs</td></tr>
<tr><td><a href="McKenney96b.html">McKenney96b</a></td><td> Selecting Locking Primitives for Parallel Programming</td></tr>
<tr><td><a href="Meszaros95.html">Meszaros95</a></td><td> Pattern: Half-Object + Protocol (HOPP)</td></tr>
<tr><td><a href="Meszaros96.html">Meszaros96</a></td><td> A Pattern Language for Improving the Capacity of Reactive Systems</td></tr>
<tr><td><a href="MeszarosEtc98.html">Meszaros+98</a></td><td> A Pattern Language for Pattern Writing</td></tr>
<tr><td><a href="Metsker98.html">Metsker98</a></td><td> The Judge Pattern: Ensuring the Relational Integrity of Objects</td></tr>
<tr><td><a href="Meunier95.html">Meunier95</a></td><td> The Pipes and Filters Architecture</td></tr>
<tr><td><a href="MolinEtc98.html">Molin+98</a></td><td> Points and Deviations: Pattern Language of Fire Alarm Systems</td></tr>
<tr><td><a href="Mularz95.html">Mularz95</a></td><td> Pattern-Based Integration Architectures</td></tr>
<tr><td><a href="Nierstrasz99.html">Nierstrasz99</a></td><td> Identify the Champion</td></tr>
<tr><td><a href="NobleEtc99.html">Noble+99</a></td><td> High-Level and Process Patterns from the Memory Preservation Society</td></tr>
<tr><td><a href="Noble99a.html">Noble99a</a></td><td> Basic Relationship Patterns</td></tr>
<tr><td><a href="Noble99b.html">Noble99b</a></td><td> The Prototype-Based Object System Pattern</td></tr>
<tr><td><a href="Nordberg98.html">Nordberg98</a></td><td> Default and Extrinsic Visitor</td></tr>
<tr><td><a href="Orenstein96.html">Orenstein96</a></td><td> A Pattern Language for an Essay-Based Web Site</td></tr>
<tr><td><a href="Olson98a.html">Olson98a</a></td><td> Patterns on the Fly</td></tr>
<tr><td><a href="Olson98b.html">Olson98b</a></td><td> A Pocket-Sized Broker</td></tr>
<tr><td><a href="Pang99.html">Pang99</a></td><td> A Pattern of Inheritance and Polymorphism for Persistent Objects Stored in a Relational Database</td></tr>
<tr><td><a href="Peterson95.html">Peterson95</a></td><td> Stars: A Pattern Language for Query-Optimized Schemas</td></tr>
<tr><td><a href="PHand.html">PHand</a></td><td> The Patterns Handbook</td></tr>
<tr><td><a href="Piehler99.html">Piehler99</a></td><td> Adapting Observer for Event-Driven Design</td></tr>
<tr><td><a href="PLoPD1.html">PLoPD1</a></td><td> Pattern Languages of Program Design</td></tr>
<tr><td><a href="PLoPD2.html">PLoPD2</a></td><td> Pattern Languages of Program Design 2</td></tr>
<tr><td><a href="PLoPD3.html">PLoPD3</a></td><td> Pattern Languages of Program Design 3</td></tr>
<tr><td><a href="PLoPD4.html">PLoPD4</a></td><td> Pattern Languages of Program Design 4</td></tr>
<tr><td><a href="Portner95.html">Portner95</a></td><td> Flexible Command Interpreter: A Pattern for an Extensible and Language-Independent Interpreter System</td></tr>
<tr><td><a href="Pree94.html">Pree94</a></td><td> Design Patterns for Object-Oriented Software Development</td></tr>
<tr><td><a href="PriceEtc99.html">Price+99</a></td><td> Using the Facade Pattern with CORBA</td></tr>
<tr><td><a href="Pryce99.html">Pryce99</a></td><td> Abstract Session</td></tr>
<tr><td><a href="PyaraliEtc98.html">Pyarali+98</a></td><td> Asynchronous Completion Token</td></tr>
<tr><td><a href="PyaraliEtc99.html">Pyarali+99</a></td><td> Proactor</td></tr>
<tr><td><a href="Ramirez95.html">Ramirez95</a></td><td> A Design Patterns Experience Report</td></tr>
<tr><td><a href="Ran95.html">Ran95</a></td><td> Patterns of Events</td></tr>
<tr><td><a href="Ran96.html">Ran96</a></td><td> MOODS: Models for Object-Oriented Design of State</td></tr>
<tr><td><a href="RiehleEtc95.html">Riehle+95</a></td><td> A Pattern Language for Tool Construction and Integration Based on the Tools and Materials Metaphor</td></tr>
<tr><td><a href="Riehle96a.html">Riehle96a</a></td><td> The Event Notification Pattern--Integrating Implicit Invocation with Object-Orientation</td></tr>
<tr><td><a href="Riehle96b.html">Riehle96b</a></td><td> Patterns for Encapsulating Class Trees</td></tr>
<tr><td><a href="Riehle98.html">Riehle98</a></td><td> Bureaucracy</td></tr>
<tr><td><a href="RiehleEtc98.html">Riehle+98</a></td><td> Serializer</td></tr>
<tr><td><a href="Rising99.html">Rising99</a></td><td> Customer Interaction Patterns</td></tr>
<tr><td><a href="RobertsEtc98.html">Roberts+98</a></td><td> Patterns for Evolving Frameworks</td></tr>
<tr><td><a href="Rohnert96.html">Rohnert96</a></td><td> The Proxy Design Pattern Revisited</td></tr>
<tr><td><a href="RossiEtc96.html">Rossi+96</a></td><td> Design Patterns for Object-Oriented Hypermedia Applications</td></tr>
<tr><td><a href="RossiEtc99.html">Rossi+99</a></td><td> Patterns for Designing Navigable Information Spaces</td></tr>
<tr><td><a href="Rubel95.html">Rubel95</a></td><td> Patterns for Generating a Layered Architecture</td></tr>
<tr><td><a href="SaneEtc96a.html">Sane+96a</a></td><td> Detachable Inspector/Removable cout: A Structural Pattern for Designing Transparent Layered Services</td></tr>
<tr><td><a href="SaneEtc96b.html">Sane+96b</a></td><td> Resource Exchanger: A Behavioral Pattern for Low-Overhead Concurrent Resource Management</td></tr>
<tr><td><a href="Schmid95.html">Schmid95</a></td><td> Creating the Architecture of a Manufacturing Framework by Design Patterns</td></tr>
<tr><td><a href="Schmid96.html">Schmid96</a></td><td> Creating Applications from Components: A Manufacturing Framework Design</td></tr>
<tr><td><a href="Schmidt95.html">Schmidt95</a></td><td> Reactor: An Object Behavioral Pattern for Concurrent Event Demultiplexing and Event Handler Dispatching</td></tr>
<tr><td><a href="SchmidtEtc95.html">Schmidt+95</a></td><td> Using Design Patterns to Evolve System Software from Unix to Windows NT</td></tr>
<tr><td><a href="Schmidt96a.html">Schmidt96a</a></td><td> A Family of Design Patterns for Flexibly Configuring Network Services in Distributed Systems</td></tr>
<tr><td><a href="Schmidt96b.html">Schmidt96b</a></td><td> A Family of Design Patterns for Application-Level Gateways</td></tr>
<tr><td><a href="SchmidtEtc96.html">Schmidt+96</a></td><td> Half-Sync/Half-Async: An Architectural Pattern for Efficient and Well-Structured Concurrent I/O</td></tr>
<tr><td><a href="Schmidt97.html">Schmidt97</a></td><td> Applying Design Patterns and Frameworks to Develop Object-Oriented Communication Software</td></tr>
<tr><td><a href="Schmidt98a.html">Schmidt98a</a></td><td> Applying Design Patterns to Simplify Signal Handling</td></tr>
<tr><td><a href="Schmidt98b.html">Schmidt98b</a></td><td> Acceptor and Connector</td></tr>
<tr><td><a href="SchmidtEtc98.html">Schmidt+98</a></td><td> Double-Checked Locking</td></tr>
<tr><td><a href="Schmidt99.html">Schmidt99</a></td><td> Wrapper Facade</td></tr>
<tr><td><a href="SchmidtEtc99.html">Schmidt+99</a></td><td> Thread-Specific Storage for C/C++: An Object Behavioral Pattern for Accessing per-Thread State Efficiently</td></tr>
<tr><td><a href="Selic98.html">Selic98</a></td><td> Recursive Control</td></tr>
<tr><td><a href="Shaw95.html">Shaw95</a></td><td> Patterns for Software Architectures</td></tr>
<tr><td><a href="ShawEtc96.html">Shaw+96</a></td><td> Software Architecture</td></tr>
<tr><td><a href="Shaw96.html">Shaw96</a></td><td> Some Patterns for Software Architectures</td></tr>
<tr><td><a href="SilvaEtc98.html">Silva+98</a></td><td> Object Recovery</td></tr>
<tr><td><a href="SilvaEtc99.html">Silva+99</a></td><td> Object Synchronizer: A Design Pattern for Object Synchronization</td></tr>
<tr><td><a href="Sommerlad96.html">Sommerlad96</a></td><td> Command Processor</td></tr>
<tr><td><a href="SommerladEtc96.html">Sommerlad+96</a></td><td> The Client-Dispatcher-Server Design Pattern</td></tr>
<tr><td><a href="Sommerlad98.html">Sommerlad98</a></td><td> Manager</td></tr>
<tr><td><a href="Soukup95.html">Soukup95</a></td><td> Implementing Patterns</td></tr>
<tr><td><a href="Spall98.html">Spall98</a></td><td> Panel States: A User Interface Design Pattern</td></tr>
<tr><td><a href="Srinivasan99.html">Srinivasan99</a></td><td> Design Patterns in Object-Oriented Frameworks</td></tr>
<tr><td><a href="SubramanianEtc96.html">Subramanian+96</a></td><td> Backup Pattern: Designing Redundancy in Object-Oriented Software</td></tr>
<tr><td><a href="Taylor99.html">Taylor99</a></td><td> Capable, Productive, and Satisfied</td></tr>
<tr><td><a href="Towell95.html">Towell95</a></td><td> Request Screen Modification</td></tr>
<tr><td><a href="Towell99.html">Towell99</a></td><td> Display Maintenance</td></tr>
<tr><td><a href="VandenBroeckeEtc97.html">VandenBroecke+97</a></td><td> Using Design Patterns to Build a Framework for Multimedia Networking</td></tr>
<tr><td><a href="Viljamaa95.html">Viljamaa95</a></td><td> Client-Specified Self</td></tr>
<tr><td><a href="Vlissides95.html">Vlissides95</a></td><td> Pattern Hatching--Perspectives from the `Gang of Four'</td></tr>
<tr><td><a href="Vlissides98a.html">Vlissides98a</a></td><td> Pattern Hatching</td></tr>
<tr><td><a href="Vlissides98b.html">Vlissides98b</a></td><td> Pluggable Factory, Part 1</td></tr>
<tr><td><a href="Vlissides99.html">Vlissides99</a></td><td> Pluggable Factory, Part 2</td></tr>
<tr><td><a href="Wake95.html">Wake95</a></td><td> Account Number: A Pattern</td></tr>
<tr><td><a href="WakeEtc96.html">Wake+96</a></td><td> Improving Responsiveness in Interactive Applications Using Queues</td></tr>
<tr><td><a href="Wallingford98.html">Wallingford98</a></td><td> Sponsor-Selector</td></tr>
<tr><td><a href="Weir98.html">Weir98</a></td><td> Patterns for Designing in Teams</td></tr>
<tr><td><a href="White96.html">White96</a></td><td> Patterns and Java Class Libraries</td></tr>
<tr><td><a href="Whitenack95.html">Whitenack95</a></td><td> RAPPeL: A Requirements-Analysis Process Pattern Language for Object-Oriented Development</td></tr>
<tr><td><a href="WirfsBrock93.html">Wirfs-Brock93</a></td><td> Characterizing Your Objects</td></tr>
<tr><td><a href="WolfEtc95.html">Wolf+95</a></td><td> New Clients with Old Servers: A Pattern Language for Client/Server Frameworks</td></tr>
<tr><td><a href="Woodward96.html">Woodward96</a></td><td> Heading Off Tragedy: Using Design Patterns Against a Moving Target</td></tr>
<tr><td><a href="Woolf95.html">Woolf95</a></td><td> Understanding and Using the ValueModel Framework in VisualWorks Smalltalk</td></tr>
<tr><td><a href="Woolf96.html">Woolf96</a></td><td> Partitioning Smalltalk Code into ENVY/Developer Components</td></tr>
<tr><td><a href="Woolf98.html">Woolf98</a></td><td> Null Object</td></tr>
<tr><td><a href="Woolf99a.html">Woolf99a</a></td><td> The Abstract Class Pattern</td></tr>
<tr><td><a href="Woolf99b.html">Woolf99b</a></td><td> Object Recursion</td></tr>
<tr><td><a href="YacoubEtc99.html">Yacoub+99</a></td><td> Finite State Machine Patterns</td></tr>
<tr><td><a href="YoderEtc99.html">Yoder+99</a></td><td> Architectural Patterns for Enabling Application Security</td></tr>
<tr><td><a href="ZhangEtc96a.html">Zhang+96a</a></td><td> Financial Software Design Patterns</td></tr>
<tr><td><a href="ZhangEtc96b.html">Zhang+96b</a></td><td> Financial Software Design Patterns</td></tr>
<tr><td><a href="ZhangEtc96c.html">Zhang+96c</a></td><td> Financial Software Design Patterns</td></tr>
<tr><td><a href="ZhaoEtc98a.html">Zhao+98a</a></td><td> Driver Duty: A Pattern for Public Transport Systems</td></tr>
<tr><td><a href="ZhaoEtc98b.html">Zhao+98b</a></td><td> A Pattern Language of Transport Systems (Point and Route)</td></tr>
<tr><td><a href="ZhaoEtc99.html">Zhao+99</a></td><td> Driver Duty Constructor: A Pattern for Public Transport Systems</td></tr>
</table>