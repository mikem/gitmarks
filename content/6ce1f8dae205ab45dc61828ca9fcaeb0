
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="blogcatalog" content="9BC9576352" /><title>Nicholas Piël &raquo; ZeroMQ an introduction</title><meta name="generator" content="WordPress 2.9.2" /><meta name="google-site-verification" content="V0rsR0OMry9F77INlHeOpt503cWjrR5XLVxL6tCLnos" /><link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="http://nichol.as/feed" /><link rel="alternate" type="text/xml" title="RSS .92" href="http://nichol.as/feed/rss" /><link rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://nichol.as/feed/atom" /><link rel="pingback" href="http://nichol.as/xmlrpc.php" /><link rel='archives' title='June 2010' href='http://nichol.as/2010/06' /><link rel='archives' title='March 2010' href='http://nichol.as/2010/03' /><link rel='archives' title='December 2009' href='http://nichol.as/2009/12' /><link rel='archives' title='November 2009' href='http://nichol.as/2009/11' /><link rel="alternate" type="application/rss+xml" title="Nicholas Piël &raquo; ZeroMQ an introduction Comments Feed" href="http://nichol.as/zeromq-an-introduction/feed" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://nichol.as/xmlrpc.php?rsd" /><link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://nichol.as/wp-includes/wlwmanifest.xml" /><link rel='index' title='Nicholas Piël' href='http://nichol.as' /><link rel='start' title='Hello world!' href='http://nichol.as/hello-world' /><link rel='prev' title='Benchmark of Python WSGI Servers' href='http://nichol.as/benchmark-of-python-web-servers' /><meta name="generator" content="WordPress 2.9.2" /><link rel='canonical' href='http://nichol.as/zeromq-an-introduction' /><meta name="description" content="ZeroMQ is a super fast and lightweight messaging library, allowing you to design a complex communication system without much effort." /><meta name="keywords" content="python,performance,async,zeromq,programming,messaging,rabbitmq,pubsub,broadcast,scalability,distributed,0mq,communication system,middleware,comet,websockets,mongrel2" /><meta http-equiv="X-XRDS-Location" content="http://nichol.as/?xrds" /><meta http-equiv="X-Yadis-Location" content="http://nichol.as/?xrds" /><meta id="syntaxhighlighteranchor" name="syntaxhighlighter-version" content="3.1.1" />  <script type="text/javascript">var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-11637715-1']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	})();</script> <!--[if lt IE7]><link rel="stylesheet" href="http://nichol.as/wp-content/themes/freshy2/fix-ie.php" type="text/css" media="screen"/> <![endif]--> <!--[if IE]><![endif]--><link type="text/css" media="screen" href="http://nichol.as/wp-content/cache/autoptimize/autoptimize_.css" rel="stylesheet" /><link type="text/css" media="all" href="http://nichol.as/wp-content/cache/autoptimize/autoptimize_.css" rel="stylesheet" /></head><body><div id="body"><div id="header"><div class="container"><div id="title"><h1> <a href="http://nichol.as"> <span>Nicholas <b>Piël</b></span> </a></h1><div class="description"> <small></small></div></div><div id="header_image"><div id="menu"><div class="menu_container"><ul><li class=""> <a href="http://nichol.as"> Home </a></li><li class="page_item page-item-2"><a href="http://nichol.as/about" title="About">About</a></li><li class="page_item page-item-18"><a href="http://nichol.as/projects" title="Projects">Projects</a></li></ul></div><span class="menu_end"></span></div></div></div></div><div id="page" class=" sidebar_right"><div class="container"><div id="frame"><div id="content"><div class="post" id="post-606"><h2>ZeroMQ an introduction</h2><small class="author">Nicholas Piël</small> <small class="date">| June 23, 2010</small><div class="entry"><p><a href="http://www.zeromq.org/">ZeroMQ</a> is a messaging library, which allows you to design a complex communication system without much effort. It has been wrestling with how to effectively describe itself in the recent years. In the beginning it was introduced as &#8216;messaging middleware&#8217; later they moved to &#8216;TCP on steroids&#8217; and right now it is a &#8216;new layer on the networking stack&#8217;.</p><p><img class="size-medium wp-image-618 alignright" title="zeromq" src="http://nichol.as/wp-content/uploads/2010/06/zeromq1-300x115.png" alt="" width="126" height="48" /></p><p>I had some trouble understanding ZeroMQ at first and really had to reset my brain. First of all, it is not a complete messaging system such as <a href="http://www.rabbitmq.com/">RabbitMQ</a> or <a href="http://activemq.apache.org/">ActiveMQ</a>. I know the guys of Linden Research <a href="http://wiki.secondlife.com/wiki/Message_Queue_Evaluation_Notes">compared them</a>, but it is apples and oranges. A full fledged messaging system gives you an out of the box experience.  Unwrap it, configure it, start it up and you&#8217;re good to go once you have figured out all its complexities.</p><p>ZeroMQ is not such a system at all; it is a simple messaging library to be used programmatically. It basically gives you a pimped socket interface allowing you to quickly build your own messaging system.</p><h2>Float like a butterfly, sting like a bee</h2><p>But why use ZeroMQ and not just use the low level Berkeley socket interface or a high level messaging system? I think the answer is balance. You probably want the flexibility and performance of the low level while still having the ease of implementation of the high level. However, maintaining raw sockets is difficult and cumbersome when you want to implement a scalable system. A high level system often works perfect if you use it for the situation it was designed for, but it can be difficult to change core elements of the system and its ease of use often comes with a cost in performance. This isn&#8217;t a problem that is limited to messaging systems only. We can see the previous dilemma also in web frameworks; it could very well be that this is exactly the reason why &#8216;Micro Frameworks&#8217; gain in popularity.</p><p>I believe that ZeroMQ perfectly fits this gap between the high and the low level, so what are its features?</p><h3>Performance</h3><p>ZeroMQ is blazing fast.  It is orders of magnitude faster than most AMQP messaging systems and it can obtain this high performance because of the following techniques:</p><ul><li>It does not have the overhead of an over-engineered protocol such as AMQP</li><li>It can make use of efficient transports such as <a title="Pragmatic General Multicast" href="http://en.wikipedia.org/wiki/Pragmatic_General_Multicast">reliable Multicast</a> or the<a href="http://www.zeromq.org/whitepapers:y-suite"> Y-suite IPC transport</a></li><li>It makes use of <a href="http://www.zeromq.org/whitepapers:design-v01#toc10">intelligent message batching</a>. This allows 0MQ to efficiently utilize a TCP/IP connection by minimizing not only protocol overhead but also system calls.</li></ul><h3>Simplicity</h3><p>The API is deceptively simple, and it makes sending messages really simple compared with a raw socket implementation where you have to continuously &#8216;feed&#8217; the socket buffer. In ZeroMQ you can just fire off an async send call, it will queue the message in a separate thread and do all the work for you.  Because of this async nature, your application does not have to waste time waiting until the message has been flushed.  The async nature of 0MQ makes it a perfect companion for an event-based framework.</p><p>ZeroMQ&#8217;s simple wire protocol fits perfectly in the current time setting where we have lots of different transport protocols. With AMQP it always felt a bit weird to use an extra protocol layer on top. 0MQ gives you complete freedom on how you encode your message, as it will just interpret it as a blob. So you can send simple <a href="http://www.json.org/">JSON</a> messages, go the binary route with for example <a href="http://bsonspec.org/">BSON</a>, <a href="http://code.google.com/p/protobuf/">Protocol Buffers</a> or <a href="http://incubator.apache.org/thrift/">Thrift</a> and all this without feeling <a href="http://nichol.as/wp-content/uploads/2010/06/guilty-puppy.jpg">guilty</a>.</p><h3>Scalability</h3><p>While ZeroMQ sockets look low level they provide lots of features. A single ZeroMQ socket can for example connect to multiple end points and automatically load balance messages over them. Or it can work as some sort of Fan-In, collecting messages from multiple sources through a single socket.</p><p>ZeroMQ  follows a <a href="http://www.zeromq.org/whitepapers:brokerless">brokerless design</a> so that there is no single point of failure. Combine this with its simplicity and performance and you get something that you can use to make your application distributed.</p><h2>Implementing a messaging layer with ZeroMQ</h2><p>In the next section I will show how to design and implement a messaging layer with ZeroMQ.  For the code example I will use Brian Granger&#8217;s <a href="http://github.com/zeromq/pyzmq">PyZMQ</a>, which is the excellent Python binding to ZeroMQ.</p><p>Implementing a ZeroMQ messaging layer is a three-step approach:</p><ol><li>Choose a transport</li><li>Set up the infrastructure</li><li>Select a messaging pattern</li></ol><h3>Choosing a transport</h3><p>The first step is to choosing a transport. ZeroMQ provides 4 different transports:</p><ol><li><em><a href="http://api.zeromq.org/zmq_inproc.html">INPROC</a></em> an In-Process communication model</li><li><em><a href="http://api.zeromq.org/zmq_ipc.html">IPC</a></em> an Inter-Process communication model</li><li><em><a href="http://api.zeromq.org/zmq_pgm.html">MULTICAST</a></em> multicast via PGM, possibly encapsulated in UDP</li><li><em><a href="http://api.zeromq.org/zmq_tcp.html">TCP</a></em> a network based transport</li></ol><p>The <em>TCP</em> transport is often the best choice, it is very performant and robust. However, when there is no need to cross the machine border it can be interesting to look at the <em>IPC</em> or <em>INPROC</em> protocol to lower the latency even more. The <em>MULTICAST</em> transport can be interesting in special cases. But personally, I am a bit careful with applying multicast, as it is difficult to understand how it will behave when scaling up. Think of issues such as figuring out how many multicast groups you can create with this or that hardware and how much stress it is going to put on the different switches in your network. If you want to be sure that your code runs cross platforms it is probably best to go with <em>TCP</em> as the other transports are not guaranteed to be available on the different platforms.</p><h3>Setting up the infrastructure</h3><p>When you have decided upon your transport you will have to think about how the different components are connected to each other. It is simply answering the question: &#8220;Who connects to whom?&#8221;  You probably want the most stable part of the network to <em><a href="http://api.zeromq.org/zmq_bind.html">BIND</a></em> on a specific port and have the more dynamic parts <em><a href="http://api.zeromq.org/zmq_connect.html">CONNECT</a></em> to that. In the image below we have depicted how a server binds to a certain port and how a client connects to it.</p><p style="text-align: center;"><a href="http://nichol.as/wp-content/uploads/2010/06/cs.png"><img class="size-full wp-image-682  aligncenter" title="cs" src="http://nichol.as/wp-content/uploads/2010/06/cs.png" alt="" width="256" height="64" /></a></p><p>It is possible that both ends of the networks are relatively  dynamic so that it is difficult to have a single stable connection point. If this is the case, you could make use of the forwarding devices that ZeroMQ provides.  These devices can bind to 2 different ports and forward messages from one end to the other. By doing so, the forwarding device can become the stable point in your network where each component can connect to.  ZeroMQ provides three kinds of devices:</p><ol><li><em><a href="http://api.zeromq.org/zmq_queue.html">QUEUE</a></em>, a forwarder for the request/response messaging pattern</li><li><em><a href="http://api.zeromq.org/zmq_forwarder.html">FORWARDER</a>, </em>a forwarder for the publish/subscribe messaging pattern</li><li><em><a href="http://api.zeromq.org/zmq_streamer.html">STREAMER</a>, </em>a forwarder for the pipelined messaging pattern</li></ol><p>In the image below we can see such a device being used, in this situation both the client and the server initialize a connection to the forwarder, which binds to two different ports. Using such a device will remove the need of extra application logic, as you will not need to maintain a list of connected peers.</p><p style="text-align: center;"><a href="http://nichol.as/wp-content/uploads/2010/06/cfs.png"><img class="size-full wp-image-683  aligncenter" title="cfs" src="http://nichol.as/wp-content/uploads/2010/06/cfs.png" alt="" width="364" height="64" /></a></p><h3>Selecting a message pattern</h3><p>The previous steps build the infrastructure but did not specify the message flow. The next step is to think carefully about the message pattern each component should follow. The patterns that 0MQ supports are:</p><ol><li><em><a href="http://api.zeromq.org/zmq_socket.html#_request_reply_pattern">REQUEST/REPLY</a>, </em>bidirectional, load balanced and state based</li><li><em><a href="http://api.zeromq.org/zmq_socket.html#_publish_subscribe_pattern">PUBLISH/SUBSCRIBE</a>, </em>publish to multiple recipients at once</li><li><em><a href="http://api.zeromq.org/zmq_socket.html#_pipeline_pattern">UPSTREAM / DOWNSTREAM</a>, </em>distribute data to nodes arranged in a pipeline</li><li><em><a href="http://api.zeromq.org/zmq_socket.html#_exclusive_pair_pattern">PAIR</a>, </em>communication exclusively between peers</li></ol><p style="text-align: left;">I will explain them a bit more below.</p><p><br/><br/></p><h4>Request Reply</h4><p><a href="http://nichol.as/wp-content/uploads/2010/06/reqrep1.png"><img class="alignleft size-full wp-image-691" title="reqrep" src="http://nichol.as/wp-content/uploads/2010/06/reqrep1.png" alt="" width="235" height="184" /></a>The request reply paradigm is very common and can be found in most type of servers. For example: HTTP, POP or IMAP. This pattern has a certain state associated with it as a request has to be followed by a reply. The client uses a socket of type <em>REQ</em> as it will initiate the request by performing a .<strong>send()</strong> on the socket. The server uses a socket of type <em>REP, </em>and it will start by performing a<strong> .recv() </strong>to read the incoming request, after which it can send its reply.</p><p>ZeroMQ greatly simplifies this pattern by allowing you to have a single socket connect to multiple end points. ZeroMQ will automatically balance requests over the different peers.</p><p>The Python code below will create an echo server that listens on port 5000 with a <em>REP</em> socket. It will then loop an alternation of performing <strong>.recv()</strong> for incoming requests and then <strong>.send() </strong>a reply to them.</p><pre class="brush: python; title: ;" title="">
import zmq
context = zmq.Context()
socket = context.socket(zmq.REP)
socket.bind("tcp://127.0.0.1:5000")

while True:
    msg = socket.recv()
    print "Got", msg
    socket.send(msg)
</pre><p>When you have multiple clients connected to this server the ZMQ socket will fair queue between all incoming requests. Now, if you want your client to be able to connect to multiple servers as well, you can take the above code, change port 5000 to 6000 and use it to run an extra server. The following client code will then be able to use both of the servers:</p><pre class="brush: python; title: ;" title="">
import zmq
context = zmq.Context()
socket = context.socket(zmq.REQ)
socket.connect("tcp://127.0.0.1:5000")
socket.connect("tcp://127.0.0.1:6000")

for i in range(10):
    msg = "msg %s" % i
    socket.send(msg)
    print "Sending", msg
    msg_in = socket.recv()
</pre><p>The above sends 10 requests in total but since we are connected to 2 different servers, each server only has to handle 5 requests. Isn&#8217;t that great? With only a few lines of code we were able to create a distributed client/server model.</p><p>Now, if we want to add an extra server to handle our requests we will have to adjust our code. This can be cumbersome as we need to do this for all our clients to let them know it can now balance the requests over an extra server.</p><p><img class="alignright size-full wp-image-684" title="queue" src="http://nichol.as/wp-content/uploads/2010/06/queue.png" alt="" width="235" height="206" /></p><p>This is exactly where the ZeroMQ devices fit in. Instead of having the clients connect directly to multiple servers it can connect to a single forwarding device. The forwarding device will then reroute all messages to the connected servers.</p><p>Example client output:</p><blockquote><p>Sending msg 0<br /> Sending msg 1<br /> Sending msg 2<br /> Sending msg 3<br /> Sending msg 4<br /> Sending msg 5<br /> Sending msg 6<br /> Sending msg 7<br /> Sending msg 8<br /> Sending msg 9</p></blockquote><p>Example output server 1 at port 5000:</p><blockquote><p>Got msg 0<br /> Got msg 2<br /> Got msg 4<br /> Got msg 6<br /> Got msg 8</p></blockquote><p>Example output server 2 at port 6000:</p><blockquote><p>Got msg 1<br /> Got msg 3<br /> Got msg 5<br /> Got msg 7<br /> Got msg 9</p></blockquote><p><br/><br/></p><h4>Publish Subscribe</h4><p><a href="http://nichol.as/wp-content/uploads/2010/06/broadcast.png"><img class="size-full wp-image-673 alignleft" title="broadcast" src="http://nichol.as/wp-content/uploads/2010/06/broadcast.png" alt="" width="233" height="180" /></a>The Pub/Sub paradigm has gained lots of interest the last few years. You can think of things such as message pushing, XMPP or webhooks. In a pub/sub pattern the components are loosely coupled. This will greatly help you to scale out as there is no need to worry about the subscribers. However, this loose coupling can also lead to unexpected behavior when not fully understood.  A nice metaphor for the Pub/Sub paradigm is thinking of it is a radio station. When you publish messages you send something over a certain frequency, only listeners that have subscribed to that frequency will receive the signal. But also, just as with a radio, if you tuned in to the station after the broadcast you will miss the show.</p><p>It is good to stress that the various message patterns have no coupling with the infrastructure. It is thus possible to bind to a port and publish to the peers that connect to it. But it is also possible to do it the other way around, connect to multiple peers and broadcast to them. The first example resembles the radio metaphor (everybody can tune in), while the second one more resembles yelling at your peers through a megaphone (a selected group). In both situations your peers can decide not to listen to your messages by not subscribing to them.</p><p>The following code shows how you could create a broadcasting server for live soccer events:</p><pre class="brush: python; title: ;" title="">
import zmq
from random import choice
context = zmq.Context()
socket = context.socket(zmq.PUB)
socket.bind(&quot;tcp://127.0.0.1:5000&quot;)

countries = ['netherlands','brazil','germany','portugal']
events = ['yellow card', 'red card', 'goal', 'corner', 'foul']

while True:
    msg = choice( countries ) +&quot; &quot;+ choice( events )
    print &quot;-&gt;&quot;,msg
    socket.send( msg )
</pre><p>The server will generate an unlimited amount of events for the different countries and pushes them over a socket of type <em>PUB</em>. Below you can find some example output:</p><blockquote><p>-> portugal corner<br /> -> portugal yellow card<br /> -> portugal goal<br /> -> netherlands yellow card<br /> -> germany yellow card<br /> -> brazil yellow card<br /> -> portugal goal<br /> -> germany corner<br /> &#8230;</p></blockquote><p>Now if we are only interested in events concerning The Netherlands and Germany we can create a client that subscribes to those specific messages:</p><pre class="brush: python; title: ;" title="">
import zmq

context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect("tcp://127.0.0.1:5000")
socket.setsockopt(zmq.SUBSCRIBE, "netherlands")
socket.setsockopt(zmq.SUBSCRIBE, "germany")

while True:
    print  socket.recv()
</pre><p>The client will create a <em>SUB</em> socket, connect to our broadcast server at port 5000 and subscribe to messages starting with &#8216;netherlands&#8217; or &#8216;germany&#8217;. The output will look something like this:</p><blockquote><p>netherlands red card<br /> netherlands goal<br /> netherlands red card<br /> germany foul<br /> netherlands yellow card<br /> germany foul<br /> netherlands goal<br /> netherlands corner<br /> germany foul<br /> netherlands corner<br /> &#8230;</p></blockquote><p><br/><br/></p><h4>Pipelining</h4><p><a href="http://nichol.as/wp-content/uploads/2010/06/pipeline2.png"><img class="size-full wp-image-686 alignleft" title="pipeline2" src="http://nichol.as/wp-content/uploads/2010/06/pipeline2.png" alt="" width="233" height="283" /></a>The pipeline pattern looks remarkably similar to the Rep/Req pattern, the difference is that instead of requiring a reply being sent to the requester the reply can be pushed down the pipe. This is a paradigm commonly seen when there is a need to process data  in parallel. For example, lets say we have some sort of system that does face recognition. We have a job server that pushes the images to one of the workers, which will then process it, once finished it will then push it down the stream again towards some sort of collector.</p><p>In the design at the left we can see that a worker will receive its message from an <em>UPSTREAM</em> socket and once they are processed sends them <em>DOWNSTREAM</em>. It routes messages from two different socket types.</p><p>The jobserver can just keep pushing tasks <em>DOWNSTREAM </em>through a single socket but with multiple endpoints. ZeroMQ and recently also PyZMQ can send the messages in a zero-copy manner. This is great if you need to push large messages around and you don&#8217;t want to waste IO cycles.</p><p><br/><br/></p><h4>Paired sockets</h4><p><a href="http://nichol.as/wp-content/uploads/2010/06/paired.png"><img class="size-full wp-image-668 alignleft" title="paired" src="http://nichol.as/wp-content/uploads/2010/06/paired.png" alt="" width="166" height="189" /></a>Paired sockets are very similar to regular sockets as the communication is bidirectional, there is no specific state stored within the socket and there can only be one connected peer. Most real life problems can be captured in one of the previously explained patterns and I want to recommend that you look at them first before applying this one as it will simplify your problem.</p><p>The figure at the left depicts the infrastructure of a paired socket, the server listens on a certain port and a client connects to it. The red lines indicate the flow of messages, in this pattern both endpoints use a socket of type <em>PAIR</em> and as you can see the messages can flow bidirectional.</p><p>The following code shows how to implement such a thing.  We will bind to a port on one end:</p><pre class="brush: python; title: ;" title="">
import zmq
context = zmq.Context()
socket = context.socket(zmq.PAIR)
socket.bind("tcp://127.0.0.1:5555")
</pre><p>And on the other end where we will connect to it.</p><pre class="brush: python; title: ;" title="">
import zmq
context = zmq.Context()
socket = context.socket(zmq.PAIR)
socket.connect("tcp://127.0.0.1:5555")
</pre><p><br/></p><h3>ZeroMQ and the future</h3><p>In this post I have given a short introduction to ZeroMQ, I hope that at this point you will now share my ideas about what a great little library it is. But while the library may feel small it has a grand vision of being <em>the new messaging layer</em>. And really, it is not that weird when you come to think of it. Scalability issues are mostly just communication and portability issues, ZeroMQ can solve these problems for you.</p><p>Lets say you want to create some new sort of database because Redis, Cassandra, TokyoTyrant, Postgres, MongoDB, DabbleDB, CouchDB, HBase, etc. just don&#8217;t serve your needs that well. You create an amazing in memory tree representation for your data and have a blazing fast indexer. Now all you need is some sort of messaging layer such that different clients can talk to your server. Preferably implemented in different programming language and with clustering capabilities.  You could of course create such a messaging framework all by yourself, but that is a lot of hard work.</p><p>A simple solution is to just implement your database as a ZeroMQ server and pick a message protocol (fe JSON). As you have seen by now, implementing such functionality with ZeroMQ is really easy and on top of this you will get almost instant scalability because of the way ZeroMQ can route messages. It will also make it incredibly easy to implement different clients that will communicate with your server.  Basically all you need to do is pick one of the 15 available language bindings, use the same message protocol and you&#8217;re done. Currently the following languages have a ZeroMQ binding: Ada, C, C++, Common Lisp, Erlang, Go, Haskell, Java, Lua, .NET, OOC, Perl, PHP, Python and Ruby.</p><p><a href="http://www.zeromq.org/">ZeroMQ</a> could very well be the new way in how we connect our components. A good example of someone who understands the possibilities of ZeroMQ is Zed Shaw as can be seen with his recent project <a href="http://mongrel2.org/index">Mongrel2</a>. You can use Mongrel2 to bridge the gap between a regular HTTP client and a ZeroMQ component. If you don&#8217;t immediately see how awesome this is you probably have never worked with websockets, comet or flash based sockets. Another way to look at the great possibilities of such an implementation is to think of Facebook&#8217;s <a href="http://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919">BigPipe</a> where each Pagelet can transparantly be generated by a different component connected with 0MQ.</p></div></div><div class="meta"><dl><dt>Tags</dt><dd><a href="http://nichol.as/tags/programming" rel="tag">programming</a>, <a href="http://nichol.as/tags/python" rel="tag">Python</a>, <a href="http://nichol.as/tags/scalability" rel="tag">scalability</a>, <a href="http://nichol.as/tags/zeromq" rel="tag">zeromq</a></dd><dt><a href='http://nichol.as/zeromq-an-introduction/feed'>RSS comments feed</a></dt></dl></div><p class="navigation"> <span class="alignleft">&laquo; <a href="http://nichol.as/benchmark-of-python-web-servers" rel="prev">Benchmark of Python WSGI Servers</a></span> <span class="alignright"></span> <br style="clear:both"/></p><h3 id="comments">46 Responses to &#8220;ZeroMQ an introduction&#8221;</h3><div class="navigation"><div class="alignleft"></div><div class="alignright"></div></div><ol class="commentlist"><li class="pingback even thread-even depth-1" id="comment-2985"><div id="div-comment-2985" class="comment-body"><div class="comment-author vcard"><cite class="fn"><a href='http://topsy.com/nichol.as/zeromq-an-introduction?utm_source=pingback&amp;utm_campaign=L2' rel='external nofollow' class='url'>Tweets that mention Nicholas Piël » ZeroMQ an introduction -- Topsy.com</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-2985">June 23, 2010 at 11:53 am</a></div><p>[...] This post was mentioned on Twitter by Igor and zeromq, Pieter Hintjens. Pieter Hintjens said: @nichol4s &quot;ZeroMQ an introduction&quot; <a href="http://bit.ly/cUUjF1" rel="nofollow">http://bit.ly/cUUjF1</a> &#8211; excellent intro to #ZeroMQ and why its the new way to connect our components. [...]</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=2985#respond' onclick='return addComment.moveForm("div-comment-2985", "2985", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2989"><div id="div-comment-2989" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face2.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://www.johndapps.com/' rel='external nofollow' class='url'>John Apps</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-2989">June 23, 2010 at 12:58 pm</a></div><p>Many thanks for an excellent article!</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=2989#respond' onclick='return addComment.moveForm("div-comment-2989", "2989", "respond", "606")'>Reply</a></div></div></li><li class="comment even thread-even depth-1 parent" id="comment-2992"><div id="div-comment-2992" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face14.jpg' class='avatar avatar-32 photo avatar-default' height='32' width='32' /><cite class="fn"><a href='http://benford.myopenid.com/' rel='external nofollow' class='openid_link url'>Ben Ford</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-2992">June 23, 2010 at 2:46 pm</a></div><p>Excellent write up Nicholas!</p><p>I&#8217;ve recently been playing with redis&#8217; new publish subscribe support in preference to rabbitmq, are you going to be doing another of your brilliant benchmarks?</p><p>Cheers,<br /> Ben</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=2992#respond' onclick='return addComment.moveForm("div-comment-2992", "2992", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="comment-2996"><div id="div-comment-2996" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-2996">June 23, 2010 at 3:28 pm</a></div><p>Thanks <img src='http://nichol.as/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /></p><p>I have been thinking about that, but it would not really be fair. The three are radically different, ZeroMQ will give you the greatest messaging performance, no doubt about that, but it doesn’t support message persistence.</p><p>I love Redis but I personally would not use it for realtime Pub/Sub because you will pay in performance and it is not really clear to me how you would route your messages in a more distributed setup. I do think however, that Redis would make an excellent in memory Queue for when you are not interested in realtime performance.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=2996#respond' onclick='return addComment.moveForm("div-comment-2996", "2996", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="comment even thread-odd thread-alt depth-1 parent" id="comment-2997"><div id="div-comment-2997" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/872d600cf9edee6ec4680b5407a52638.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://www.startinchina.com' rel='external nofollow' class='url'>Thijs (Shenzhen)</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-2997">June 23, 2010 at 3:42 pm</a></div><p>Nice article! We&#8217;ve been looking (detailedly) at ZeroMQ as well, and although we really like the ideas, there are a few drawbacks (imho) that are not mentioned in your article:</p><p>1. The source code of ZeroMQ is quite difficult to understand! Many concepts, inheritances, relations etc.<br /> 2. Many things are not yet finished or are being changed currently.<br /> 3. It&#8217;s possible that a REQ hangs forever and there is currently no elegant way to solve this (ZeroMQ guys are aware of this, see point 2)<br /> 4. Though there are many clients, they are not all fully functional clients. I looked at the Erlang client and it&#8217;s so-so.<br /> 5. There is quite a long time between releases, which is understandable since only very few people work on the actual code<br /> 6. There are many assert() statements in the code, which might make it less suitable for some</p><p>All in all, I&#8217;m impressed with ZeroMQ and especially the ideas of building a new layer. I really do like it a lot, but get the feeling it&#8217;s &#8220;not-there-yet&#8221;. Hopefully they can fix the most serious problems soon and keep the source code clean without too many confusing concepts.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=2997#respond' onclick='return addComment.moveForm("div-comment-2997", "2997", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment odd alt depth-2" id="comment-3024"><div id="div-comment-3024" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/ccbe7da9a44a8737ca2eda4462c42fe1.png' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Martin Sustrik</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3024">June 24, 2010 at 3:04 pm</a></div><p>Can you be more specific on how the code should be simplified? I don&#8217;t get much feedback of this kind so elaborating a bit would be greatly appreciated!</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3024#respond' onclick='return addComment.moveForm("div-comment-3024", "3024", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="comment even thread-even depth-1 parent" id="comment-2998"><div id="div-comment-2998" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face15.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Mike C</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-2998">June 23, 2010 at 4:21 pm</a></div><p>Very interesting! I&#8217;m a newbie to this stuff, so it&#8217;s very fascinating.</p><p>In your opinion, other commentors included, would 0MQ be a good transport layer for an MPI-type parallel processing library? As I read through this article, it seems like the MPI specs could sit right on top of this type of library.</p><p>Thanks again! Can&#8217;t wait to read more <img src='http://nichol.as/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /></p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=2998#respond' onclick='return addComment.moveForm("div-comment-2998", "2998", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="comment-3052"><div id="div-comment-3052" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3052">June 24, 2010 at 9:24 pm</a></div><p>I think it would be a perfect fit for that. I know some people use it for HPC but i do not have any experience with that.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3052#respond' onclick='return addComment.moveForm("div-comment-3052", "3052", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="comment even thread-odd thread-alt depth-1 parent" id="comment-3010"><div id="div-comment-3010" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/3d94d4abc6802f57dc456171d9f85d51.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Joe</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3010">June 24, 2010 at 1:03 am</a></div><p>What happened to the zmq_server concept I see mentioned in the 0.6 white paper?</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3010#respond' onclick='return addComment.moveForm("div-comment-3010", "3010", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="comment-3053"><div id="div-comment-3053" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3053">June 24, 2010 at 9:25 pm</a></div><p>I believe this was removed from ZeroMQ 2</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3053#respond' onclick='return addComment.moveForm("div-comment-3053", "3053", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="comment even thread-even depth-1" id="comment-3020"><div id="div-comment-3020" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face10.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">phatra</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3020">June 24, 2010 at 8:08 am</a></div><p>Very good article &amp; diagrams !<br /> Really appreciated you effort (including those benchmarks in previous articles)</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3020#respond' onclick='return addComment.moveForm("div-comment-3020", "3020", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-3036"><div id="div-comment-3036" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face9.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://www.ociweb.com' rel='external nofollow' class='url'>malcolm Spence</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3036">June 24, 2010 at 5:59 pm</a></div><p>We did an evaluation of different approaches to messaging.</p><p>BoostASIO (sockets), ZeroMQ (lightweight messaging framework) and OpenDDS (an implementation of the OMG DDS spec.)</p><p>We published the results along with source code at <a href="http://mnb.ociweb.com/mnb/MiddlewareNewsBrief-201004.html" rel="nofollow">http://mnb.ociweb.com/mnb/MiddlewareNewsBrief-201004.html</a></p><p>We also include ease of use comments as well as performance numbers.</p><p>The results were not what you might think.</p><p>regards Malcolm Spence</p><p>Director Bus Dev.<br /> OCI St. Louis MO USA<br /> TEL: 1-314-590-0206<br /> <a href="http://www.ociweb.com" rel="nofollow">http://www.ociweb.com</a></p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3036#respond' onclick='return addComment.moveForm("div-comment-3036", "3036", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment byuser comment-author-admin bypostauthor even depth-2" id="comment-3066"><div id="div-comment-3066" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3066">June 24, 2010 at 10:23 pm</a></div><p>Malcolm,</p><p>I know what a pain benchmarking can be so I really appreciate that you guys share the observed results! There is some discussion on the ZeroMQ mailing list concerning these results. I know you already participated in that, but i&#8217;ll just mention it here to let other readers know: <a href="http://lists.zeromq.org/pipermail/zeromq-dev/2010-June/thread.html" rel="nofollow">http://lists.zeromq.org/pipermail/zeromq-dev/2010-June/thread.html</a></p><p>I think the results can be summarized as follows:</p><p> * A raw buffer shows a tad better performance for ZeroMQ compared to OpenDDS (170us vs 183us)<br /> * You guys argue, and rightfully so, that OpenDDS can handle static typed data where ZeroMQ needs an extra serialization library. When taking this into account you guys show that OpenDDS is actually faster that ZeroMQ + Protocol buffers (205us vs 216us).</p><p>However, it looks like ProtoBuf wasn&#8217;t optimized for speed, it will be interesting to see if a rerun with this change will make a difference.</p><p>Again, thanks for sharing the results!</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3066#respond' onclick='return addComment.moveForm("div-comment-3066", "3066", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt depth-2" id="comment-3332"><div id="div-comment-3332" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face11.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://kwaclaw.myopenid.com/' rel='external nofollow' class='openid_link url'>Karl Heinrich Waclawek</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3332">June 30, 2010 at 11:36 pm</a></div><p>Malcolm,</p><p>I believe that ZeroC ICE (<a href="http://zeroc.com" rel="nofollow">http://zeroc.com</a>) includes a component called IceStorm that looks very similar to OpenDDS (including an IDL). It would have been quite interesting to include it in the benchmark.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3332#respond' onclick='return addComment.moveForm("div-comment-3332", "3332", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="comment even thread-even depth-1 parent" id="comment-3092"><div id="div-comment-3092" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face19.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Salvor</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3092">June 25, 2010 at 8:08 pm</a></div><p>Fantastic article.  It convinced me I can use ZeroMQ on at least current projects.</p><p>I&#8217;d love to try ZeroMQ today, but I don&#8217;t see any Delphi or FreePascal bindings.</p><p>Also, are there any plans to support compiling ZeroMQ using C++ Builder 2010?</p><p>Thanks.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3092#respond' onclick='return addComment.moveForm("div-comment-3092", "3092", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment odd alt depth-2 parent" id="comment-3125"><div id="div-comment-3125" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/ccbe7da9a44a8737ca2eda4462c42fe1.png' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Martin Sustrik</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3125">June 26, 2010 at 5:56 pm</a></div><p>There once was a Delphi binding. Have a look at it here:</p><p><a href="http://github.com/zeromq/zeromq1/tree/master/windows/paszmq/" rel="nofollow">http://github.com/zeromq/zeromq1/tree/master/windows/paszmq/</a></p><p>In the meantime, 0MQ API have changed significantly, so the project would require couple of hours to get up-to-data. Would like to give it a try?</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3125#respond' onclick='return addComment.moveForm("div-comment-3125", "3125", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment even depth-3" id="comment-3127"><div id="div-comment-3127" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face19.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Salvor</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3127">June 26, 2010 at 7:17 pm</a></div><p>OK, I&#8217;ll give it a shot!</p><p>It would be easier if a similar article was written using zmq.h.</p><p>But if using zmq.h would make the article too long, then one using zmq.hpp would be the next best thing.</p><p>Does zeromq have a test suite?  Something that&#8217;ll test more than speed.  Something that&#8217;ll try n messages of sizes from 1 to x bytes with random binary content, etc.  Plus, tests that are not obvious for newcomers to try, etc.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3127#respond' onclick='return addComment.moveForm("div-comment-3127", "3127", "respond", "606")'>Reply</a></div></div></li></ul></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-3106"><div id="div-comment-3106" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/685a57925fc84293f3c2ab2900661429.png' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Pierre Villeneuve</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3106">June 26, 2010 at 3:37 am</a></div><p>I really liked your write up.  I found your discussion of the 0mq devices (queues, forwarder, etc.) put a whole new perspective on it for me.  I&#8217;ve been playing Brian Granger&#8217;s Python bindings just to get a feel for it.  But I don&#8217;t see anywhere in his python code anything like the Queue device.  Did I miss something?  I see where the Queue is implemented in the C++ source code using a Polling object.    Does there exist a Python zmq Queue class?</p><p>Thanks!!</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3106#respond' onclick='return addComment.moveForm("div-comment-3106", "3106", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment byuser comment-author-admin bypostauthor even depth-2" id="comment-5994"><div id="div-comment-5994" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-5994">July 22, 2010 at 10:25 am</a></div><p>No, there is no Python based Queue by default. But if you are just interested in the forwarder you can just use the C++ one. Also, implementing such a forwarding device with PyZMQ is really easy and can be done in less than 5 lines of code.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=5994#respond' onclick='return addComment.moveForm("div-comment-5994", "5994", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-3131"><div id="div-comment-3131" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face8.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Serge Beaulois</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3131">June 27, 2010 at 1:56 am</a></div><p>Very great post <img src='http://nichol.as/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /></p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3131#respond' onclick='return addComment.moveForm("div-comment-3131", "3131", "respond", "606")'>Reply</a></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="comment-3202"><div id="div-comment-3202" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/de246a23510b44494118bc5b552fdbf5.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://id.fredalger.net/' rel='external nofollow' class='openid_link url'>Fred Alger</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3202">June 29, 2010 at 1:12 am</a></div><p>Nice article, dude!  I&#8217;ve just started reading the Mongrel2 source and playing with ZMQ in my own projects, very cool stuff.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3202#respond' onclick='return addComment.moveForm("div-comment-3202", "3202", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-even depth-1 parent" id="comment-3261"><div id="div-comment-3261" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face12.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Raghavendra</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3261">June 30, 2010 at 11:49 am</a></div><p>Nice article.  Does zeromq support composition of different messaging paradigms say pipeline and pub-sub ?</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3261#respond' onclick='return addComment.moveForm("div-comment-3261", "3261", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment byuser comment-author-admin bypostauthor even depth-2" id="comment-5993"><div id="div-comment-5993" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-5993">July 22, 2010 at 10:24 am</a></div><p>Yes, as it is a library you can do with it whatever you want. Actually, I think thats the whole point of it.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=5993#respond' onclick='return addComment.moveForm("div-comment-5993", "5993", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-3394"><div id="div-comment-3394" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face5.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://webdesignnews.blogetery.com/2010/07/01/various-server-side-technologies-for-web-design-a%c2%ab-web-design-bangkok/' rel='external nofollow' class='url'>Sarah</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3394">July 1, 2010 at 1:07 pm</a></div><p>You know Nicholas, I actually wrote about this earlier today on my blog. This post has really given me lots of food for thought, I feel that you made many really interesting points. In fact, I wish I had read it before I posted my own post!</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3394#respond' onclick='return addComment.moveForm("div-comment-3394", "3394", "respond", "606")'>Reply</a></div></div></li><li class="comment even thread-even depth-1" id="comment-3475"><div id="div-comment-3475" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/3a407e1e4cc0b4f3b8338e28795d085d.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://kfsone.wordpress.com/' rel='external nofollow' class='openid_link url'>Oliver Smith</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3475">July 2, 2010 at 7:43 am</a></div><p>I keep coming back to this article. ZeroMQ has latched-on to rather than merely piqued my interest. Each time, though, I run into the same wall: the documentation. For every 1 minute spent reading ZeroMQ documentation, 5 additional minutes worth of questions are raised <img src='http://nichol.as/wp-includes/images/smilies/icon_sad.gif' alt=':(' class='wp-smiley' /></p><p>The most fundamental questions I was unable to answer for myself were: When would I want to use ZeroMQ and why?</p><p>I can sort of see, in my minds eye, where ZeroMQ meets my needs, but that is obscured by past practical experience. It seems to me that for almost all of my immediate use cases, I would wind up using the socket pairs and regretting it <img src='http://nichol.as/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /></p><p>One of my use cases is the offloading of database queries. Sometimes I need a response, but just as often I don&#8217;t. And some times I need  to offload work to hit the database and have a result forwarded elsewhere (pipelined) for completion.</p><p>Mix in the occasional broadcast and it seems like I&#8217;m going to start creating a lot of additional overhead for myself in terms of remembering what socket does what&#8230;</p><p>IMHO ZeroMQ needs to really round off its documentation and provide some more solid/practical use case examples.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3475#respond' onclick='return addComment.moveForm("div-comment-3475", "3475", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-3666"><div id="div-comment-3666" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face7.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Tomáš Pospíšek</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3666">July 4, 2010 at 11:53 am</a></div><p>Problematic aspects of ZeroMQ:</p><p>* it&#8217;s not well documented &#8211; see Oliver Smith&#8217;s post here</p><p>* at the time I looked at ZeroMQ it would not explain it&#8217;s fundamental concepts (again, complare with Oliver Smith&#8217;s post). This leads to people using it for tasks and in ways which don&#8217;t play well with ZeroMQ. I gave my students an assignment to solve with ZeroMQ and they were &#8220;ouch, why aren&#8217;t my messages sent out?&#8221;. After asking in the 0mq list we were told that in that specific case, messages won&#8217;t be sent out unless they are needed/consumed and that this was &#8220;the way async messaging works&#8221;. That may be the case however making sure that potential users are made well aware of the fundamental mechanisms/philosphy before they start programming would go a long way to avoid unpleasant surprises.</p><p>* ZeroMQ is not error tolerant &#8211; if you don&#8217;t use it the way you should (and since it doesn&#8217;t have abundant documentation) it can be that it won&#8217;t return an error code and won&#8217;t complain complain on STDERR but just segfault. This can be tough to debug if the &#8220;missuse&#8221; happened quite some time before in the codepath.</p><p>* it&#8217;s being hyped a lot and adds to this hype with it&#8217;s own claims &#8211; so you come to ZeroMQ with high expectations which possibly get disapointed (see other points before), in spite of ZeroMQ possibly being a good product.</p><p>That said, it&#8217;s very well possible that ZeroMQ solves the posed problems in a brilliant way and it&#8217;s a good idea to use it however one needs to be aware of the current state of affairs.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3666#respond' onclick='return addComment.moveForm("div-comment-3666", "3666", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment even depth-2" id="comment-3667"><div id="div-comment-3667" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face7.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Tomáš Pospíšek</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-3667">July 4, 2010 at 11:54 am</a></div><p>s/0mq list/irc channel/</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=3667#respond' onclick='return addComment.moveForm("div-comment-3667", "3667", "respond", "606")'>Reply</a></div></div></li><li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="comment-6002"><div id="div-comment-6002" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-6002">July 22, 2010 at 10:46 am</a></div><p>Tomáš, I agree with almost all of your points. I think the main thing to keep in mind is that ZeroMQ is still a very young project and thus lacking in documentation and decent handling of configuration errors. These aspects are closely related.</p><p>I believe that the more people that will use and try it the more user friendly it will become because of the community effort. I am not sure if I will call it &#8216;hype&#8217; that surrounds ZeroMQ, but there sure are a lot of people getting excited about the (funded) strong performance claims of 0MQ.</p><p>I think such excitement is a requirement for any young project to grow. Don&#8217;t get me wrong, I think it is good that you point to some of the more negative aspects of ZeroMQ and I must admit that I purposely left out that 0MQ still is a young project. But I think the following quote applies here: “If you want to build a ship, don&#8217;t drum up people to collect wood, divide the work and give orders. Instead, teach them to long for the endless immensity of the sea.”</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=6002#respond' onclick='return addComment.moveForm("div-comment-6002", "6002", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="comment even thread-even depth-1" id="comment-4304"><div id="div-comment-4304" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face3.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">M.</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-4304">July 11, 2010 at 10:43 pm</a></div><p>Nice writeup; what I&#8217;d really like to see is a comparison of 0MQ and 29west LBM, esp. in matters of latency, for small messages.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=4304#respond' onclick='return addComment.moveForm("div-comment-4304", "4304", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-5990"><div id="div-comment-5990" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/3a407e1e4cc0b4f3b8338e28795d085d.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://kfsone.wordpress.com/' rel='external nofollow' class='openid_link url'>Oliver Smith</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-5990">July 22, 2010 at 10:18 am</a></div><p>I want to add to my earlier comments: 0MQ is proving to have been worth wrestling with the documentation and lack of of (see the zmq_forwarder/queue/streamer pages <img src='http://nichol.as/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /></p><p>I&#8217;ve even put published a little C++ API/wrapper for using it for in-process parallelism in the style of Intel&#8217;s TBB patterns. <a href="http://www.kfs.org/async/manual/" rel="nofollow">http://www.kfs.org/async/manual/</a></p><p>If ZeroMQ piques your interest, stay piqued and wrestle with it <img src='http://nichol.as/wp-includes/images/smilies/icon_smile.gif' alt=':)' class='wp-smiley' /></p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=5990#respond' onclick='return addComment.moveForm("div-comment-5990", "5990", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment byuser comment-author-admin bypostauthor even depth-2" id="comment-5992"><div id="div-comment-5992" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-5992">July 22, 2010 at 10:22 am</a></div><p>Hah! I was just about to reply on your earlier comment and I noted you have been writing some posts on your blog since then as well.</p><p>I agree with both of your points, that indeed the documentation is lacking somewhat but that the struggle with the documentation is worth it. Also, there is a wiki on zeromq.org so I expect that a community effort will solve the documentation aspects at some time.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=5992#respond' onclick='return addComment.moveForm("div-comment-5992", "5992", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="pingback odd alt thread-even depth-1" id="comment-6604"><div id="div-comment-6604" class="comment-body"><div class="comment-author vcard"><cite class="fn"><a href='http://kfsone.wordpress.com/2010/07/26/instead/' rel='external nofollow' class='url'>Instead&#8230; &laquo; kfsone&#39;s pittance</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-6604">July 26, 2010 at 2:37 pm</a></div><p>[...] you watch through to the end, I do a little benchmark of simple parallelism with ZeroMQ and Async::Worker.     Categories: Coding, WWIIOL Tags: zeromq       Comments (0) Trackbacks (0) [...]</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=6604#respond' onclick='return addComment.moveForm("div-comment-6604", "6604", "respond", "606")'>Reply</a></div></div></li><li class="comment even thread-odd thread-alt depth-1 parent" id="comment-6864"><div id="div-comment-6864" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/cca18087b325346d5007ccbc3bdddb6e.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">rosdi</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-6864">July 29, 2010 at 5:19 am</a></div><p>How does ZeroMQ compared to node.js? Or are these two different beast altogether and I am an idiot?</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=6864#respond' onclick='return addComment.moveForm("div-comment-6864", "6864", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment byuser comment-author-admin bypostauthor odd alt depth-2" id="comment-6880"><div id="div-comment-6880" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-6880">July 29, 2010 at 8:07 am</a></div><p>You can&#8217;t compare them. They are completely different things but can be used together.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=6880#respond' onclick='return addComment.moveForm("div-comment-6880", "6880", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="pingback even thread-even depth-1" id="comment-9174"><div id="div-comment-9174" class="comment-body"><div class="comment-author vcard"><cite class="fn"><a href='http://blog.trydionel.com/2010/08/25/setting-up-0mq-for-clojure-on-osx/' rel='external nofollow' class='url'>Setting up 0MQ for Clojure on OSX | spiral_code</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-9174">August 26, 2010 at 2:15 am</a></div><p>[...] this excellent ZeroMQ introduction if you&#8217;re not familiar with ZMQ. You&#8217;ll love it. [...]</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=9174#respond' onclick='return addComment.moveForm("div-comment-9174", "9174", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-9253"><div id="div-comment-9253" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face5.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Jerome</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-9253">August 28, 2010 at 1:54 am</a></div><p>Nicholas, you mentioned that you would not use Redis for realtime Pub/Sub because you&#8217;ll pay in performance. Can you expand on that?</p><p>I&#8217;ve been using Redis so far only for it&#8217;s Key-Value store and it&#8217;s awesome for that type of usage, but i was considering using it&#8217;s pub/sub features as well. However your comment made me stop and think.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=9253#respond' onclick='return addComment.moveForm("div-comment-9253", "9253", "respond", "606")'>Reply</a></div></div></li><li class="comment byuser comment-author-admin bypostauthor even thread-even depth-1" id="comment-9266"><div id="div-comment-9266" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-9266">August 28, 2010 at 8:46 am</a></div><p>There are quite a few differences between the two:</p><p> * With ZeroMQ you can have Pub/Sub between two nodes without an intermediate server and thus obtain lower latency.<br /> * ZeroMQ will allow you to scale up to really large numbers because of the way it can distribute it messages or the way it uses multicast. With Redis you are always limited to the maximum amount of connections on a single machine.<br /> * ZeroMQ uses message batching techniques and is thoroughly optimized for throughput performance this is a completely different design goal than Redis has. It would not surprise me if ZeroMQ would be a magnitude faster.</p><p>On the other hand, if you expect only a handful of listeners, really want message persistence and don&#8217;t care that much about latency I think Redis could be a viable option as it will make your design very simple.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=9266#respond' onclick='return addComment.moveForm("div-comment-9266", "9266", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-10362"><div id="div-comment-10362" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face1.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Howe</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-10362">September 28, 2010 at 7:40 am</a></div><p>Let me say, you should have been (well) paid for this article.<br /> Thanks.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=10362#respond' onclick='return addComment.moveForm("div-comment-10362", "10362", "respond", "606")'>Reply</a></div></div></li><li class="comment even thread-even depth-1" id="comment-11649"><div id="div-comment-11649" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face9.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://hans-jschmid.com' rel='external nofollow' class='url'>bitchmeister</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-11649">October 25, 2010 at 11:20 pm</a></div><p>Thanks a lot for your article. Helped me a lot to get started.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=11649#respond' onclick='return addComment.moveForm("div-comment-11649", "11649", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1" id="comment-12001"><div id="div-comment-12001" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face10.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Vinicius Pessoni</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-12001">October 28, 2010 at 8:14 pm</a></div><p>Very Good Explanation my friend! I was a little confused about what ZeroMQ was and it helped a lot =]</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=12001#respond' onclick='return addComment.moveForm("div-comment-12001", "12001", "respond", "606")'>Reply</a></div></div></li><li class="comment even thread-even depth-1" id="comment-14520"><div id="div-comment-14520" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/7cf8fc060fab11ebe536161d47714611.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://concert-shooter.ro' rel='external nofollow' class='url'>m0n5t3r</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-14520">November 15, 2010 at 11:03 am</a></div><p>The Python bindings also have some kinks that need ironing out: the worst one to bit me was that there can be exactly one zmq.Context in existence per process, try to instantiate it the 2nd time and python crashes, so it really should be a singleton at the bindings level, UPSTREAM/DOWNSTREAM are confusing (they do exactly the opposite thing one would expect: upstream reads, downstream writes) and deprecated in favour of PUSH/PULL in the underlying library, select blocks everything (signal handling? nope, unless it&#8217;s kill -9)&#8230;</p><p>/me right now in the process of writing a distributed Python task queue thingy</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=14520#respond' onclick='return addComment.moveForm("div-comment-14520", "14520", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-14776"><div id="div-comment-14776" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face11.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">James Bond</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-14776">November 17, 2010 at 2:19 am</a></div><p>@Nicholas,<br /> you wrote:</p><p>&#8220;A full flexed messaging system gives you an out of the box experience&#8221;</p><p>I think you want use the word &#8220;fledged&#8221; instead of &#8220;flexed&#8221;.   That&#8217;s the common English phrase for this sort of thing.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=14776#respond' onclick='return addComment.moveForm("div-comment-14776", "14776", "respond", "606")'>Reply</a></div></div><ul class='children'><li class="comment byuser comment-author-admin bypostauthor even depth-2" id="comment-15927"><div id="div-comment-15927" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/cache/53c2c5f6e446e221e0cd1051e5b8856f.jpeg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://nichol.as' rel='external nofollow' class='url'>Nicholas Piël</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-15927">November 25, 2010 at 7:05 am</a></div><p>Thanks James.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=15927#respond' onclick='return addComment.moveForm("div-comment-15927", "15927", "respond", "606")'>Reply</a></div></div></li></ul></li><li class="comment odd alt thread-even depth-1" id="comment-16773"><div id="div-comment-16773" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face5.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">Sumedh</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-16773">December 1, 2010 at 9:16 am</a></div><p>@Nicholas Piel : I liked the concept of middle-wear, and its cool too, have tried it..</p><p>But i would like to know more about drawbacks, if there are, and status for them.</p><p>As i was reading i found someone saying<br /> &#8220;It’s possible that a REQ hangs forever and there is currently no elegant way to solve this&#8221;</p><p>If it is true, then what is the status of this, or rather solution?</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=16773#respond' onclick='return addComment.moveForm("div-comment-16773", "16773", "respond", "606")'>Reply</a></div></div></li><li class="comment even thread-odd thread-alt depth-1" id="comment-18379"><div id="div-comment-18379" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face8.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn"><a href='http://sysgears.blog.com' rel='external nofollow' class='url'>Max Rizhkov</a></cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-18379">December 13, 2010 at 10:26 am</a></div><p>Dear Nicholas,</p><p>Thank you for your article about ZeroMQ. We&#8217;d also like to share our experience. Here is our implementation of load balancing between Java Threads:</p><p><a href="http://sysgears.blog.com/2010/12/08/load-balancing-work-between-java-threads-using-zeromq/" rel="nofollow">http://sysgears.blog.com/2010/12/08/load-balancing-work-between-java-threads-using-zeromq/</a></p><p>Sincerely yours,</p><p>Max Rizhkov<br /> Sysgears</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=18379#respond' onclick='return addComment.moveForm("div-comment-18379", "18379", "respond", "606")'>Reply</a></div></div></li><li class="comment odd alt thread-even depth-1" id="comment-18688"><div id="div-comment-18688" class="comment-body"><div class="comment-author vcard"> <img alt='' src='http://nichol.as/wp-content/plugins/shiba-gravatar/images/Face12.jpg' class='avatar avatar-32 photo' height='32' width='32' /><cite class="fn">xpromache</cite> <span class="says">says:</span></div><div class="comment-meta commentmetadata"><a href="http://nichol.as/zeromq-an-introduction#comment-18688">December 15, 2010 at 2:24 pm</a></div><p>Hello,</p><p>I recently discovered ZeroMQ and I was attracted by your article in the &#8220;ZeroMQ and the future&#8221; section that talks about creating a new database.<br /> Well, that&#8217;s what I want to do, to create a new database and I&#8217;m looking at how to get clients connected to it.<br /> After reading all your article, I still don&#8217;t understand how a classical approach with:<br /> 1. connect client<br /> 2. run query<br /> 3. get a lot of data as fast as possible<br /> will work with ZeroMQ.</p><p>Especially sending a lot of data does not seem to be done easily with ZeroMQ. I guess you need to create PAIR sockets on the fly for that to work, so one would need to open lots of ports.</p><div class="reply"> <a rel='nofollow' class='comment-reply-link' href='/zeromq-an-introduction?replytocom=18688#respond' onclick='return addComment.moveForm("div-comment-18688", "18688", "respond", "606")'>Reply</a></div></div></li></ol><div class="navigation"><div class="alignleft"></div><div class="alignright"></div></div><div id="respond"><h3>Leave a Reply</h3><div class="cancel-comment-reply"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/zeromq-an-introduction#respond" style="display:none;">Click here to cancel reply.</a></small></div><form action="http://nichol.as/wp-comments-post.php" method="post" id="commentform"><p><input type="text" name="author" id="author" value="" size="22" tabindex="1"  /> <label for="author"><small>Name</small></label></p><p><input type="text" name="email" id="email" value="" size="22" tabindex="2"/> <label for="email"><small>Mail (will not be published)</small></label></p><p><input type="text" name="url" id="url" value="" size="22" tabindex="3" /> <label for="url"><small>Website or OpenID</small></label></p><p><textarea name="comment" id="comment" cols="100%" rows="10" tabindex="4"></textarea></p><p><input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment" /> <input type='hidden' name='comment_post_ID' value='606' id='comment_post_ID' /> <input type='hidden' name='comment_parent' id='comment_parent' value='0' /></p> <span id="openid_comment"> <label> <input type="checkbox" id="login_with_openid" name="login_with_openid" checked="checked" /> Authenticate this comment using <span class="openid_link">OpenID</span>. </label> </span></form></div></div><div id="sidebar" class="sidebar"><div><div id="recent-posts-3" class="widget widget_recent_entries"><h2 class="title">Posts</h2><ul><li><a href="http://nichol.as/zeromq-an-introduction" title="ZeroMQ an introduction">ZeroMQ an introduction </a></li><li><a href="http://nichol.as/benchmark-of-python-web-servers" title="Benchmark of Python WSGI Servers">Benchmark of Python WSGI Servers </a></li><li><a href="http://nichol.as/asynchronous-servers-in-python" title="Asynchronous Servers in Python">Asynchronous Servers in Python </a></li><li><a href="http://nichol.as/person-recognition-with-python" title="Person Recognition (with Python)">Person Recognition (with Python) </a></li><li><a href="http://nichol.as/climate-gate-boxing-match-start-sharing-data" title="Climategate battle &#8212; start sharing data">Climategate battle &#8212; start sharing data </a></li></ul></div><div id="tag_cloud-3" class="widget widget_tag_cloud"><h2 class="title">Tags</h2><div><a href='http://nichol.as/tags/ai' class='tag-link-15' title='1 topic' style='font-size: 8pt;'>ai</a> <a href='http://nichol.as/tags/async' class='tag-link-13' title='2 topics' style='font-size: 13.25pt;'>async</a> <a href='http://nichol.as/tags/cdn' class='tag-link-10' title='1 topic' style='font-size: 8pt;'>cdn</a> <a href='http://nichol.as/tags/comet' class='tag-link-18' title='1 topic' style='font-size: 8pt;'>comet</a> <a href='http://nichol.as/tags/computer-vision' class='tag-link-14' title='1 topic' style='font-size: 8pt;'>computer vision</a> <a href='http://nichol.as/tags/javascript' class='tag-link-8' title='1 topic' style='font-size: 8pt;'>javascript</a> <a href='http://nichol.as/tags/performance' class='tag-link-9' title='3 topics' style='font-size: 16.75pt;'>performance</a> <a href='http://nichol.as/tags/programming' class='tag-link-7' title='5 topics' style='font-size: 22pt;'>programming</a> <a href='http://nichol.as/tags/python' class='tag-link-3' title='5 topics' style='font-size: 22pt;'>Python</a> <a href='http://nichol.as/tags/rant' class='tag-link-11' title='1 topic' style='font-size: 8pt;'>rant</a> <a href='http://nichol.as/tags/scalability' class='tag-link-25' title='1 topic' style='font-size: 8pt;'>scalability</a> <a href='http://nichol.as/tags/wsgi' class='tag-link-19' title='1 topic' style='font-size: 8pt;'>wsgi</a> <a href='http://nichol.as/tags/zeromq' class='tag-link-20' title='1 topic' style='font-size: 8pt;'>zeromq</a></div></div><div id="twitter-3" class="widget widget_twitter"><div><h2 class="title"><a class="twitterwidget twitterwidget-title" title="Twitter: nichol4s" href="http://twitter.com/nichol4s">Tweets</a></h2><ul><li><span class='entry-content'>Wow! Load spike on my old unmaintained picture gallery. Reason: source of the <a href="http://search.twitter.com/search?q=%23ohohcherso" class="twitter-hashtag">#ohohcherso</a> nude pix: <a href="http://bit.ly/aSRG3h">http://bit.ly/aSRG3h</a></span> <span class='entry-meta'><span class='time-meta'><a href="http://twitter.com/Nichol4s/statuses/2147483647">12:16:14 PM October 20, 2010</a></span> <span class='from-meta'>from <a href="http://twitter.com" rel="nofollow">Tweetie for Mac</a></span></span></li><li><span class='entry-content'>RT <a href="http://twitter.com/bramcohen" class="twitter-user">@bramcohen</a>: Nothing is as simultaneously important and ridiculous as button colors</span> <span class='entry-meta'><span class='time-meta'><a href="http://twitter.com/Nichol4s/statuses/2147483647">03:11:24 PM October 13, 2010</a></span> <span class='from-meta'>from <a href="http://twitter.com" rel="nofollow">Tweetie for Mac</a></span></span></li><li><span class='entry-content'>RT <a href="http://twitter.com/jgelens" class="twitter-user">@jgelens</a>: Reading about Socket.IO. Planning to make a Gevent-based Socket.IO server. :)</span> <span class='entry-meta'><span class='time-meta'><a href="http://twitter.com/Nichol4s/statuses/2147483647">04:59:37 PM October 03, 2010</a></span> <span class='from-meta'>from <a href="http://twitter.com" rel="nofollow">Tweetie for Mac</a></span></span></li><li><span class='entry-content'>Excellent article by Sustrik about scaling out with ZeroMQ <a href="http://www.250bpm.com/hits">http://www.250bpm.com/hits</a></span> <span class='entry-meta'><span class='time-meta'><a href="http://twitter.com/Nichol4s/statuses/2147483647">08:15:37 AM September 28, 2010</a></span> <span class='from-meta'>from <a href="http://twitter.com" rel="nofollow">Tweetie for Mac</a></span></span></li><li><span class='entry-content'>wow! Wolfenstein 3D in 1k of javascript. <a href="http://www.p01.org/releases/WOLF1K/">http://www.p01.org/releases/WOLF1K/</a></span> <span class='entry-meta'><span class='time-meta'><a href="http://twitter.com/Nichol4s/statuses/2147483647">05:32:14 PM September 10, 2010</a></span> <span class='from-meta'>from <a href="http://twitter.com" rel="nofollow">Tweetie for Mac</a></span></span></li></ul></div></div><div id="text-3" class="widget widget_text"><h2 class="title">Follow</h2><div class="textwidget"><p> <a href="http://twitter.com/nichol4s"><img src="http://nichol.as/wp-content/twittericon.png"/> Follow on Twitter</a><br/> <a href="http://feeds.feedburner.com/Nichol4s"><img src="http://nichol.as/wp-content/rss.png"/> Subscribe to the RSS feed</a><br/> <a href="http://feedburner.google.com/fb/a/mailverify?uri=Nichol4s&amp;loc=en_US"><img src="http://nichol.as/wp-content/Email.gif"/> Receive updates by Email</a></p></div></div></div></div></div></div></div><div id="footer"><div class="container"><div id="footer_content">Running on <a href="http://www.wordpress.org">Wordpress</a><br/> design based on <a href="http://www.jide.fr/">Freshy</a> by Jidé, the nutmeg image is from <a href="http://www.flickr.com/photos/shlomitziv/">Shlomit & Ziv</a><br/> (c) Nicholas Piël</div></div></div></div> <script type="text/javascript" src="http://nichol.as/wp-content/cache/autoptimize/autoptimize_e9b4ea0bdf1450b2b9ecfb2392f58be0.js"></script></body></html>
<!-- Dynamic page generated in 7.491 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2010-12-18 14:44:46 -->
<!-- super cache -->