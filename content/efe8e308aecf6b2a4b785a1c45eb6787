<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><title>Comparison of different SQL implementations</title>
<link rel="stylesheet" type="text/css" href="style.css" />
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<style type="text/css" media="screen"><!--
table { width: 85%; }
div.note { width: 85% }
td.product { width: 20%; }
td.solution { width: 80%; }
--></style>
<style type="text/css" media="print"><!--
body { font-size: smaller; }
div.dummyspace { display: none; }
span.online-only { display: none; }
--></style>
</head>

<body>

<h1>Comparison of different SQL implementations</h1>

<p>The goal of this page &mdash; which is a <strong>work in progress</strong> &mdash; is to gather information relevant for people who are porting SQL from 
one product to another and/or are interested in possibilities and limits of
'cross-product' SQL.</p>

<p>The following tables compare how different 
DBMS products handle various SQL (and related) features. If possible, the tables also 
state how the implementations <em>should</em> do things, according to the SQL 
standard.</p>

<p>I will only write about subjects that I've worked with personally, or 
subjects which I anticipate to find use for in the near future. 
Subjects on which there are no significant implementation variances are not 
covered. Beta-versions of software are not examined.</p>

<p>I'm sorry about the colors. They are a result of wanting to mark each DBMS 
differently and at the same time wanting to be relatively nice to printers.</p>

<p>If you have corrections or suggestions, please 
<a href="/#contact">contact</a> me; even notifications about spelling errors 
are welcome.</p>

<div class="contents">
<h2><a class="name" name="contents">Contents:</a></h2>
<ul>
<li><a href="#legend">Legend, definitions, and notes</a></li>
<li><a href="#features">Features</a>
   <ul>
   <li><a href="#features-views">Views</a></li>
   <li><a href="#features-joins">Join types/features</a></li>
   </ul></li>
<li><a href="#ddl">Data definition language (DDL)</a>
   <ul>
   <li><a href="#ddl-copy-structure">Copying structure</a></li>
   </ul>
</li>
<li><a href="#select">The SELECT statement</a>
   <ul>
   <li><a href="#select-order_by">Ordering result sets</a></li>
   <li><a href="#select-limit">Limiting result sets</a> (RANK() / ROW_NUMBER() /  FETCH FIRST / LIMIT / TOP)
      <ul>
      <li><a href="#select-limit-simple">Simple limit</a></li>
      <li><a href="#select-top-n">Top-<em>n</em></a> (quota-queries)</li>
      <li><a href="#select-limit-offset">Limit&mdash;with offset</a>, including a <a href="#select-limit-offset-note">note about the importance of sorting on unique values</a></li>
      </ul>
   </li>
   </ul>
</li>
<li><a href="#insert">The INSERT statement</a>
   <ul>
   <li><a href="#insert-multiple">Inserting several rows at a time</a></li>
   </ul>
</li>
<li><a href="#data_types">Data types</a>
   <ul>
   <li><a href="#data_types-boolean">BOOLEAN</a></li>
   <li><a href="#data_types-char">CHAR</a></li>
   <li><a href="#data_types-date_and_time">Date and time types</a>
      <ul>
      <li><a href="#data_types-date_and_time-timestamp">TIMESTAMP</a></li>
      </ul>
   </li>
   </ul>
</li>
<li><a href="#functions">Functions and operators</a>
   <ul>
   <li><a href="#functions-CHARACTER_LENGTH">CHARACTER_LENGTH</a></li>
   <li><a href="#functions-SUBSTRING">SUBSTRING</a></li>
   <li><a href="#functions-REPLACE">REPLACE</a></li>
   <li><a href="#functions-TRIM">TRIM</a></li>
   <li><a href="#functions-LOCALTIMESTAMP">LOCALTIMESTAMP</a></li>
   <li><a href="#functions-concat">Concatenation</a></li>
   </ul>
</li>
<li><a href="#constraints">Constraint handling</a>
   <ul>
   <li><a href="#constraints-unique">The UNIQUE constraint</a></li>
   </ul>
</li>
<li><a href="#mix">Mixture of type and operations</a>
   <ul>
   <li><a href="#mix-identity">Automatic key generation</a> (IDENTITY/SERIAL/AUTO_INCREMENT)</li>
   </ul>
</li>
<li><a href="#bulk">Bulk operations</a>
   <ul>
   <li><a href="#bulk-truncate_table">TRUNCATE TABLE</a></li>
   </ul>
</li>
<li><a href="#cli">Command line operations / metadata</a>
   <ul>
   <li><a href="#cli-starting">Starting the command line interface</a></li>
   <li><a href="#cli-list_of_databases">Getting a list of databases</a></li>
   <li><a href="#cli-list_of_schemas">Getting a list of schemas</a></li>
   <li><a href="#cli-list_of_tables">Getting a list of tables</a></li>
   <li><a href="#cli-table_description">Getting a table description</a></li>
   <li><a href="#cli-analyze">Manually telling the DBMS to collect statistics</a></li>
   <li><a href="#cli-explain">Getting a query explanation</a></li>
   <li><a href="#cli-timing">Turning on query timing</a></li>
   </ul>
</li>
<li><a href="#jdbc">JDBC</a>
   <ul>
   <li><a href="#jdbc-jarfile">JDBC driver jar file name, and general documentation</a></li>
   <li><a href="#jdbc-classname">JDBC driver class name</a></li>
   <li><a href="#jdbc-url">JDBC connection URL</a></li>
   </ul>
</li>
<li><a href="#other">Other topics</a>
   <ul>
   <li><a href="#other-dummy_table">Dummy-table use</a></li>
   <li><a href="#other-version">Obtaining DBMS version</a></li>
   <li><a href="#other-standard_port">Standard TCP/IP port</a></li>
   <li><a href="#other-diagnostic_log">Diagnostic log</a></li>
   </ul>
</li>
<li><a href="#related">Related work</a></li>
<li><a href="#acknowledgments">Acknowledgments</a></li>
<li><a name="TODO" href="TODOs.en.html">TODOs</a></li>
</ul>
</div>

<h2><a class="name" name="legend">Legend, definitions, and notes</a></h2>

<p>The following SQL standard and implementations have been 
examined, if not otherwise stated:</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="legend-standard">Standard</a></td>
      <td class="solution">The latest official version of SQL is SQL:2008.

	 <p>I don't have access to the official ISO standard text, but 
         <a href="http://www.wiscorp.com/">Whitemarsh Information Systems Corporation</a> 
	 provides a <a href="http://www.wiscorp.com/sql200n.zip">rather final draft</a>
	 as a zip-archive, containing several files. Most important to this 
	 page is the file <code>5CD2-02-Foundation-2006-01.pdf</code>.</p>

	 <p>No books cover SQL:2008 yet. Regarding the previous standard, SQL:2003, the <a href="http://www.dpunkt.de/buecher/1997.html">only book covering the subject</a> is in German which I was never any good at.
	 Therefore, I also use the following book as reference:
	 <br />Jim Melton and Alan Simon: 
	 <em><a href="http://www.elsevierdirect.com/product.jsp?isbn=9781558606777">SQL:1999&mdash;Understanding
	 Relational Language Components</a></em> (ISBN 1-55860-456-1).</p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a href="http://www.postgresql.org/" name="legend-postgresql">PostgreSQL</a></td>
      <td class="solution">
         PostgreSQL 8.4.1 on CentOS Linux.<br />
         <span class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/sql-commands.html">Documentation</a></span>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a href="http://www.ibm.com/software/data/db2/udb/" name="legend-db2">DB2</a></td>
      <td class="solution">
         DB2 Express-C v. 9.1 on Fedora Linux. Note that there are <a href="http://www.ibm.com/developerworks/db2/library/techarticle/db2common/">differences between various DB2 flavors</a>; this page is about DB2 for &quot;LUW&quot; (Linux/Unix/Windows).<br />
         <span class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/">Documentation</a></span>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a href="http://www.microsoft.com/sql/" name="legend-mssql">MS SQL Server</a></td>
      <td class="solution">
         MS SQL Server 2005 on Windows XP.
         Microsoft's SQL implementation is sometimes named <em>Transact-SQL</em>, or <em>TSQL</em>. 
         In this document, I'll generally write <em>MSSQL</em> as a short-hand for 
         Microsoft's SQL Server product.<br />
         <span class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms189826.aspx">Documentation</a></span> 
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a href="http://www.mysql.com/products/mysql/" name="legend-mysql">MySQL</a></td>
      <td class="solution">
         MySQL Database Server 5.0.18 on Fedora Linux (i.e. MySQL AB's &quot;classic&quot; DBMS product&mdash;not MaxDB).<br />
         <span class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/">Documentation</a></span><br />
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a href="http://www.oracle.com/database/" name="legend-oracle">Oracle</a></td>
      <td class="solution">
         Oracle Database 11<i>g</i> Release 2 on Red Hat Enterprise Linux.<br />
         <span class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/toc.htm">Documentation</a></span>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a href="http://www.ibm.com/software/data/informix/" name="legend-informix">Informix</a></td>
      <td class="solution">
         Informix Dynamic Server Workgroup Edition v. 11.50 on Red Hat Enterprise Linux.<br />
         <span class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/index.jsp">Documentation</a></span>
      </td>
   </tr>
</table>

<p><a class="name" name="legend-default_settings">The</a> products are running with their default settings.
This is important for MySQL and MSSQL: Their interpretation of SQL
may be changed rather drastically by adjusting certain configuration options, 
potentially increasing the level of standard compliance (for MySQL, there is a <a href="http://dev.mysql.com/doc/refman/5.0/en/server-sql-mode.html">dedicated documentation page</a> about this). However, such 
non-default configuration options are not of great value for people 
writing SQL applications because the developer often cannot rely on non-default 
configuration settings.</p>

<h2><a class="name" name="features">Features</a></h2>

<h3><a class="name" name="features-views">Views</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="features-views-standard">Standard</a></td>
      <td class="solution">Views are part of the standard, and they may be updated, as long as it 'makes sense'.

		<p>SQL:2008 has a rather complicated set of rules governing when a view is updatable, basically saying that a view is updatable, as long as the update-operation translates into an unambiguous change.</p>

		<p>SQL-92 was more restrictive, specifying that updatable views cannot be derived from more than one base table.</p></td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="features-views-postgresql">PostgreSQL</a></td>
      <td class="solution">Has views. Breaks that standard by not allowing updates to views; offers the non-standard 'rules'-system as a work-around.</td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="features-views-db2">DB2</a></td>
      <td class="solution">Conforms to at least SQL-92.</td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="features-views-mssql">MSSQL</a></td>
      <td class="solution">Conforms to at least SQL-92.</td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="features-views-mysql">MySQL</a></td>
      <td class="solution">Conforms to at least SQL-92.</td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="features-views-oracle">Oracle</a></td>
      <td class="solution">Conforms to at least SQL-92.</td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="features-views-informix">Informix</a></td>
      <td class="solution">Conforms to at least SQL-92.</td>
   </tr>
</table>

<h3><a class="name" name="features-joins">Join types and features</a></h3>

<p>All the DBMSes support basic INNER JOINs, but vary in their support for other join types.</p>

<p>In the following feature chart, a <img src="img/yes.gif" width="13" height="12" alt="yes" /> 
means <em>yes</em>; an empty table cell means <em>no</em>.</p>

<table class="tick-tack">
<tr><th style="text-align: left">Join type/feature</th><th>PostgreSQL</th><th>DB2</th><th>MSSQL</th><th>MySQL</th><th>Oracle</th><th>Informix</th></tr>
<tr><td class="feature">Natural joins (only tested: <code class="sql">NATURAL LEFT JOIN</code>)</td>
<!-- pg       --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- db2      --><td>&nbsp;</td>
<!-- mssql    --><td>&nbsp;</td>
<!-- mysql    --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- oracle   --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- informix --><td>&nbsp;</td>
</tr>
<tr><td class="feature"><code class="SQL">USING</code>-clause</td>
<!-- pg       --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- db2      --><td>&nbsp;</td>
<!-- mssql    --><td>&nbsp;</td>
<!-- mysql    --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- oracle   --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- informix --><td>&nbsp;</td>
</tr>
<tr><td class="feature">FULL joins<sup>1</sup> (tested: <code class="sql">SELECT...FULL JOIN...ON...=...</code>)</td>
<!-- pg       --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- db2      --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- mssql    --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- mysql    --><td>&nbsp;</td>
<!-- oracle   --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- informix --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
</tr>
<tr><td class="feature">Explicit <code class="sql">CROSS JOIN</code> (cartesian product)</td>
<!-- pg       --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- db2      --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- mssql    --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- mysql    --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- oracle   --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
<!-- informix --><td><img src="img/yes.gif" width="13" height="12" alt="yes" /></td>
</tr>
<!-- tr><td class="feature"> </td>
pg       <td>?</p>
db2      <td>?</td>
mssql    <td>?</td>
mysql    <td>?</td>
oracle   <td>?</td>
informix <td>?</td>
</tr -->
</table>

<p>Remarks:</p>

<ol>
<li>Note that <code>FULL</code> joins may be <a href="http://www.oreillynet.com/pub/a/network/2002/04/23/fulljoin.html">emulated with a union of a left and a right join</a>.</li>
</ol>

<h2><a class="name" name="ddl">Data definition language (DDL)</a></h2>

<h3><a class="name" name="ddl-copy-structure">Copying structure</a></h3>

<p>Objective: An existing table, <span class="foo">t1</span> needs to be copied to a new table, <span class="foo">t2</span>, <em>without</em> copying data. I.e., only the structure/definition of the table is copied.</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="ddl-copy-structure-standard">Standard</a></td>
      <td class="solution">Optional feature T171 defines <em>LIKE clause in table definition</em>:
      <br /><code class="sql">CREATE TABLE <span class="foo">t2</span> ( LIKE <span class="foo">t1</span> )</code>

      <p>The DBMS may support an extension of this (feature T173) which allows for more table properties to be copied:
      <br /><code class="sql">CREATE TABLE <span class="foo">t2</span> ( LIKE <span class="foo">t1</span> INCLUDING IDENTITY INCLUDING DEFAULTS INCLUDING GENERATED )</code></p>

      <p>If <code>INCLUDING DEFAULTS</code> is not specified, column defaults will not be part of <span class="foo">t2</span>; likewise with <code>IDENTITY</code> and <code>GENERATED</code> properties.</p>

      <p>Triggers, CHECK constraints, and other 'non-trivial' table features are not copied to the new table.</p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="ddl-copy-structure-postgresql">PostgreSQL</a></td>
      <td class="solution">Complies with the core of the feature (T171). The extended T173 feature is only partially supported, and extended with a few non-standard options:
      <ul>
         <li>The <code>INCLUDING IDENTITY</code> and <code>INCLUDING GENERATED</code> options are not supported</li>
         <li><code>INCLUDING CONSTRAINTS</code> and <code>INCLUDING INDEXES</code> options are added</li>
      </ul>

      <p>PostgreSQL does not allow you to copy the structure of a view, using <code>CREATE TABLE ... (LIKE ...)</code>. For that, you may use another construct:<br />
      <code class="sql">CREATE TABLE <span class="foo">copytable</span> AS SELECT * FROM <span class="foo">viewname</span> WHERE false</code></p>

      <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/sql-createtable.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="ddl-copy-structure-db2">DB2</a></td>
      <td class="solution">Behaves as if <em>inspired</em> by the standard. I.e., DB2 conforms to the standard, except:
         <ul>
         <li>the <code>LIKE ...</code> clause is stated <em>outside</em> any parenthesis</li>
         <li>the extended <code>INCLUDING GENERATED</code> option is not supported</li>
         <li>DB2 defaults to copy IDENTITY, DEFAULTS, and GENERATED properties, unless <code>EXCLUDING IDENTITY</code> and/or <code>EXCLUDING DEFAULTS</code> is specified.</li>
         </ul>
      <p>Example:
         <br /><code class="sql">CREATE TABLE <span class="foo">t2</span> LIKE <span class="foo">t1</span> INCLUDING DEFAULTS</code></p>

      <p>DB2 allows you to copy the structure of a view into a table.</p>

      <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9r5/topic/com.ibm.db2.luw.sql.ref.doc/doc/r0000927.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="ddl-copy-structure-mssql">MSSQL</a></td>
      <td class="solution">Does not support the standard. Instead, MSSQL has a special <code class="sql">SELECT ... INTO ... FROM ...</code> construct which can be combined with an impossible WHERE-clause to copy structure only:
         <br /><code class="sql">SELECT * INTO <span class="foo">t2</span> FROM <span class="foo">t1</span> WHERE 1&lt;&gt;1</code>
      
      <p>The source (<span class="foo">t1</span>) may be a view, as well as a table.</p>

      <p><code>SELECT ... INTO</code> copies <code>NOT NULL</code> column attributes, but nothing else.</p>

      <p class="doclink"><a href="http://msdn.microsoft.com/en-us/library/ms190750(SQL.90).aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="ddl-copy-structure-mysql">MySQL</a></td>
      <td class="solution">Complies with the core of the feature (T171), but not with the extended features (T173).

      <p>MySQL does not allow you to copy the structure of a view into a table.</p>

      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/create-table.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="ddl-copy-structure-oracle">Oracle</a></td>
      <td class="solution">Does not support the standard. Oracle lets you copy a table structure using a special <code>CREATE TABLE ... AS</code> construct, combined with an impossible <code>WHERE</code>-clause:
         <code class="sql">CREATE TABLE <span class="foo">t2</span> AS SELECT * FROM <span class="foo">t1</span> WHERE 1&lt;&gt;1</code>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/statements_7002.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="ddl-copy-structure-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h2><a class="name" name="select">The SELECT statement</a></h2>

<h3><a class="name" name="select-order_by">Ordering result sets</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="select-order_by-standard">Standard</a></td>
      <td class="solution">The SQL-standard states that relations are unordered, but 
         result sets may be ordered when returned to the user through a cursor:

         <p><code class="sql">DECLARE <span class="foo">cursorname</span> CURSOR FOR<br />
            &nbsp;&nbsp;SELECT ... FROM ... WHERE ...<br />
            &nbsp;&nbsp;<strong>ORDER BY <span class="foo">column_name1</span>,<span class="foo">column_name2</span>,...</strong></code></p>

         <p>The DBMS may additionally allow <code>ORDER BY</code> outside cursor definitions (optional feature IDs F850, F851, F852, F855).<sup>(Since SQL:2008)</sup></p>

         <p><a class="name" name="select-order_by-nulls">The</a> standard doesn't
         specify how NULLs should be ordered in comparison with 
         non-NULL values, except that any two NULLs are to be considered equally ordered, and 
         that NULLs should sort either above or below all non-NULL values. However, the DBMS may 
         optionally (as part of feature ID T611, &quot;Elementary OLAP operations&quot;) 
         allow the user to specify whether NULLs should sort first or last:
         <br /><code class="sql">... ORDER BY ... NULLS FIRST</code>
         <br />or
         <br /><code class="sql">... ORDER BY ... NULLS LAST</code></p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="select-order_by-postgresql">PostgreSQL</a></td>
      <td class="solution">As well as in cursor definitions, it allows <code class="sql">ORDER BY</code> in other contexts.

      <p>By default, NULLs are considered <strong>higher</strong> than any non-NULL value; however,<sup>(since version 8.3)</sup> this sorting behaviour may be changed by adding <code class="sql">NULLS FIRST</code> or <code class="sql">NULLS LAST</code> to the <code class="sql">ORDER BY</code> expression.</p>

      <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/sql-select.html#SQL-ORDERBY">DOCUMENTATION</a></p></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="select-order_by-db2">DB2</a></td>
      <td class="solution">As well as in cursor definitions, it allows <code class="sql">ORDER BY</code> in other contexts.
      NULLs are considered <strong>higher</strong> than any non-NULL value.

      <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0000875.htm">DOCUMENTATION</a></p></td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="select-order_by-mssql">MSSQL</a></td>
      <td class="solution">As well as in cursor definitions, it allows <code class="sql">ORDER BY</code> in other contexts.
      NULLs are considered <strong>lower</strong> than any non-NULL value.

      <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms188385.aspx">DOCUMENTATION</a></p></td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="select-order_by-mysql">MySQL</a></td>
      <td class="solution">As well as in cursor definitions, it allows <code class="sql">ORDER BY</code> in other contexts.

      <p>NULLs are considered <strong>lower</strong> than any non-NULL value, 
      except if a <code>-</code> (minus) character is added before the column name 
      and ASC is changed to DESC, or DESC to ASC; this minus-before-column-name 
      feature seems undocumented.</p>

      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/select.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="select-order_by-oracle">Oracle</a></td>
      <td class="solution">As well as in cursor definitions, it allows <code class="sql">ORDER BY</code> in other contexts.

      <p>By default, NULLs are considered <strong>higher</strong>
      than any non-NULL value; however, this sorting behaviour may be changed 
      by adding <code class="sql">NULLS FIRST</code> or <code class="sql">NULLS LAST</code> 
      to the <code class="sql">ORDER BY</code> expression.</p>

      <p>Beware of Oracle's strange treatment of empty strings and NULLs as 
      the same 'value'.</p>

      <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/statements_10002.htm#SQLRF55357">DOCUMENTATION</a></p></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="select-order_by-informix">Informix</a></td>
      <td class="solution">As well as in cursor definitions, it allows <code class="sql">ORDER BY</code> in other contexts.
      NULLs are considered <strong>lower</strong> than any non-NULL value.

      <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqls.doc/ids_sqs_0157.htm">DOCUMENTATION</a></p></td>
   </tr>
</table>

<h3><a class="name" name="select-limit">Limiting result sets</a></h3>

<h4><a class="name" name="select-limit-simple">Simple limit</a></h4>

<p class="objective">Objective: Want to only get <em class="variable">n</em> rows in the result set.
Usually only makes sense in connection with an <code class="sql">ORDER BY</code> expression.</p>

<p>Note: This is <strong>not</strong> the same as a <em>top-n</em> query &mdash; see <a href="#select-top-n">next section</a>.</p>

<p>Note also: Some of the queries below may not be legal in all situations, such as in views or sub-queries.</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="select-limit-simple-standard">Standard</a></td>
      <td class="solution">The SQL standard provides three ways of performing a 'simple limit':

         <ul>

            <li>Using <strong><code class="sql">FETCH FIRST</code></strong>:<sup>(since SQL:2008)</sup>
               <p>Non-core feature IDs F856, F857, F858, and F859 describe using
               <br /><code class="sql">SELECT ... FROM ... WHERE ... ORDER BY ... <strong>FETCH FIRST <i>n</i> ROWS ONLY</strong></code></p>
               <p>You may write <code class="sql">ROW</code> instead of <code class="sql">ROW<strong>S</strong></code>.</p>
            </li> 
            <li>Using a <strong>Window function</strong>:<sup>(since SQL:2003)</sup>
               <p>Non-core Feature ID T611 specifies <em>window functions</em>, of which 
               one is <code class="sql">ROW_NUMBER()&nbsp;OVER</code>:

               <br />&nbsp;<br /><code class="sql">SELECT&nbsp;*&nbsp;FROM&nbsp;(<br />
               &nbsp;&nbsp;SELECT<br />
               &nbsp;&nbsp;&nbsp;&nbsp;ROW_NUMBER()&nbsp;OVER&nbsp;(ORDER&nbsp;BY&nbsp;<span class="foo">key</span>&nbsp;ASC)&nbsp;AS&nbsp;<span class="foo">rownumber</span>,<br />
               &nbsp;&nbsp;&nbsp;&nbsp;<span class="foo">columns</span><br />
               &nbsp;&nbsp;FROM&nbsp;<span class="foo">tablename</span><br />
               )&nbsp;AS&nbsp;<span class="foo">foo</span><br />
               WHERE&nbsp;<span class="foo">rownumber</span>&nbsp;&lt;=&nbsp;<span class="variable">n</span></code></p>
            </li>
            <li>Using a <strong>cursor</strong>:
               <p>If your application is stateful (in contrast to web applications which 
               normally have to be seen as stateless), then you might look at <em>cursors</em> 
               (core feature ID E121) instead. This involves:</p>
               <ul>
                  <li><code class="sql">DECLARE <span class="foo">cursor-name</span> CURSOR FOR ...</code></li>
                  <li><code class="sql">OPEN <span class="foo">cursor-name</span></code></li>
                  <li><code class="sql">FETCH ...</code></li>
                  <li><code class="sql">CLOSE <span class="foo">cursor-name</span></code></li>
               </ul>
            </li>
         </ul>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="select-limit-simple-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Supports all standards-based approaches.

         <p>In old PostgreSQL versions (versions 8.3 and older), a special PostgreSQL (and MySQL) specific method was used:</p>

         <p><code class="sql">
            SELECT <span class="foo">columns</span><br />
            FROM <span class="foo">tablename</span><br />
            ORDER BY <span class="foo">key</span> ASC<br />
            <strong>LIMIT <span class="variable">n</span></strong>
         </code></p>

         <p>Note that <code>LIMIT</code> <a href="http://www.postgresql.org/docs/8.4/static/sql-select.html#SQL-FOR-UPDATE-SHARE">changes the semantics of <code>SELECT...FOR&nbsp;UPDATE</code></a>.</p>

         <p>Documentation:</p>
         <ul>
            <li><span class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/sql-select.html#SQL-LIMIT">FETCH FIRST/LIMIT</a></span></li>
            <li><span class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/functions-window.html">Window functions</a></span></li>
         </ul>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="select-limit-simple-db2">DB2</a></td>
      <td class="solution">Supports all standards-based approaches.

         <p class="doclink">Documentation:</p>
         <ul>
            <li><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0023461.htm">OLAP functions</a></li>
            <li><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0000877.htm">FETCH FIRST</a><small> (general page about the SELECT statement; use your browser's search function to locate <code>FETCH FIRST</code>)</small></li>
         </ul>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="select-limit-simple-mssql">MSSQL</a></td>
      <td class="solution">
         Supports the <code>ROW_NUMBER()</code><sup>(since MSSQL 2005)</sup> and cursor standards-based approaches; doesn't support <code>FETCH FIRST</code>.

         <p><small>MSSQL 2000 didn't support <code>ROW_NUMBER()</code>. Instead, a MSSQL 2000-specific syntax was needed:

         <br /><code class="sql">
            SELECT <strong>TOP <span class="variable">n</span> <span class="foo">columns</span></strong><br />
            FROM <span class="foo">tablename</span><br />
            ORDER BY <span class="foo">key</span> ASC
         </code></small>
         <br />The <code>TOP</code> construct is still available in MSSQL 2008, and it's handy for casual SQL work.</p>

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms186734.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="select-limit-simple-mysql">MySQL</a></td>
      <td class="solution">
         Doesn't support the standard. Alternative solution:

         <p><code class="sql">
            SELECT <span class="foo">columns</span><br />
            FROM <span class="foo">tablename</span><br />
            ORDER BY <span class="foo">key</span> ASC<br />
            <strong>LIMIT <span class="variable">n</span></strong>
         </code></p>

         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/select.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="select-limit-simple-oracle">Oracle</a></td>
      <td class="solution">
         Supports <code>ROW_NUMBER</code>; doesn't support <code>FETCH FIRST</code>.

         <p>As Oracle doesn't allow <code>AS</code> for subquery naming (and doesn't need a subquery-name at all in this case), the standard SQL code above needs to be rewritten slightly:</p>
         <p><code class="sql">SELECT&nbsp;*&nbsp;FROM&nbsp;(<br />
         &nbsp;&nbsp;SELECT<br />
         &nbsp;&nbsp;&nbsp;&nbsp;ROW_NUMBER()&nbsp;OVER&nbsp;(ORDER&nbsp;BY&nbsp;<span class="foo">key</span>&nbsp;ASC)&nbsp;AS&nbsp;<span class="foo">rownumber</span>,<br />
         &nbsp;&nbsp;&nbsp;&nbsp;<span class="foo">columns</span><br />
         &nbsp;&nbsp;FROM&nbsp;<span class="foo">tablename</span><br />
         )<br />
         WHERE&nbsp;<span class="foo">rownumber</span>&nbsp;&lt;=&nbsp;<span class="variable">n</span></code></p>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/functions154.htm">Documentation</a></p>

         <p>A reader of this page told me that using the Oracle-specific <code>ROWNUM</code> 'magic' column yields better performance than using the ROW_NUMBER function. You may want to experiment with this. <em>Ask Tom</em> has an <a href="http://www.oracle.com/technology/oramag/oracle/06-sep/o56asktom.html">article</a> on ROWNUM.</p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="select-limit-simple-informix">Informix</a></td>
      <td class="solution">Supports neither ROW_NUMBER(), nor FETCH FIRST.

         <p>Alternative solution (which is illegal in plain sub-queries):
         <br /><code class="sql">SELECT FIRST <span class="variable">n</span> <i>columns</i>
         <br />FROM tablename
         <br />ORDER BY <i>key</i> ASC</code></p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqls.doc/ids_sqs_0984.htm">Documentation</a></p>
      </td>
   </tr>
</table>

<h4><a class="name" name="select-top-n">Top-<em>n</em> query</a></h4>

<p class="objective">Objective: Like the simple limit-query above, but include 
rows with tie conditions. Thus, the query may return more than <em>n</em> 
rows.</p>

<p>Some call this a <em>quota</em>-query.</p>

<p>The following examples are based on this table:</p>

<pre>SELECT * FROM person ORDER BY age ASC;
+----------+-------------+-----+
|PERSON_ID | PERSON_NAME | AGE |
+----------+-------------+-----+
|        7 | Hilda       |  12 |
|        8 | Bill        |  12 |
|        4 | Joe         |  23 |
|        2 | Veronica    |  23 |
|        3 | Michael     |  27 |
|        9 | Marianne    |  27 |
|        1 | Ben         |  50 |
|       10 | Michelle    |  50 |
|        5 | Irene       |  77 |
|        6 | Vivian      |  77 |
+----------+-------------+-----+</pre>

<p>Now, we only want the three (<em>n</em>=3) youngest persons 
displayed, i.e. a result set like this:</p>

<pre>+----------+-------------+-----+
|PERSON_ID | PERSON_NAME | AGE |
+----------+-------------+-----+
|        7 | Hilda       |  12 |
|        8 | Bill        |  12 |
|        4 | Joe         |  23 |
|        2 | Veronica    |  23 |
+----------+-------------+-----+</pre>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="select-top-n-standard">Standard</a></td>
      <td class="solution">With standard SQL, there are two principal ways to obtain the wanted data:

            <ul>
            <li><a class="name" name="select-top-n-standard-fast">The <strong>fast</strong> variant</a>:
            <p>One of the major additions in SQL:2003 was the addition of non-core (i.e. optional) OLAP (online analytic processing) features. If the DBMS supports elementary OLAP (feature ID F611), then the top-<em>n</em> query may be formulated using a <em>window function</em>, such as <code>RANK()&nbsp;OVER</code>:</p>
         <p><code class="sql">
            SELECT * FROM (<br />
            &nbsp;&nbsp;SELECT<br />
            &nbsp;&nbsp;&nbsp;&nbsp;RANK()&nbsp;OVER&nbsp;(ORDER&nbsp;BY&nbsp;age&nbsp;<strong class="boxed">ASC</strong>)&nbsp;AS&nbsp;ranking,<br />
            &nbsp;&nbsp;&nbsp;&nbsp;person_id,<br />
            &nbsp;&nbsp;&nbsp;&nbsp;person_name,<br />
            &nbsp;&nbsp;&nbsp;&nbsp;age<br />
            &nbsp;&nbsp;FROM person<br />
            ) AS foo<br />
            WHERE ranking &lt;= 3
         </code></p>
         <p class="small">(Change <code>ASC</code> to <code>DESC</code> in the position marked <strong class="boxed">like this</strong> in order to get a <em>top-3 oldest</em> query instead.)</p>
         </li>

         <li><a class="name" name="select-top-n-standard-slow">The <strong>slow</strong> variant</a>:
         <p>If the DBMS doesn't support the elementary OLAP features, then the top-n 
            solution may be obtained in an alternative way which is
            so slow that it's not a real option in most situations:</p>

         <p><a class="name" name="select-top-n-standard-no_olap-v1">Correlated subquery method</a>, mentioned in the book 
               <a href="http://www.awprofessional.com/bookstore/product.asp?isbn=0201485559"><em>Practical Issues in Database Management</em></a> (chapter 9: 
               <em>Quota Queries</em>) by Fabian Pascal (who, again, 
               quotes Date for the solution):</p>

               <p><code class="sql">SELECT * FROM person AS px<br />
               WHERE (<br />
               &nbsp;&nbsp;SELECT COUNT(*)<br />
               &nbsp;&nbsp;FROM person AS py<br />
               &nbsp;&nbsp;WHERE py.age <strong class="boxed">&lt;</strong> px.age<br />
               ) &lt; 3</code></p>

               <p>The query may make more sense if the objective is 
               re-phrased as &quot;Find all persons (px) such that the number of 
               younger, other persons (py) is less than 3&quot;.</p>

               <p class="small">(Change <code>&lt;</code> to <code>&gt;</code> in the position marked <strong class="boxed">like this</strong> in order to get a <em>top-3 oldest</em> query instead.)</p>
            </li>

         </ul>

         <p>In the article <em><a href="http://web.archive.org/web/20071009162319/http://www.dbmsmag.com/9610d06.html">Going To Extremes</a></em> by 
         <a href="http://www.celko.com/">Joe Celko</a>, there is a description
         of yet another principle for 
         performing quota queries, using <em>scalar subqueries</em>. Scalar subqueries 
         are more tedious to write but might yield better performance on your system.</p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="select-top-n-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Supports the <a href="#select-top-n-standard">fast standard SQL</a> variant.

         <p>In version 8.3 and older, PostgreSQL only supported the <a href="#select-top-n-standard-slow">slow standard SQL</a>
         query variant. In practice, a PostgreSQL-only method was used instead, in order to obtain 
         acceptable query performance:<br />

         <code class="sql">SELECT *<br />
            FROM person<br />
            WHERE (<br />
            &nbsp;&nbsp;age <strong class="boxed">&lt;=</strong> (<br />
            &nbsp;&nbsp;&nbsp;&nbsp;SELECT age FROM person<br />
            &nbsp;&nbsp;&nbsp;&nbsp;ORDER BY age <strong class="boxed">ASC</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;LIMIT 1 OFFSET 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- 2=n-1<br />
            &nbsp;&nbsp;)<br />
            ) IS NOT FALSE</code></p>
         <p class="small">(Change <code>&lt;=</code> to <code>&gt;=</code> and <code>ASC</code> to <code>DESC</code> in the positions marked <strong class="boxed">like this</strong> in order to get a <em>top-3 oldest</em> query instead.)</p>
         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/functions-window.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="select-top-n-db2">DB2</a></td>
      <td class="solution">
         Supports the <a href="#select-top-n-standard">fast standard SQL</a> variant.

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0023461.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="select-top-n-mssql">MSSQL</a></td>
      <td class="solution">
         Supports the <a href="#select-top-n-standard">fast standard SQL</a> variant.

         <p><small>MSSQL 2000 supported the <a href="#select-top-n-standard-slow">slow standard SQL</a> variant. In practice, a MSSQL-only expression had to be used instead, in order to obtain acceptable query performance:
         <br /><code class="sql">
            SELECT TOP 3 WITH TIES *<br />
            FROM person<br />
            ORDER BY age <strong class="boxed">ASC</strong>
         </code>
         <br />(Change <code>ASC</code> to <code>DESC</code> in the position marked <strong class="boxed">like this</strong> in order to get a <em>top-3 oldest</em> query instead.)</small></p>

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms176102.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="select-top-n-mysql">MySQL</a></td>
      <td class="solution">
            Supports the <a href="#select-top-n-standard-no_olap-v1">slow standard SQL</a> 
            solution. In practice, this MySQL-specific solution should be used instead, 
            in order to obtain acceptable query performance:

            <p><code class="sql">SELECT&nbsp;*
               <br />FROM&nbsp;person
               <br />WHERE&nbsp;age&nbsp;<strong class="boxed">&lt;=</strong>&nbsp;COALESCE(&nbsp;--&nbsp;note:&nbsp;no&nbsp;space&nbsp;between &quot;COALESCE&quot;&nbsp;and&nbsp;opening&nbsp;parenthesis
               <br />&nbsp;&nbsp;(
               <br />&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;age
               <br />&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;person
               <br />&nbsp;&nbsp;&nbsp;&nbsp;ORDER&nbsp;BY&nbsp;age&nbsp;<strong class="boxed">ASC</strong>
               <br />&nbsp;&nbsp;&nbsp;&nbsp;LIMIT&nbsp;1&nbsp;OFFSET&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;2=n-1
               <br />&nbsp;&nbsp;),
               <br />&nbsp;&nbsp;(
               <br />&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;<strong class="boxed">MAX</strong>(age)
               <br />&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;person
               <br />&nbsp;&nbsp;)
               <br />)</code></p> 

         <p class="small">(Change <code>&lt;=</code> to <code>&gt;=</code> and <code>ASC</code> to <code>DESC</code> and <code>MAX</code> to <code>MIN</code> in the positions marked <strong class="boxed">like this</strong> in order to get a <em>top-3 oldest</em> query instead.)</p>

         <p>The offset-value <em>2</em> is the result of <em>n-1</em> (remember: <em>n</em> is 3 in these examples).</p>

         <p>The second argument to the <code>COALESCE</code> call makes the query work in cases where the cardinality of the table is lower than <em>n</em>.</p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="select-top-n-oracle">Oracle</a></td>
      <td class="solution">
         Supports the <a href="#select-top-n-standard">fast standard SQL</a> variant.
         However, as Oracle doesn't like &quot;<code>AS&nbsp;...</code>&quot; after subqueries
         (and doesn't require naming of subqueries), the query has to be 
         paraphrased slightly:

         <p><code class="sql">SELECT * FROM (<br />
         &nbsp;&nbsp;SELECT<br />
         &nbsp;&nbsp;&nbsp;&nbsp;RANK()&nbsp;OVER&nbsp;(ORDER&nbsp;BY&nbsp;age&nbsp;<strong class="boxed">ASC</strong>)&nbsp;AS&nbsp;ranking,<br />
         &nbsp;&nbsp;&nbsp;&nbsp;person_id,<br />
         &nbsp;&nbsp;&nbsp;&nbsp;person_name,<br />
         &nbsp;&nbsp;&nbsp;&nbsp;age<br />
         &nbsp;&nbsp;FROM person<br />
         )<br />
         WHERE ranking &lt;= 3</code></p>

         <p class="small">(Change <code>ASC</code> to <code>DESC</code> in the position marked <strong class="boxed">like this</strong> in order to get a <em>top-3 oldest</em> query instead.)</p>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/functions139.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="select-top-n-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h4><a class="name" name="select-limit-offset">Limit&mdash;with offset</a></h4>

<p class="objective">Objective: Want to only get <span class="variable">n</span> rows in the result set, 
and we want the first <span class="variable">skip</span> rows in the result set discarded.
Usually only makes sense in connection with an <code class="sql">ORDER BY</code> expression.</p>

<p>In the recipes below, basic ordering is ASCending, i.e. 
lowest-first queries. If you want the opposite, then change
<code>ASC-&gt;DESC</code> and <code>DESC-&gt;ASC</code> 
at the places emphasized <strong class="boxed">like this</strong>.</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="select-limit-offset-standard">Standard</a></td>
      <td class="solution">The SQL standard provides three ways of performing 'limit with offset':

         <ul>
            <li>Using <strong><code class="sql">OFFSET</code></strong> and <strong><code class="sql">FETCH FIRST</code></strong>:<sup>(since SQL:2008)</sup>
               <p><code class="sql">SELECT...
                  <br />FROM ...
                  <br />WHERE ...
                  <br />ORDER BY ...
                  <br /><strong>OFFSET <i>skip</i> ROWS
                  <br/>FETCH FIRST <i>n</i> ROWS ONLY</strong></code></p>

               <p>You may write <code class="sql">ROW</code> instead of <code class="sql">ROW<strong>S</strong></code>.</p>
            </li>
            <li>Using a <strong>window function</strong>:<sup>(since SQL:2003)</sup>
               <p>Non-core Feature ID T611 specifies <em>window functions</em>, one of which is <code class="sql">ROW_NUMBER() OVER</code>:

               <br />&nbsp;<br /><code class="sql">
                  SELECT&nbsp;*&nbsp;FROM&nbsp;(<br />
                  &nbsp;&nbsp;SELECT<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;ROW_NUMBER()&nbsp;OVER&nbsp;(ORDER&nbsp;BY&nbsp;key&nbsp;<strong class="boxed">ASC</strong>) AS rownum,<br />
                  &nbsp;&nbsp;&nbsp;&nbsp;<span class="foo">columns</span><br />
                  &nbsp;&nbsp;FROM&nbsp;<span class="foo">tablename</span><br />
                  )&nbsp;AS&nbsp;<span class="foo">foo</span><br />
                  WHERE&nbsp;rownum&nbsp;&gt;&nbsp;<span class="variable">skip</span>&nbsp;AND&nbsp;rownum&nbsp;&lt;=&nbsp;<span class="variable">(n+skip)</span>
               </code></p>
            </li>
            <li>Using a <strong>cursor</strong>:
               <p>You may use a <em>cursor</em> (core feature ID E121), if the programming environment permits it. This involves:</p>
               <ul>
               <li><code class="sql">DECLARE <span class="foo">cursor-name</span> CURSOR FOR ...</code></li>
               <li><code class="sql">OPEN <span class="foo">cursor-name</span></code></li>
               <li><code class="sql">FETCH RELATIVE <span class="foo">number-of-rows-to-skip</span> ...</code></li>
               <li><code class="sql">CLOSE <span class="foo">cursor-name</span></code></li>
               </ul>
            </li>
         </ul>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="select-limit-offset-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Supports all the standards-based approaches.

         <p>In version 8.3 and older, cursors should be used, or a special construct:<br />
         <code class="sql">
            SELECT <span class="foo">columns</span><br />
            FROM <span class="foo">tablename</span><br />
            ORDER BY <span class="foo">key</span> <strong class="boxed">ASC</strong><br /><strong>LIMIT <span class="variable">n</span> OFFSET <span class="variable">skip</span></strong>
         </code></p>

         <p>Documentation:</p>
         <ul>
            <li><a href="http://www.postgresql.org/docs/8.4/static/sql-select.html#SQL-LIMIT">OFFSET...FETCH/LIMIT...OFFSET</a></li>
            <li><a href="http://www.postgresql.org/docs/8.4/static/functions-window.html">Window functions</a></li>
         </ul>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="select-limit-offset-db2">DB2</a></td>
      <td class="solution">Supports the <em>window function</em> based approach.

         <p>Regarding cursors: DB2 for Linux/Unix/Windows doesn't support <code>FETCH&nbsp;RELATIVE</code> (which is strange, because DB2 for the mainframe seems to support it). Instead, see if the DB2 driver for your programming environment supports <code>SQLFetchScroll()</code>.</p>

         <p><span class="doclink">Documentation</span>: <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0023461.htm">OLAP functions</a>, the <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0000954.htm">FETCH statement</a>.</p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="select-limit-offset-mssql">MSSQL</a></td>
      <td class="solution">
         Supports the <em>window function</em> and cursor based approaches.

         <p><small>MSSQL 2000 didn't support <code>ROW_NUMBER()</code>; instead, a MSSQL-specific syntax had to be used:
         <br /><code class="sql">SELECT&nbsp;*&nbsp;FROM&nbsp;(<br />
            &nbsp;&nbsp;SELECT&nbsp;TOP&nbsp;<span class="variable">n</span>&nbsp;*&nbsp;FROM&nbsp;(<br />
               &nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;TOP&nbsp;<span class="variable">z</span>&nbsp;<span class="foo">columns</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;(z=n+skip)<br />
               &nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;<span class="foo">tablename</span><br />
               &nbsp;&nbsp;&nbsp;&nbsp;ORDER&nbsp;BY&nbsp;<span class="foo">key</span>&nbsp;<strong class="boxed">ASC</strong><br />
               &nbsp;&nbsp;)&nbsp;AS&nbsp;FOO&nbsp;ORDER&nbsp;BY&nbsp;<span class="foo">key</span>&nbsp;<strong class="boxed">DESC</strong>&nbsp;--&nbsp;('FOO'&nbsp;may&nbsp;be&nbsp;anything)<br />
               )&nbsp;AS&nbsp;BAR&nbsp;ORDER&nbsp;BY&nbsp;<span class="foo">key</span> <strong class="boxed">ASC</strong>&nbsp;&nbsp;&nbsp;&nbsp;--&nbsp;('BAR'&nbsp;may&nbsp;be&nbsp;anything)<br />
         </code></small></p>

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms186734.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="select-limit-offset-mysql">MySQL</a></td>
      <td class="solution">
         Doesn't support the standard approaches. Alternative solution:

         <br />&nbsp;<br /><code class="sql">
            SELECT <span class="foo">columns</span><br />
            FROM <span class="foo">tablename</span><br />
            ORDER BY <span class="foo">key</span> <strong class="boxed">ASC</strong><br /><strong>LIMIT <span class="variable">n</span> OFFSET <span class="variable">skip</span></strong>
         </code>

         <p><small>In older versions of MySQL, the LIMIT-syntax is less clear:
         <br /><code class="sql">... LIMIT [<span class="variable">skip</span>,] <span class="variable">n</span></code>
         <br />(i.e. the <span class="variable">skip</span> argument is optional).
         <br />The old syntax is still supported by later MySQL versions (the old syntax is widely used).</small></p>

         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/select.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="select-limit-offset-oracle">Oracle</a></td>
      <td class="solution">
         Supports <code>ROW_NUMBER()</code>. I'm unsure if Oracle's cursor support is standards-compliant.

         <p>As Oracle doesn't accept <code>AS</code> for subquery naming (and doesn't require naming of subqueries in this case), the standard SQL solution has to be re-written slightly. An other reason for the re-write is that <code>ROWNUM</code> is a reserved word in Oracle, with special meaning. The Oracle code becomes:</p>

         <p><code class="sql">
            SELECT&nbsp;*&nbsp;FROM&nbsp;(<br />
            &nbsp;&nbsp;SELECT<br />
            &nbsp;&nbsp;&nbsp;&nbsp;ROW_NUMBER()&nbsp;OVER&nbsp;(ORDER&nbsp;BY&nbsp;key&nbsp;<strong class="boxed">ASC</strong>) AS rn,<br />
            &nbsp;&nbsp;&nbsp;&nbsp;<span class="foo">columns</span><br />
            &nbsp;&nbsp;FROM&nbsp;<span class="foo">tablename</span><br />
            )<br />
            WHERE&nbsp;rn&nbsp;&gt;&nbsp;<span class="variable">skip</span>&nbsp;AND&nbsp;rn&nbsp;&lt;=&nbsp;<span class="variable">(n+skip)</span></code></p>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/functions154.htm">Documentation</a></p>

         <p>A reader of this page told me that using the Oracle-specific <code>ROWNUM</code> 'magic' column yields better performance than using the ROW_NUMBER function. You may want to experiment with this. <em>Ask Tom</em> has an <a href="http://www.oracle.com/technology/oramag/oracle/06-sep/o56asktom.html">article</a> on ROWNUM.</p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="select-limit-offset-informix">Informix</a></td>
      <td class="solution">Supports neither <code>OFFSET</code>...<code>FETCH FIRST</code> nor <code>ROW_NUMBER</code>. Supports cursors.

         <p>An alternative to using cursors is to us an Informix-specific construct:
         <br /><code class="sql">
                  SELECT SKIP <span class="variable">skip</span> FIRST <span class="variable">n</span> *
            <br />FROM tablename</code></p>

         <p><span class="doclink">Documentation</span>: <a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqls.doc/ids_sqs_0983.htm">SKIP</a> and <a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqls.doc/ids_sqs_0984.htm">FIRST</a></p>
      </td>
   </tr>
</table>

<div class="note">
<p><a class="name" name="select-limit-offset-note">Note:</a></p>

<p>FETCH FIRST/LIMIT/TOP queries with offset are often used in a result presentation context:
To retrieve only&mdash;say&mdash;30 
rows at a time so that the end-user isn't overwhelmed by the complete result set, but 
instead is offered a paginated result presentation. In this case, be careful not 
to (only) sort on a non-unique column.</p>

<p>Consider the following example (where PostgreSQL is used):</p>

<pre>SELECT * FROM person ORDER BY age ASC;
 person_id | person_name | age
-----------+-------------+-----
         7 | Hilda       |  12
         8 | Bill        |  12
         4 | Joe         |  23
         2 | Veronica    |  23
         3 | Michael     |  27
         9 | Marianne    |  27
         1 | Ben         |  50
        10 | Michelle    |  50
         5 | Irene       |  77
         6 | Vivian      |  77</pre>
 
<p>When ordering is performed on the non-unique age-value, ties may 
occur and it's not guaranteed that the DBMS will fetch the rows in the 
same order every time.</p>

<p>Instead of the above listing, the DBMS is allowed to return 
the following display order where Michael and Marianne are displayed in 
the opposite order compared to above:</p>

<pre>SELECT * FROM person ORDER BY age ASC;
 person_id | person_name | age
-----------+-------------+-----
         7 | Hilda       |  12
         8 | Bill        |  12
         4 | Joe         |  23
         2 | Veronica    |  23
         9 | Marianne    |  27
         3 | Michael     |  27
         1 | Ben         |  50
        10 | Michelle    |  50
         5 | Irene       |  77
         6 | Vivian      |  77</pre>

<p>Now, suppose the end-user wants the results displayed 
five rows at a time. The result set is fetched in two queries where 
the DBMS happens to sort differently, as above.
We will use PostgreSQL's legacy syntax in the example:</p>

<pre>SELECT * FROM person ORDER BY age ASC LIMIT 5;
 person_id | person_name | age
-----------+-------------+-----
         7 | Hilda       |  12
         8 | Bill        |  12
         4 | Joe         |  23
         2 | Veronica    |  23
         3 | Michael     |  27
 
SELECT * FROM person ORDER BY age ASC LIMIT 5 OFFSET 5;
 person_id | person_name | age
-----------+-------------+-----
         3 | Michael     |  27
         1 | Ben         |  50
        10 | Michelle    |  50
         5 | Irene       |  77
         6 | Vivian      |  77</pre>
 
<p>Notice that Marianne was not displayed in any of the two split result set presentations.</p>

<p>The problem could be avoided if the result set ordering had been done in 
a deterministic way, i.e. where the unique person_id value was considered 
in case of a tie:<br />
<code class="sql">SELECT * FROM person ORDER BY age ASC, person_id ASC ...</code><br />
This is safer than to pray for the DBMS to behave in a predictable way when 
handling non-unique values.</p>

<p><strong>Note</strong>: If the table is updated between parts of the result set pagination, then the user might still get an inconsistent presentation. If you want to guard against this, too, then you should see if use of an <em>insensitive</em> cursor is an option in your application. Use of cursors to paginate result sets usually require that your application is <em>stateful</em>, which is <em>not</em> the case in many web-application settings. Alternatively, you could let the application cache the complete result set (e.g. in a <em>session</em> if your web application environment provides for sessions).</p>
</div>

<h2><a class="name" name="insert">The INSERT statement</a></h2>

<h3><a class="name" name="insert-multiple">Inserting several rows at a time</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="insert-multiple-standard">Standard</a></td>
      <td class="solution">An optional SQL feature is <em>row value constructors</em> (feature ID F641). One handy use 
      of row value constructors is when inserting several rows at a time, such as:

         <p><code class="sql">INSERT INTO tablename<br />
         VALUES (0,'foo') , (1,'bar') , (2,'baz');</code></p>

         <p>&mdash; which may be read as a shorthand for</p>

         <p><code class="sql">
         INSERT INTO tablename VALUES (0,'foo');<br />
         INSERT INTO tablename VALUES (1,'bar');<br />
         INSERT INTO tablename VALUES (2,'baz');</code></p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="insert-multiple-postgresql">PostgreSQL</a></td>
      <td class="solution"><strong>Supported</strong>.<sup>(since version 8.2)</sup></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="insert-multiple-db2">DB2</a></td>
      <td class="solution"><strong>Supported</strong>.</td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="insert-multiple-mssql">MSSQL</a></td>
      <td class="solution"><strong>Supported</strong>.<sup>(since version 2008)</sup></td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="insert-multiple-mysql">MySQL</a></td>
      <td class="solution"><strong>Supported</strong>.</td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="insert-multiple-oracle">Oracle</a></td>
      <td class="solution">An Oracle-specific kludge:<br />
         <code class="sql">INSERT INTO tablename<br />
            &nbsp;&nbsp;SELECT 0,'foo' FROM DUAL<br />
            &nbsp;&nbsp;&nbsp;&nbsp;UNION ALL<br />
            &nbsp;&nbsp;SELECT 1,'bar' FROM DUAL<br />
            &nbsp;&nbsp;&nbsp;&nbsp;UNION ALL<br />
            &nbsp;&nbsp;SELECT 2,'baz' FROM DUAL</code>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="insert-multiple-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h2><a class="name" name="data_types">Data types</a></h2>

<h3><a class="name" name="data_types-boolean">The BOOLEAN type</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="data_types-boolean-standard">Standard</a></td>
      <td class="solution">The BOOLEAN type is optional (has feature ID T031), which is
	  	a bit surprising for such a basic type. However, it seems that endless discussions of how 
		NULL is to be interpreted for a boolean value is holding BOOLEAN from becoming 
		a core type.
		
		<p>The standard says that a BOOLEAN may be one of the following 
        literals:</p>
        <ul>
        <li>TRUE</li>
        <li>FALSE</li>
        <li>UNKNOWN or NULL (unless prohibited by a NOT&nbsp;NULL constraint)</li>
        </ul>

        <p>The DBMS may interpret NULL as equivalent to UNKNOWN. It is 
        unclear from the specification if the DBMS <em>must</em> support 
        UNKNOWN, NULL or both as boolean literals. In this author's 
        opinion, you should forget about the UNKNOWN literal 
        in order to simplify the situation and let the normal SQL 
        three-way logic apply.</p>

        <p>It's defined that TRUE&nbsp;&gt;&nbsp;FALSE (true larger than false).</p>
	  </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="data_types-boolean-postgresql">PostgreSQL</a></td>
      <td class="solution">Follows the standard.

        <p>Accepts NULL as a boolean literal; doesn't 
        accept UNKNOWN as a boolean literal.</p>

        <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/datatype-boolean.html">Documentation</a></p></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="data_types-boolean-db2">DB2</a></td>
      <td class="solution">Doesn't support the BOOLEAN type. 

         <br />&nbsp;<br />Judging from various JDBC-documentation, it 
         seems that IBM recommends a CHAR(1) field constrained to values '0' 
         and '1' (and perhaps NULL) as the way to store boolean 
         values.
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="data_types-boolean-mssql">MSSQL</a></td>
      <td class="solution">Doesn't support the BOOLEAN type.

        <p>Possible alternative type: the BIT type which may
        have 0 or 1 (or NULL) as value. If you insert an integer 
        value other than these into a field of type BIT, then 
        the inserted value will silently be converted to 1.</p>

         <p>Rudy Limeback has some <a href="http://searchoracle.techtarget.com/ateQuestionNResponse/0,289625,sid41_cid556536_tax301455,00.html">notes</a> about oddities with the MSSQL BIT type.</p>

        <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms177603.aspx">Documentation</a></p></td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="data_types-boolean-mysql">MySQL</a></td>
      <td class="solution">Offers a non-conforming BOOLEAN type. MySQL's BOOLEAN 
         is one of many aliases to its TINYINT(1) type.

         <p><small>(<a href="http://www.mail-archive.com/cf-talk@houseoffusion.com/msg320458.html">Take care if you use TINYINT(1) and JDBC with 
         MySQL and expect to get non-boolean values from it</a>.)</small></p>

         <p>MySQL accepts the literals TRUE and FALSE as aliases to 1 and 0, respectively. However, 
         you may also assign a value of &mdash; e.g. &mdash; 9 to a column of type BOOLEAN (which 
         is non-conforming).</p>

        <p>If you use JDBC with MySQL, then BOOLEAN is the preferred type for booleans:
        MySQL's JDBC-driver implicitly converts between 
        Java's boolean and MySQL's pseudo-BOOLEAN type.</p>

        <p><small>Side note: MySQL has a <code>BIT</code> type which may be interesting for people with enormous amounts of boolean-type data.</small></p>

        <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/numeric-type-overview.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="data_types-boolean-oracle">Oracle</a></td>
      <td class="solution">Doesn't support the BOOLEAN type.

      <br />&nbsp;<br />Judging from various JDBC documentation and <a href="http://asktom.oracle.com/pls/asktom/f?p=100:11:0::::P11_QUESTION_ID:6263249199595#tom876972400346931526">a discussion at <em>Ask Tom</em></a>, it seems that 
      Oracle recommends NUMBER(1) as the way to store boolean values; it's 
      probably wise to constrain such columns to values 0 and 1 (and 
      perhaps NULL).</td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="data_types-boolean-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<div class="note">
<p><a name="data_types-boolean-notes">Warning</a> to JDBC users:<br />
According to the JDBC standard, <em>getBoolean()</em> must convert a 
SQL-'value' of NULL to the <em>false</em> Java value. To check if 
the database-value was really NULL, use <em>wasNull()</em>.</p>
</div>

<h3><a class="name" name="data_types-char">The CHAR type</a></h3>

<p>For the following section, I have used this test-SQL to 
try to illuminate differences (unfortunately, even standard SQL 
as simple as this has to be adjusted for some products):</p>

<p>Test steps:<br />
<code class="sql">CREATE TABLE chartest (<br />
&nbsp;&nbsp;charval1 CHAR(10) NOT NULL,<br />
&nbsp;&nbsp;charval2 CHAR(10) NOT NULL,<br />
&nbsp;&nbsp;varcharval VARCHAR(30) NOT NULL<br />
);<br />
INSERT INTO chartest VALUES ('aaa','aaa','aaa');<br />
INSERT INTO chartest<br />
&nbsp;&nbsp;VALUES ('aaaaaa&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;','aaa','aaa'); -- should truncate to 'aaaaaa&nbsp;&nbsp;&nbsp;&nbsp;'<br />
INSERT INTO chartest<br />
&nbsp;&nbsp;VALUES ('aaaaaaaaaaaa','aaa','aaa'); -- should raise error<br />
SELECT * FROM chartest; -- should show two rows<br />
DELETE FROM chartest WHERE charval1='aaaaaa';<br />
SELECT * FROM chartest; -- should show one row<br />
SELECT * FROM chartest WHERE charval1=varcharval;<br />
SELECT charval1 || 'X' AS res FROM chartest;<br />
SELECT CHAR_LENGTH(charval1 || charval2) AS res FROM chartest;<br />
SELECT CHAR_LENGTH(charval1) + CHAR_LENGTH(charval2)<br />
&nbsp;&nbsp;AS res<br />
&nbsp;&nbsp;FROM chartest;</code></p>

<p>Expected results, after CREATE and INSERTs:</p>

<pre>SELECT * FROM chartest; -- should show two rows
CHARVAL1   CHARVAL2   VARCHARVAL
========== ========== ==============================
aaa        aaa        aaa
aaaaaa     aaa        aaa
 
 
DELETE FROM chartest WHERE charval1='aaaaaa';


SELECT * FROM chartest; -- should show one row
CHARVAL1   CHARVAL2   VARCHARVAL
========== ========== ==============================
aaa        aaa        aaa


SELECT * FROM chartest WHERE charval1=varcharval;
CHARVAL1   CHARVAL2   VARCHARVAL
========== ========== ==============================
aaa        aaa        aaa


SELECT charval1 || 'X' FROM chartest AS res;
    res
===========
aaa       X


SELECT CHAR_LENGTH(charval1 || charval2) AS res FROM chartest;
    res
===========
         20


SELECT character_length(charval1) + character_length(charval2)
AS res
FROM chartest;
    res
============
          20</pre>

<p><a href="http://troels.arvin.dk/db/rdbms/tests/chartest-20031201a/">Actual results</a>.</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="data_types-char-errorhandling-standard">Standard</a></td>
      <td class="solution">
         <ul>
         <li>Return with an exception state if the inserted string is too long, unless the characters exceeding the limit are all spaces.</li>
         <li>Pad CHAR columns with spaces if the inserted string is shorter than the specified CHAR-length.</li>
         <li>Pad with trailing spaces as needed when casting or 
            comparing to other string-like values (e.g. VARCHARs).</li>
         </ul>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="data_types-char-errorhandling-postgresql">PostgreSQL</a></td>
      <td class="solution">Stores CHARs in space padded form, but violates the standard by (conceptually) truncating
         trailing white-space before performing most functions, operators, and comparisons
         (<a href="#functions-CHARACTER_LENGTH-postgresql">like the <code>CHARACTER_LENGTH</code>-function</a> and the 
         concatenation(<code>||</code>) operator).

         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/datatype-character.html">Documentation</a></p></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="data_types-char-errorhandling-db2">DB2</a></td>
      <td class="solution">Follows the standard.

      <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0008470.htm">Documentation</a></p></td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="data_types-char-errorhandling-mssql">MSSQL</a></td>
      <td class="solution">Generally follows standard, but (conceptually) truncates 
         trailing white-space before performing some functions 
         (<a href="#functions-CHARACTER_LENGTH-mssql">at least before <code>LEN()</code></a>).

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms187323.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="data_types-char-errorhandling-mysql">MySQL</a></td>
      <td class="solution">Breaks the standard by silently inserting the string, truncated to specified column CHAR-length.<br />
      <small>(It's actually not completely silent, as it issues 
         warnings if values were truncated: If you manually check for 
         warnings, you will know that something bad happened, but not 
         which of the rows are now invalid.)</small>

         <br />&nbsp;<br />Violates the standard by effectively truncating all trailing spaces.
         <br /><small>The documentation states that MySQL truncates trailing spaces when CHAR values are <em>retrieved</em>. That may be true, but it seems that truncation even happens before the CHAR values are used as input in functions like <code>CONCAT</code>, <code>CHAR_LENGTH</code>, etc.</small>

      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/char.html">Documentation</a></p></td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="data_types-char-errorhandling-oracle">Oracle</a></td>
      <td class="solution">Follows the standard, with a minor exception: Oracle doesn't 
         remove trailing spaces which exceed the specified CHAR length, but raises
         an exception.

      <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/sql_elements001.htm#sthref93">Documentation</a></p></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="data_types-char-errorhandling-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h3><a class="name" name="data_types-date_and_time">Date and time</a></h3>

<h4><a class="name" name="data_types-date_and_time-timestamp">The TIMESTAMP type</a></h4>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="data_types-date_and_time-timestamp-standard">Standard</a></td>
      <td class="solution">
         Part of the Core requirements, feature ID F051-03.<br />
         Stores year, month, day, hour, minute, second (with fractional seconds; default is 6 fractional digits).<br />
         Extension to Core SQL (feature ID F411): TIMESTAMP&nbsp;WITH&nbsp;TIME&nbsp;ZONE which also stores the time zone.
         <p>Examples of TIMESTAMP literals:</p>
         <ul>
            <li><code class="sql">TIMESTAMP '2003-07-29 13:19:30'</code></li>
            <li><code class="sql">TIMESTAMP '2003-07-29 13:19:30.5'</code></li>
         </ul>
         <p>Examples of TIMESTAMP&nbsp;WITH&nbsp;TIME&nbsp;ZONE literals:</p>
         <ul>
            <li><code class="sql">TIMESTAMP '2003-07-29 13:19:30+02:00'</code></li>
            <li><code class="sql">TIMESTAMP '2003-07-29 13:19:30.5+02:00'</code></li>
         </ul>

         <p><small>It's strange that TIMESTAMP&nbsp;WITH&nbsp;TIME&nbsp;ZONE literals 
         are not represented as, e.g., 
         <code>TIMESTAMP&nbsp;<strong>WITH&nbsp;TIME&nbsp;ZONE</strong>&nbsp;'2003-07-29&nbsp;13:19:30+01:00'</code>, but according to 
         <a href="#legend-standard">Melton &amp; Simon's book</a>, they aren't.</small></p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="data_types-date_and_time-timestamp-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Follows that standard with one exception:<br />
         In some cases, <code class="sql">TIMESTAMP '2003-08-23 01:02:03 +02:00'</code> is interpreted 
         as a TIMESTAMP&nbsp;WITH<strong class="underline">OUT</strong>&nbsp;TIME&nbsp;ZONE 
         (discarding the '<code>+02:00</code>' part)&mdash;not 
         as a TIMESTAMP&nbsp;WITH&nbsp;TIME&nbsp;ZONE value. The standard 
         may be illogical regarding this, but a standard is a standard...

         <p>Performs good sanity checks on inserted timestamp values; e.g. this will work:<br />
         <code class="sql">&nbsp;&nbsp;&nbsp;INSERT INTO <span class="foo">tablename</span> (<span class="foo">columnname</span>)<br />&nbsp;&nbsp;&nbsp;VALUES (TIMESTAMP '2003-02-28 00:05:00')</code><br />
         while this will <em>fail</em>:<br />
         <code class="sql">&nbsp;&nbsp;&nbsp;INSERT INTO <span class="foo">tablename</span> (<span class="foo">columnname</span>)<br />&nbsp;&nbsp;&nbsp;VALUES (TIMESTAMP '2003-02-2<strong>9</strong> 00:05:00')</code></p>
         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/datatype-datetime.html#AEN4926">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="data_types-date_and_time-timestamp-db2">DB2</a></td>
      <td class="solution">
         DB2 has the TIMESTAMP data type, but not the extended TIMESTAMP WITH TIME ZONE type.<br />
         DB2 accepts TIMESTAMP literals like <code class="sql">'2003-07-23 00:00:00'</code>, however 
         it doesn't accept the typed <code class="sql">TIMESTAMP '2003-07-23 00:00:00'</code> variant.

         <p>Performs good sanity checks on inserted timestamp values; e.g. this will work:<br />
         <code class="sql">&nbsp;&nbsp;&nbsp;INSERT INTO <span class="foo">tablename</span> (<span class="foo">columnname</span>)<br />&nbsp;&nbsp;&nbsp;VALUES ('2003-02-28 00:05:00')</code><br />
         while this will <em>fail</em>:<br />
         <code class="sql">&nbsp;&nbsp;&nbsp;INSERT INTO <span class="foo">tablename</span> (<span class="foo">columnname</span>)<br />&nbsp;&nbsp;&nbsp;VALUES ('2003-02-2<strong>9</strong> 00:05:00')</code></p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0008474.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="data_types-date_and_time-timestamp-mssql">MSSQL</a></td>
      <td class="solution">
         Note that MSSQL's choice of words related to date and time is 
         confusing: In MSSQL's vocabulary, <em>datetime</em> is a concrete data type,
         whereas in the SQL standard, datetime is a general term covering the 
         DATE, TIME and TIMESTAMP types.

         <p>MSSQL has a strange pseudo-type called TIMESTAMP, but has 
         deprecated it; don't use it in new code.</p>

         <p>The closest match to the SQL standard's TIMESTAMP type is 
         <strong>DATETIME</strong>. This type stores the combination 
         of date and time. It has a maximum of three fractional digits 
         for seconds.</p>

         <p>Performs good sanity checks on inserted timestamp values; e.g. this will work:<br />
         <code class="sql">&nbsp;&nbsp;&nbsp;INSERT INTO <span class="foo">tablename</span> (<span class="foo">columnname</span>)<br />&nbsp;&nbsp;&nbsp;VALUES ('2003-02-28 00:05:00')</code><br />
         while this will <em>fail</em>:<br />
         <code class="sql">&nbsp;&nbsp;&nbsp;INSERT INTO <span class="foo">tablename</span> (<span class="foo">columnname</span>)<br />&nbsp;&nbsp;&nbsp;VALUES ('2003-02-2<strong>9</strong> 00:05:00')</code></p>

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms187819.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="data_types-date_and_time-timestamp-mysql">MySQL</a></td>
      <td class="solution">
         <em>No matter what date/time data type chosen in MySQL, storage of fractional 
         seconds and time zones are not supported</em> (the <code>TIME</code> type accepts time literals with fractional seconds, but discards the fractional part when storing the value). You will have to invent your 
         own systems for such information.
         <br />Note also, that MySQL's choice of words related to date and time is 
         confusing: In MySQL's vocabulary, <em>datetime</em> is a concrete data type,
         whereas in the SQL standard, datetime is a general term covering the 
         DATE, TIME and TIMESTAMP types.

         <p>MySQL has a type called TIMESTAMP, but it is quite different from 
         the standard TIMESTAMP: It's a 'magic' data type with side effects in that it's
         automatically updated to the current date and 
         time if some criteria are fulfilled.</p>

         <p>MySQL has a type called DATETIME. Like 
         MySQL's TIMESTAMP type, it stores a combination of date and time without
         fractional seconds. There are no side effects associated with the DATETIME 
         type&mdash;which makes it the closest match to the SQL standard's 
         TIMESTAMP type.</p>

         <p>By default, MySQL's sanity checks with regard to dates and time are
         (deliberately) poor. For example,
         MySQL accepts DATETIME values of '2003-02-2<strong>9</strong>&nbsp;00:05:00' and 
         '2003-01-3<strong>2</strong>&nbsp;00:00:00'. Such values yield warnings (which you must 
         check for if you want to be warned), but result in a value of 
         zero being stored.</p>

         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/date-and-time-types.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="data_types-date_and_time-timestamp-oracle">Oracle</a></td>
      <td class="solution">
         Follows the standard. Oracle has both the TIMESTAMP and the extended 
         TIMESTAMP&nbsp;WITH&nbsp;TIME&nbsp;ZONE types.

         <p>A special gotcha applies, though: <a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/clauses002.htm#SQLRF52196">Oracle forbids columns of type TIMESTAMP&nbsp;WITH&nbsp;TIME&nbsp;ZONE as part of a unique key</a>; this includes primary and foreign keys. Timestamps without time zone (and Oracle's special TIMESTAMP&nbsp;WITH&nbsp;LOCAL&nbsp;TIME&nbsp;ZONE) are accepted.</p>

         <p>Performs good sanity checks on inserted timestamp values; e.g. this will work:<br />
         <code class="sql">&nbsp;&nbsp;&nbsp;INSERT INTO <span class="foo">tablename</span> (<span class="foo">columnname</span>)<br />&nbsp;&nbsp;&nbsp;VALUES (TIMESTAMP'2003-02-28 00:05:00')</code><br />
         while this will <em>fail</em>:<br />
         <code class="sql">&nbsp;&nbsp;&nbsp;INSERT INTO <span class="foo">tablename</span> (<span class="foo">columnname</span>)<br />&nbsp;&nbsp;&nbsp;VALUES (TIMESTAMP'2003-02-2<strong>9</strong> 00:05:00')</code></p>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/sql_elements001.htm#sthref159">Documentation</a></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="data_types-date_and_time-timestamp-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h2><a class="name" name="functions">SQL functions</a></h2>

<h3><a class="name" name="functions-CHARACTER_LENGTH">CHARACTER_LENGTH</a></h3>
<table>
   <tr class="standard">
      <td class="product"><a class="name" name="functions-CHARACTER_LENGTH-standard">Standard</a></td>
      <td class="solution"><code class="sql">CHARACTER_LENGTH(<span class="foo">argument</span>)</code>
         <br />If the optional feature T061 is implemented, the function may be augmented with an indication of <em>string unit</em>:
         <br /><code class="sql">CHARACTER_LENGTH(<span class="foo">argument</span> USING <span class="foo">string-unit</span></code>)
         <br /><span class="foo">string-unit</span> may be <code>UTF8</code>, <code>UTF16</code>, <code>UTF32</code>.

         <p>Returns NUMERIC. Returns NULL if the input is NULL.<br />
         Alias: CHAR_LENGTH.<br />
         The argument may be of type CHAR or VARCHAR.<br />
         Part of the Core SQL requirements (feature ID E021-04).<br />
         Related function: OCTET_LENGTH.</p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="functions-CHARACTER_LENGTH-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Follows the standard, providing <code class="sql">CHARACTER_LENGTH</code> (and <code class="sql">CHAR_LENGTH</code>).

         <p>Note that PostgreSQL removes trailing (not leading) space from from CHAR values before counting. Note also that the behaviour of CHARACTER_LENGTH with regard to CHAR values has changed between versions 7.4 and 8.0 of PostgreSQL.</p>

         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/functions-string.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="functions-CHARACTER_LENGTH-db2">DB2</a></td>
      <td class="solution">
         Has a CHARACTER_LENGTH function, but it's non-compliant because it requires indication of <em>string unit</em>, and db2's string units are different from the standard's.

         <p>Provides the <code>LENGTH</code> function for those who don't want to think about string units, but the LENGTH function <a href="http://groups.google.com/group/comp.databases.ibm-db2/browse_thread/thread/7df20b1f60792c46/9138d1af6c83ad53">may return wrong results in UTF-8 databases</a>.</p>

         <p>Note that CHAR values are space-padded (like the standard 
         says they should be), so the length of 
         <code>'HEY&nbsp;&nbsp;'</code> is 5. Consider 
         using <code class="sql">LENGTH(TRIM(<span class="foo">foo</span>))</code> if you 
         want the length without trailing spaces.</p>

         <p><span class="doclink">Documentation</span>: <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0023193.htm">CHARACTER_LENGTH</a> and <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0000818.htm">LENGTH</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="functions-CHARACTER_LENGTH-mssql">MSSQL</a></td>
      <td class="solution">
         Doesn't have CHARACTER_LENGTH. Provides the <code>LEN</code> and <code>DATALENGTH</code> functions instead (the latter is especially valid for 'special' data types like the <code>TEXT</code> type).<br />
         Note that MSSQL's <code>LEN</code>-function removes trailing (not leading) spaces from CHAR values before counting; MSSQL's <code>DATALENGTH</code> doesn't discard spaces.

         <p><span class="doclink">Documentation</span>: <a href="http://msdn2.microsoft.com/en-us/library/ms190329.aspx">LEN</a> and <a href="http://msdn2.microsoft.com/en-us/library/ms173486.aspx">DATALENGTH</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="functions-CHARACTER_LENGTH-mysql">MySQL</a></td>
      <td class="solution">
      Provides CHARACTER_LENGTH.<br />
      Aliases: CHAR_LENGTH, LENGTH.<br />
      Note that MySQL removes trailing (not leading) spaces from CHAR values before counting.

      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/string-functions.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="functions-CHARACTER_LENGTH-oracle">Oracle</a></td>
      <td class="solution">
         Doesn't have CHARACTER_LENGTH. Provides the <code>LENGTH</code> function instead.

         <p>Behaves in strange ways if the input is the empty string or NULL, because of Oracles 
         non-standard NULL handling (it considers NULL and the empty string identical 'values').</p>

         <p>Note that CHAR values are space-padded (like the standard 
         says they should be), so the length of 
         <code>'HEY&nbsp;&nbsp;'</code> is 5. Consider 
         using <code class="sql">LENGTH(TRIM(TRAILING FROM <span class="foo">foo</span>))</code> if you 
         want the length without leading/trailing spaces.</p>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/functions086.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="functions-CHARACTER_LENGTH-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h3><a class="name" name="functions-SUBSTRING">SUBSTRING</a></h3>
<table>
   <tr class="standard">
      <td class="product"><a class="name" name="functions-SUBSTRING-standard">Standard</a></td>
      <td class="solution">The standard defines two variants of the SUBSTRING function:
         <ol>
            <li><a class="name" name="functions-SUBSTRING-standard-ordinary">To</a> comply with Core SQL (Feature E021-06), the DBMS must support an '<strong>ordinary</strong>' SUBSTRING function which extracts characters from a string:
               <br /><code class="sql">SUBSTRING(<span class="foo">input</span> FROM <span class="foo">start-position</span> [FOR <span class="foo">length</span>])</code>
               <br />Strings start at position 1. The <code><span class="foo">start-position</span></code> argument is a numeric value, as is the optional <code><span class="foo">length</span></code>-argument. If no <code><span class="foo">length</span></code> parameter is indicated, <code><span class="foo">length</span></code> becomes <em>infinite</em>

               <p><small>(The standard specifies an extra optional argument&mdash;<code>USING <span class="foo">x</span></code>&mdash;that has to do with <em>Universal Character Sets</em>, e.g. Unicode. <em>x</em> may be one of OCTETS or CHARACTERS.)</small></p>

               <p>The result is NULL if any of the arguments is NULL.</p>

               <p>Some cases of out-of-range values for <span class="foo">start-position</span> and <span class="foo">length</span> are allowed. Examples:</p>
<ul>
<li><code class="sql">SUBSTRING('12345'&nbsp;FROM&nbsp;6)</code> yields the empty string.</li>
<li>A <code><span class="foo">start-position</span></code> less than 1 effectively sets <code><span class="foo">start-position</span></code> to 1 and reduces the value of <code><span class="foo">length</span></code> by <em>1+abs(</em><code><span class="foo">start-position</span></code><em>)</em>.
<br />I.e., if <code><span class="foo">start-position</span></code> is -3 and <code><span class="foo">length</span></code> is 6, then the <span class="foo">length</span> value becomes 2. 
<br />&nbsp;<br />Another way to put it is that when <code><span class="foo">start-position</span></code> is negative, a bunch of arbitrary/blank characters are prepended to the input-value. <em>bunch</em>=<em>1-</em><code><span class="foo">start-position</span></code>.</li>
</ul>
<p>For an exact definition: see item three in the &quot;General Rules&quot; part of section 6.29 in the standard.</p></li>

            <li><a class="name" name="functions-SUBSTRING-standard-regex">The</a> DBMS may optionally offer a <strong>regular expression</strong> variant (Feature T581) of SUBSTRING:
               <br /><code class="sql">SUBSTRING(<span class="foo">input</span> SIMILAR <span class="foo">pattern</span> ESCAPE <span class="foo">escape-char</span>)</code>
               <br /><em>Pattern</em> deserves some explanation. It's a string which needs to consist of 
               three parts: A part matching <em>before</em> the wanted sub-string, 
               the wanted substring, and a part matching <em>after</em> the wanted substring.
               <br />The parts must be separated by a combination of the indicated <em>escape-char</em> (escape-character) 
               and a double-quote (&quot;). Example:
               <br />&nbsp;<code>SUBSTRING('abc'&nbsp;SIMILAR&nbsp;'a#&quot;b#&quot;c'&nbsp;ESCAPE&nbsp;'#')</code>
               <br />should yield
               <br />&nbsp;<code>b</code>
               <br />The pattern description rules in SQL don't completely resemble POSIX regular expressions, as far as I can see.
               </li>
         </ol>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="functions-SUBSTRING-postgresql">PostgreSQL</a></td>
      <td class="solution">PostgreSQL provides three SUBSTRING flavors:
      <ul>
      <li>Ordinary SUBSTRING: As the standard's ordinary SUBSTRING variant.</li>
      <li>POSIX regular expression SUBSTRING: Syntax is
         <br /><code class="sql">SUBSTRING(<span class="foo">input</span> FROM <span class="foo">pattern-string</span>)</code>
         <br />Pattern rules are of the <a href="http://www.die.net/doc/linux/man/man7/regex.7.html">POSIX variant</a>. Returns NULL when pattern doesn't match.</li>
      <li>Sort-of SQL-style regular expression SUBSTRING: Syntax is
         <br /><code class="sql">SUBSTRING(<span class="foo">input</span> FROM <span class="foo">pattern-string</span> FOR <span class="foo">escape-char</span>)</code>
         <br />Pattern-rules are supposed to match the SQL-standard's rules, although my tests sometimes suggest otherwise (hasn't been reported as bugs, because I'm not completely sure how SQL's regex-rules are supposed to be expressed). Returns NULL when pattern doesn't match.</li>
      </ul>
      <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/functions-string.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="functions-SUBSTRING-db2">DB2</a></td>
      <td class="solution">Provides <sup>(since version 9)</sup> the <code>SUBSTRING</code> function, but requires you to indicate string unit by appending &quot;<code>USING <span class="foo">unit</span></code>&quot;.
      <br />The unit identifier may be <code>CODEUNITS16</code>, <code>CODEUNITS32</code>, or <code>OCTETS</code>. <code>CODEUNITS16</code>/<code>CODEUNITS32</code> seem non-standard. The standard's <code>CHARACTERS</code> unit isn't supported by DB2.
      <br />Example:
      <br /><code class="sql">SELECT SUBSTRING(<span class="foo">somecolumn</span> FROM <span class="foo">3</span> USING OCTETS) FROM <span class="foo">sometable</span></code>
      <br /><code class="sql">SELECT SUBSTRING(<span class="foo">somecolumn</span> FROM <span class="foo">3</span> FOR <span class="foo">2</span> USING OCTETS) FROM <span class="foo">sometable</span></code>

      <p>For old DB2 versions, use the non-standard <code>SUBSTR</code> function.</p>

      <p>DB2 doesn't provide any built-in regular expression facilities at all (but you may <a href="http://www-128.ibm.com/developerworks/db2/library/techarticle/0301stolze/0301stolze.html">manually add PCRE capabilities</a>).</p>

      <p><span class="doclink">Documentation</span>:  <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0023196.htm">SUBSTRING</a> and <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0000854.htm">SUBSTR</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="functions-SUBSTRING-mssql">MSSQL</a></td>
      <td class="solution">MSSQL has a <code>SUBSTRING</code> function, but its syntax differs from that of the standard. The syntax is:

      <p><code>SUBSTRING(<span class="foo">input</span>, <span class="foo">start</span>, <span class="foo">length</span>)</code></p>
      <p>where <span class="foo">start</span> is an integer specifying the beginning of the string, and <span class="foo">length</span> is a non-negative integer indicating how many characters to return.</p>

      <p>MSSQL has no regular expression functionality.</p>

      <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms187748.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="functions-SUBSTRING-mysql">MySQL</a></td>
      <td class="solution">MySQL supports the standard's ordinary SUBSTRING function, with some twists (see below). No regular expression based substring extraction is supported.
      <br />&nbsp;
      <br />MySQL breaks the standard when negative values are used as either start-position or length:
      <ul>
      <li>According to the standard, <code class="sql">SUBSTRING('abc' FROM -2 FOR 4)</code> should yield <code>'a'</code>;in MySQL, the result is 'bc'.</li>
      <li>According to the standard, <code class="sql">SUBSTRING('abc' FROM 2 FOR -4)</code> should yield an error; MySQL returns an empty string.</li>
      </ul>

      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#id2892440">Documentation</a></p>
   </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="functions-SUBSTRING-oracle">Oracle</a></td>
      <td class="solution">Doesn't provide the standard SUBSTRING function. Provides <code>SUBSTR(<span class="foo">input</span>,<span class="foo">start-pos</span>[,<span class="foo">length</span>])</code> instead (i.e. <span class="foo">length</span> is optional).
      <br />Oracle provides a number of SUBSTR-variants (SUBSTRB, SUBSTRC, SUBSTR2, SUBSTR4, same syntax as for SUBSTR), mainly for handling various kinds of non-latin-only string-types.
      <br />Oracle doesn't have support for string-extraction with the special SQL-style regular expressions. Instead, it has the REGEXP_SUBSTR function which offers string extraction, using POSIX-style regular expression pattern matching.
      <p><span class="doclink">Documentation</span>: <a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/functions179.htm">SUBSTR</a> and <a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/functions148.htm">REGEXP_SUBSTR</a>.</p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="functions-SUBSTRING-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<div class="note">
<p><a class="name" name="functions-SUBSTRING-note">Note</a>: If you find yourself using SUBSTRING in a WHERE-expression, then consider if LIKE could be used instead: The use of LIKE will typically make your DBMS try to use an index, whereas it will typically not try to do so in connection with functions.</p>
</div>

<h3><a class="name" name="functions-REPLACE">REPLACE</a></h3>

<p><code>REPLACE</code> means a string-function which searches a source string (haystack) for occurrences of 
a string to be replaced (needle) and replaces it with a new string (replacement).</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="functions-REPLACE-standard">Standard</a></td>
      <td class="solution">Not mentioned. May be obtained 
         through a combination of other functions (have a look at the 
         OVERLAY, POSITION and CHARACTER_LENGTH functions).

         <br />&nbsp;<br />A <em>de facto</em> standard seems to have emerged with 
         regard to REPLACE:<br />&nbsp;<br />
         <code>REPLACE (<strong>haystack</strong>:string,<strong>needle</strong>:string,<strong>replacement</strong>:string)</code><br />&nbsp;<br />
         which means 'replace <strong>needle</strong> with <strong>replacement</strong> in the string <strong>haystack</strong>'.
         Replacement is done case-<strong>sensitively</strong> unless otherwise stated.

         <br />&nbsp;<br />The REPLACE function may be handy for correcting spelling errors (and other situations):
         <br /><code class="sql">
            UPDATE <span class="foo">tablename</span><br />
            SET fullname=REPLACE(fullname,'Jeo ','Joe ')
         </code>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="functions-REPLACE-postgresql">PostgreSQL</a></td>
      <td class="solution">Follows <em>de facto</em> standard.
         <br /><span class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/functions-string.html#FUNCTIONS-STRING-OTHER">Documentation</a></span>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="functions-REPLACE-db2">DB2</a></td>
      <td class="solution">Follows <em>de facto</em> standard.
         <br /><span class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0000843.htm">Documentation</a></span></td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="functions-REPLACE-mssql">MSSQL</a></td>
      <td class="solution">Follows <em>de facto</em> standard with the exception that MSSQL by default works case <strong>in</strong>sensitively.
         <br /><span class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms186862.aspx">Documentation</a></span></td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="functions-REPLACE-mysql">MySQL</a></td>
      <td class="solution">Follows <em>de facto</em> standard.
         <br />MySQL even works case <strong>sensitively</strong>.<sup><a href="#functions-REPLACE-note1">1</a></sup>
	 <br />Note that the <code>REPLACE</code>-function is different from MySQL's 
		non-standard <code>REPLACE&nbsp;<strong>INTO</strong></code> expression.
         <br /><span class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#id2891766">Documentation</a></span></td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="functions-REPLACE-oracle">Oracle</a></td>
      <td class="solution">Follows <em>de facto</em> standard.
         <br /><span class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/functions151.htm">Documentation</a></span></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="functions-REPLACE-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<div class="note">
<p><a class="name" name="functions-REPLACE-note1">Note 1</a>:
<br />In this author's opinion, it's confusing that most (if not all)
string-related functions in MySQL work case <strong>sensitively</strong>,
while MySQL's <a href="http://sql-info.de/mysql/gotchas.html#1_4">default
behaviour is to work case <strong>in</strong>sensitively in
plain WHERE-clauses</a> involving string comparisons.</p>
</div>

<h3><a class="name" name="functions-TRIM">TRIM</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="functions-TRIM-standard">Standard</a></td>
      <td class="solution">
         Core SQL feature ID E021-09:
         <code class="sql">TRIM(<span class="foo">where</span> <span class="foo">characters</span> FROM <span class="foo">string_to_be_trimmed</span>)</code>

         <p><span class="foo">where</span> may be one of LEADING, TRAILING or BOTH&mdash;or omitted which implies BOTH.</p>

         <p><span class="foo">characters</span> indicates what character(s) to remove
            from the head and/or tail of the string. 
            It may be omitted which implies the value '&nbsp;' (space character).</p>

         <p>In other words, the shortest form is <code class="sql">TRIM(<span class="foo">string_to_be_trimmed</span>)</code> which in effect means <code class="sql">TRIM(BOTH ' ' FROM <span class="foo">string_to_be_trimmed</span>)</code>.</p>

         <p>Trimming NULL returns NULL.</p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="functions-TRIM-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Follows the standard.

         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/functions-string.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="functions-TRIM-db2">DB2</a></td>
      <td class="solution">
         Follows the standard.<sup>(since version 9.1)</sup>

         <p>In db2 versions lower than 9.1, you only have:<br />
            &nbsp;&nbsp;<code class="sql">LTRIM(<span class="foo">string_to_be_trimmed</span>)</code><br />
            and<br />
            &nbsp;&nbsp;<code class="sql">RTRIM(<span class="foo">string_to_be_trimmed</span>)</code></p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0023198.htm">Documentation</a>.</p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="functions-TRIM-mssql">MSSQL</a></td>
      <td class="solution">
         Doesn't support the standard TRIM function.

         <p>Provides <br />
            &nbsp;&nbsp;<code class="sql">LTRIM(<span class="foo">string_to_be_trimmed</span>)</code><br />
            and<br />
            &nbsp;&nbsp;<code class="sql">RTRIM(<span class="foo">string_to_be_trimmed</span>)</code></p>
         <p><span class="doclink">Documentation</span>: <a href="http://msdn2.microsoft.com/en-us/library/ms177827.aspx">LTRIM</a> and <a href="http://msdn2.microsoft.com/en-us/library/ms178660.aspx">RTRIM</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="function-TRIM-mysql">MySQL</a></td>
      <td class="solution">
         Follows the standard.

         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#id2892762">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="functions-TRIM-oracle">Oracle</a></td>
      <td class="solution">Follows the standard with two exceptions:
      <ul>
      <li>Oracle doesn't allow you to trim multiple characters. I.e., <code class="sql">TRIM('**' FROM <span class="foo">foo</span>)</code> is illegal in Oracle.</li>
      <li>Due to Oracle's non-standard NULL-handling, you may get strange results of 
         trimming NULL or the empty string.</li>
      </ul>

      <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/functions217.htm">Documentation</a></p></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="functions-TRIM-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h3><a class="name" name="functions-LOCALTIMESTAMP">LOCALTIMESTAMP</a></h3>

<p>It's often important to get the value of current date and time. Below 
are the functions used to do that in the different implementations.</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="functions-LOCALTIMESTAMP-standard">Standard</a></td>
      <td class="solution">
         The current timestamp (without time zone) is retrieved 
         with the LOCALTIMESTAMP function which may be used as:
         <p><code class="sql">SELECT LOCALTIMESTAMP ...</code><br />
         or<br />
         <code class="sql">SELECT LOCALTIMESTAMP(<span class="foo">precision</span>) ...</code></p>

         <p>Note that &quot;<code>SELECT&nbsp;LOCALTIMESTAMP() ...</code>&quot; is illegal: If you 
         don't care about the precision, then you must not use any parenthesis.</p>

         <p>If the DBMS supports the non-core time zone features (feature ID F411), then 
         it must also provide the functions <code class="sql">CURRENT_TIMESTAMP</code> 
         and <code class="sql">CURRENT_TIMESTAMP(<span class="foo">precision</span>)</code> 
         which return a value of type TIMESTAMP&nbsp;WITH&nbsp;TIME&nbsp;ZONE.
         If it doesn't support time zones, then the DBMS <em>must not</em> provide 
         a CURRENT_TIMESTAMP function.</p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="functions-LOCALTIMESTAMP-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Follows the standard.

         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/functions-datetime.html#FUNCTIONS-DATETIME-CURRENT">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="functions-LOCALTIMESTAMP-db2">DB2</a></td>
      <td class="solution">
         Doesn't have the LOCALTIMESTAMP function.

         <p>Instead, it provides a special, 
         magic value ('special register' in IBM language), <em>CURRENT_TIMESTAMP</em> 
         (alias to 'CURRENT&nbsp;TIMESTAMP') which may be used as though it 
         were a function without arguments. However, since DB2 doesn't provide 
         TIMESTAMP&nbsp;WITH&nbsp;TIME&nbsp;ZONE 
         support, the availability of CURRENT_TIMESTAMP could be said to be 
         against the standard&mdash;at least confusing.</p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0005886.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="functions-LOCALTIMESTAMP-mssql">MSSQL</a></td>
      <td class="solution">
         Doesn't have the LOCALTIMESTAMP function.

         <p>Instead, it has CURRENT_TIMESTAMP which&mdash;however&mdash;doesn't return 
         a value of TIMESTAMP&nbsp;WITH&nbsp;TIME&nbsp;ZONE, but rather 
         a value of MSSQL's DATETIME type (which doesn't contain time zone information).</p>

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms188751.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="functions-LOCALTIMESTAMP-mysql">MySQL</a></td>
      <td class="solution">
         Follows the standard.

         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/date-and-time-functions.html#id2901496">Documentation</a></p>

      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="functions-LOCALTIMESTAMP-oracle">Oracle</a></td>
      <td class="solution">Follows the standard.</td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="functions-LOCALTIMESTAMP-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h3><a class="name" name="functions-concat">Concatenation</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="functions-concat-standard">Standard</a></td>
      <td class="solution">
         Core feature ID E021-07:<br />
         Concatenating two strings is done with the <code class="sql">||</code> 
         operator:

         <p><code class="sql"><span class="foo">string1</span> || <span class="foo">string2</span></code></p>

         <p>If at least one operand is NULL, then the result is NULL.</p>

         <p>It's unclear to me if the DBMS is allowed to try to automatically 
         cast the operands to concatenation-compatible types.</p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="functions-concat-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Follows the standard.

         <p>Automatically casts the concatenated values into types compatible 
         with concatenation. If an operand is NULL then the result is NULL.</p>

         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/functions-string.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="functions-concat-db2">DB2</a></td>
      <td class="solution">
         Follows the standard, partly.

         <p>Does not automatically cast concatenated values into compatible types.</p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0000736.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="functions-concat-mssql">MSSQL</a></td>
      <td class="solution">
         Breaks the standard by using the '+' operator instead of '||'.

         <p>Does not automatically cast operands to compatible types. If an operand is 
         NULL, then the result is NULL.</p>

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms177561.aspx">Documentation</a></p></td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="functions-concat-mysql">MySQL</a></td>
      <td class="solution">
         Badly breaks the standard by redefining <code>||</code> to mean <code class="sql">OR</code>.

         <p>Offers instead a function, <code>CONCAT(<span class="foo">string, string</span>)</code>, which 
         accepts two or more arguments.</p>

         <p>Automatically casts values into types which can be concatenated. If an operand is NULL, then 
         the result is NULL.</p>

         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#id2889045">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="functions-concat-oracle">Oracle</a></td>
      <td class="solution">
         Follows the standard, partly.

         <p>Automatically casts values into types which can be concatenated.</p>

         <p>As Oracle interprets NULL as the empty string, 
         it doesn't return NULL if an operand is NULL.</p>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/operators003.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="functions-concat-informix">Informix</a></td>
      <td class="solution">Follows the standard.

         <p>Automatically casts numeric data into character data, if needed. If an operand is NULL then the result is NULL.</p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqls.doc/ids_sqs_0185.htm">Documentation</a></p>
      </td>
   </tr>
</table>

<h2><a class="name" name="constraints">Constraint handling</a></h2>
<h3><a class="name" name="constraints-unique">The UNIQUE constraint</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="constraints-unique-standard">Standard</a></td>
      <td class="solution">As the constraint name indicates, 
         a (set of) column(s) with a UNIQUE constraint may only contain 
         unique (combinations of) values.

         <p><a class="name" name="constraints-unique-standard-null">A</a> column&mdash;or
         a set of columns&mdash;which is subject to
         a UNIQUE constraint must also be subject to a <em>not NULL</em> constraint, unless 
         the DBMS implements an optional &quot;NULLs allowed&quot;
         feature (Feature ID 591). The optional feature adds some additional
         characteristics to the UNIQUE constraint:</p>

         <ol>
         <li><a class="name" name="constraints-unique-standard-null-1">Columns</a>
            involved in a UNIQUE constraint <em>may</em> also 
            have NOT&nbsp;NULL constraints, but they do not have to.</li>
         <li><a class="name" name="constraints-unique-standard-null-2">If</a> 
            columns with UNIQUE constraints do <em>not</em> also have 
            NOT&nbsp;NULL constraints, then the columns may 
            contain <em>any</em> number of NULL-'values'. (Logical 
            consequence of the fact that NULL&lt;&gt;NULL.)<br />
            In the standard-parlance, the constraint is satisfied, if

            <blockquote><p>there are no two rows in [the relation] such
               that the value of each column in one row is non-null and
               is not distinct from the value of the corresponding column
               in the other row</p></blockquote>
            </li>
         </ol>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="constraints-unique-postgresql">PostgreSQL</a></td>
      <td class="solution">Follows the standard, including the optional <a href="#constraints-unique-standard-null">NULLs allowed</a> feature.

      <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/ddl-constraints.html#AEN2058">Documentation</a></p></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="constraints-unique-db2">DB2</a></td>
      <td class="solution">Follows the non-optional parts of the UNIQUE-constraint. Doesn't 
         implement the optional <a href="#constraints-unique-standard-null">NULLs allowed</a>
         feature.

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/c0004111.htm">Documentation</a> (see the <em>unique-constraint</em> section of the page).</p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="constraints-unique-mssql">MSSQL</a></td>
      <td class="solution">Follows the standard&mdash;with a twist:

         <p>MSSQL offers the <a href="#constraints-unique-standard-null">NULLs allowed</a> 
         feature, but allows <em>at most</em> one 
         instance of a NULL-'value', if NULLs are allowed; i.e. breaks 
         <a href="#constraints-unique-standard-null-2">characteristic 2</a>
         in the above description of the standard.</p>

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms191166.aspx">Documentation</a></p></td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="constraints-unique-mysql">MySQL</a></td>
      <td class="solution">Follows the standard, including the optional <a href="#constraints-unique-standard-null">NULLs allowed</a> feature.

         <!-- p class="doclink"><a href="">Documentation</a></p --></td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="constraints-unique-oracle">Oracle</a></td>
      <td class="solution">Follows the standard&mdash;with a twist regarding multiple-column UNIQUE-constraints:

         <p>The optional 
         <a href="#constraints-unique-standard-null">NULLs allowed</a> feature 
         is implemented: If the UNIQUE-constraint is imposed on 
         a <em>single</em> column, then the column may contain any number of NULLs 
         (as expected from <a href="#constraints-unique-standard-null-2">characteristic 2</a>
         in the above description of the standard). However, if the UNIQUE-constraint 
         is specified for <em>multiple</em> columns, then Oracle sees the 
         constraint as violated if any two rows</p>

         <ul>
         <li>contain at least one NULL in a column affected by the constraint</li>
         <li>identical, non-NULL values in the rest of the columns affected by the constraint</li>
         </ul>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/clauses002.htm#SQLRF52195">Documentation</a></p></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="constraints-unique-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>


<h2><a class="name" name="mix">Mixture of type and operations</a></h2>

<h3><a class="name" name="mix-identity">Automatic key generation</a></h3>

<p>It's sometimes handy to have the DBMS handle generation of 
<a href="http://www.intelligententerprise.com/030320/605celko1_1.jhtml">keys</a>. The 
DBMSes offer various means for this. Note, however, that some database 
authorities warn against&mdash;at least some variants of&mdash;auto-generated keys; this 
is a classic <a href="http://c2.com/cgi/wiki?AutoKeysVersusDomainKeys">database 
discourse</a>.</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="mix-identity-standard">Standard</a></td>
      <td class="solution">
         The standard specifies a column attribute of:<br />
         GENERATED&nbsp;...&nbsp;AS&nbsp;IDENTITY (non-core feature ID T174+T175).

         <p>When creating a table, an IDENTITY clause may be declared 
         for certain types of columns (INTEGER being one):</p>

         <p><code class="sql">
            CREATE TABLE <span class="foo">tablename</span> (<br />
            &nbsp;&nbsp;<span class="foo">tablename_id</span> INTEGER GENERATED <strong>ALWAYS</strong> AS IDENTITY<br />
            &nbsp;&nbsp;...<br />
            )
         </code></p>

         <p>or</p>

         <p><code class="sql">
            CREATE TABLE <span class="foo">tablename</span> (<br />
            &nbsp;&nbsp;<span class="foo">tablename_id</span> INTEGER GENERATED <strong>BY DEFAULT</strong> AS IDENTITY<br />
            &nbsp;&nbsp;...<br />
            )
         </code></p>

         <p>The column with the IDENTITY attribute will be given 
         values in increasing order, possibly with 'holes' (...,3,4,7,...).</p>

         <p>A base table may at most contain one column with the IDENTITY 
         attribute. NOT&nbsp;NULL is implied for an IDENTITY column.
         Normally, a column declared with IDENTITY will also be declared
         PRIMARY&nbsp;KEY, but it's not implied.</p>

         <p>The examples differ in their 'ALWAYS' vs. 'BY DEFAULT' clauses:</p>
         <ul>
            <li>When ALWAYS is specified, the user cannot specify a value for the column which 
            means that the DBMS can guarantee successful insertion of a unique 
            value on each table insert.</li>
            <li>When BY DEFAULT is specified, the user may manually specify what value 
            to put in the identity field of a row. The flip side is that the DBMS cannot 
            guarantee that this will work.</li>
         </ul>

         <p>The standard specifies several extended options which may be declared for 
         a generated IDENTITY column.</p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="mix-identity-postgresql">PostgreSQL</a></td>
      <td class="solution">
         PostgreSQL doesn't support the standard's IDENTITY attribute.

         <p>PostgreSQL's best offering for a column with auto-generated values 
         is to declare a column of 'type' SERIAL:</p>

         <p><code class="sql">
            CREATE TABLE <span class="foo">tablename</span> (<br />
            &nbsp;&nbsp;<span class="foo">tablename_id</span> SERIAL,<br />
            &nbsp;&nbsp;...<br />
            )
         </code></p>

         <p>'SERIAL' is a short-hand for creating a sequence and using that 
         sequence to create unique integers for a column. If the table is 
         dropped, PostgreSQL will drop the sequence which was 
         created as a side-effect of using the SERIAL type.</p>

         <p>As a user may manually
         insert or update a value in a column created as SERIAL, this comes 
         closest to the standard's 
         <code class="sql">GENERATED <strong>BY DEFAULT</strong> AS IDENTITY</code>
         variant.</p>

         <p>If you want semantics like the standard's <code class="sql">GENERATED <strong>ALWAYS</strong> AS IDENTITY</code>, 
         then <code>SERIAL</code> will not do it; instead you need to:</p>
         <ol>
         <li>Create a sequence for the table (assuming that the table is called <i>footab</i>, having a an integer column called <i>id</i>):<br />
            <code class="sql">CREATE SEQUENCE footab_id_seq</code></li>
         <li>Add the <a href="http://www.postgresql.org/docs/8.4/static/plpgsql.html">PL/pgSQL</a> language to the database, in case it doesn't already exist (extra additions don't hurt):<br />
            <code class="sql">CREATE LANGUAGE plpgsql</code></li>
         <li>Create a function to be called by a trigger when <i>footab</i> is changed:<br />
            <code class="sql">CREATE OR REPLACE FUNCTION protect_footab_id() RETURNS TRIGGER AS $$<br />
            BEGIN<br />
            &nbsp;&nbsp;IF tg_op = 'INSERT' THEN<br />
            &nbsp;&nbsp;&nbsp;&nbsp;IF new.id IS NOT NULL THEN<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RAISE EXCEPTION 'setting ID manually not allowed (%)', new.id;<br />
            &nbsp;&nbsp;&nbsp;&nbsp;END IF;<br /> 
            &nbsp;&nbsp;&nbsp;&nbsp;new.id = NEXTVAL('footab_id_seq');<br />
            &nbsp;&nbsp;ELSE<br />
            &nbsp;&nbsp;&nbsp;&nbsp;IF new.id IS DISTINCT FROM old.id THEN<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RAISE EXCEPTION 'changing ID is not allowed (% to %)', old.id, new.id;<br />
            &nbsp;&nbsp;&nbsp;&nbsp;END IF;<br />
            &nbsp;&nbsp;END IF;<br /> 
            &nbsp;&nbsp;RETURN NEW;<br />
            END;<br />
            $$ LANGUAGE PLPGSQL</code></li>
         <li>Create the trigger, calling the above function:<br />
            <code class="sql">CREATE TRIGGER protect_footab_id<br />
            &nbsp;&nbsp;BEFORE INSERT OR UPDATE ON footab<br />
            &nbsp;&nbsp;FOR EACH ROW EXECUTE PROCEDURE protect_footab_id()</code></li>
         </ol>

         <p>Another option is to add the <code class="sql">WITH OIDS</code> clause when creating a table. Object identifiers (OIDs) will then be added to a special <em>oid</em> column which is hidden by default, i.e. isn't included in <code class="sql">SELECT * FROM ...</code> result sets). The <em>oid</em> column can be revealed by explicitly adding it to the <code class="sql">SELECT</code>-list, and it can be referred to in <code class="sql">WHERE</code> clauses. OIDs cannot be assigned by the user, so the semantics of OIDs resemble the standard's <code class="sql">GENERATED <strong>ALWAYS</strong> AS IDENTITY</code> attribute.</p>

         <p><span class="doclink">Documentation</span>: 
            The <a href="http://www.postgresql.org/docs/8.4/static/datatype-numeric.html#DATATYPE-SERIAL">SERIAL</a> and
            <a href="http://www.postgresql.org/docs/8.4/static/datatype-oid.html">OIDs</a>
            types.</p>
         </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="mix-identity-db2">DB2</a></td>
      <td class="solution">
         Follows standard, albeit with some 
         restrictions on how identity columns may (not) 
         be added to an existing table, etc.

         <p><span class="doclink">Documentation</span>: <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0000927.htm">CREATE&nbsp;TABLE&nbsp;syntax</a> and <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/c0004762.htm">description of identity columns</a>.</p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="mix-identity-mssql">MSSQL</a></td>
      <td class="solution">
         MSSQL offers IDENTITY as a column property, but with a different 
         syntax than the standard's specification.
         An example of creating a table with an IDENTITY column:

         <p><code class="sql">CREATE TABLE <span class="foo">tablename</span> (<br />
         &nbsp;&nbsp;<span class="foo">tablename_id</span> INT IDENTITY PRIMARY KEY,<br />
         &nbsp;&nbsp;...<br />
         )</code></p>

         <p>With MSSQL's IDENTITY attribute, the user cannot manually 
         insert the value, unless the user has first run 
         <code>SET&nbsp;IDENTITY_INSERT&nbsp;<span class="foo">tablename</span>&nbsp;ON</code>
         <br />MSSQL refuses to update values in IDENTITY columns.</p>

         <p>I.e., MSSQL's IDENTITY type is closest to the standard's 
         <code>GENERATED&nbsp;...&nbsp;<strong>ALWAYS</strong>&nbsp;AS&nbsp;IDENTITY</code>
         variant.</p>

         <p><span class="doclink">Documentation</span>: <a href="http://msdn2.microsoft.com/en-us/library/ms186775.aspx">The IDENTITY property</a> and <a href="http://msdn2.microsoft.com/en-us/library/ms188059.aspx">SET&nbsp;IDENTITY_INSERT</a>.</p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="mix-identity-mysql">MySQL</a></td>
      <td class="solution">
         MySQL doesn't support the standard's IDENTITY attribute.

         <p>As an alternative, an integer column may be assigned the 
         non-standard <code>AUTO_INCREMENT</code> attribute:</p>

         <p><code class="sql">
            CREATE TABLE <span class="foo">tablename</span> (<br />
            &nbsp;&nbsp;<span class="foo">tablename_id</span> INTEGER AUTO_INCREMENT PRIMARY KEY,<br />
            &nbsp;&nbsp;...<br />
            )
         </code></p>

         <p>Columns with the AUTO_INCREMENT attribute will&mdash;under certain 
         conditions&mdash;automatically be assigned a value
         of &lt;largest&nbsp;value&nbsp;in&nbsp;column&gt;+&lt;at least 1&gt;. Look
         in MySQL's documentation for the (rather extensive) details.</p>

         <p>A table can have at most one column with the AUTO_INCREMENT attribute; that 
         column must be indexed (it doesn't <em>have</em> to be a primary key, as in 
         the example SQL above) and cannot have a DEFAULT value attribute.</p>

         <p>It's probably 
         not too far fetched to think of MySQL's AUTO_INCREMENT feature as this equivalence:<br />
         <code class="sql">&nbsp;&nbsp;</code>MySQL:<br />
         <code class="sql">
         &nbsp;&nbsp;CREATE TABLE <span class="foo">tablename</span> (<br />
         &nbsp;&nbsp;&nbsp;&nbsp;<span class="foo">columnname</span> INTEGER AUTO_INCREMENT PRIMARY KEY<br />
         &nbsp;&nbsp;&nbsp;&nbsp;...<br />
         &nbsp;&nbsp;)<br />
         </code><br />
         <code class="sql">&nbsp;&nbsp;</code>Standard SQL:<br />
         <code class="sql">
         &nbsp;&nbsp;CREATE TABLE <span class="foo">tablename</span> (<br />
         &nbsp;&nbsp;&nbsp;&nbsp;<span class="foo">columnname</span> INTEGER DEFAULT <strong>some_func()</strong> PRIMARY KEY<br />
         &nbsp;&nbsp;&nbsp;&nbsp;...<br />
         &nbsp;&nbsp;)<br />
         </code>
         where <code>some_func()</code> is a function which finds 1 plus the currently largest value of <span class="foo">columnname</span>.</p>

         <p>The nice thing about this approach is that the automatic 
         value insertion should never fail, even though some of the column's 
         values might have been manually set&mdash;i.e. the combined advantages 
         of the standard's <code>ALWAYS</code> and <code>BY&nbsp;DEFAULT</code> variants.</p>

         <p>The drawback is that it might result in more house-keeping: The system may 
         need extra table locks when performing row updates/insertions to protect against 
         ghost updates in concurrent transactions&mdash;thus slowing down the system in 
         case of many concurrent updates/insertions.</p>

         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/create-table.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="mix-identity-oracle">Oracle</a></td>
      <td class="solution">
         Oracle doesn't support the standard's IDENTITY attribute.

         <p>If you want an auto-incrementing column in Oracle, then create a 
         sequence and use that sequence in a trigger associated to the 
         table. Example: For the table <span class="foo">mytable</span>, 
         you want the <span class="foo">mytable_id</span> column to be 
         of integer type, with an auto-incrementing values:</p>

         <p><code class="sql">CREATE TABLE mytable (<br />
         &nbsp;&nbsp;mytable_id INTEGER PRIMARY KEY,<br />
         &nbsp;&nbsp;... -- (other columns)<br />
         );<br />
         &nbsp;<br />
         CREATE SEQUENCE mytable_seq;<br />
         &nbsp;<br />
         CREATE TRIGGER mytable_seq_trigger<br />
         BEFORE INSERT ON mytable FOR EACH ROW<br />
         BEGIN<br />
         &nbsp;&nbsp;IF (:new.mytable_id IS NULL) THEN<br />
         &nbsp;&nbsp;&nbsp;&nbsp;SELECT mytable_seq.nextval INTO :new.mytable_id<br />
         &nbsp;&nbsp;&nbsp;&nbsp;FROM DUAL;<br />
         &nbsp;&nbsp;END IF;<br />
         END;<br />
         /</code></p>

         <p>This will create an auto-incrementing column resembling the 
         <code class="sql">GENERATED&nbsp;BY&nbsp;DEFAULT</code> variant 
         from the standard. If an column resembling the
         <code class="sql">GENERATED ALWAYS</code> variant is needed, then 
         the trigger should be extended to raise an exception if the user 
         tries to insert a non-NULL value, and a trigger preventing 
         UPDATEs of the relevant column should be added.</p>

         <p>Note: If 'nice', incrementing values aren't important, 
         you may use Oracle's SYS_GUID function as the default for a column; that
         way, <em><a href="http://en.wikipedia.org/wiki/Universally_Unique_Identifier">universally unique identifiers</a></em> will be assigned if you don't 
         indicate a value for the column in new rows.</p>

         <p><span class="doclink">Documentation</span>: <code class="sql"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/statements_7004.htm">CREATE TRIGGER</a></code>, <code class="sql"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/statements_6015.htm">CREATE SEQUENCE</a></code>, and <code class="sql"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/functions185.htm">SYS_GUID</a></code>.</p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="mix-identity-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<div class="note">
<p>Note: IBM has a page <a href="http://publib.boulder.ibm.com/infocenter/db2help/index.jsp?topic=/com.ibm.db2.udb.doc/admin/c0004994.htm">comparing IDENTITY columns and sequences</a>.</p>
</div>

<h2><a class="name" name="bulk">Bulk operations</a></h2>

<h3><a class="name" name="bulk-truncate_table">TRUNCATE TABLE</a></h3>

<p>Often, it's useful to be able to remove all rows from a large table in a quick way. And often, <code>DELETE</code> isn't as quick as you'd like it to be. So several DBMSes implement a <code>TRUNCATE</code> operation. Typically, truncating means that deletion isn't associated with triggers which may exist for the table, and typically, truncating involves little (if any) transaction log activity.</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="bulk-truncate_table-standard">Standard</a></td>
      <td class="solution">The SQL standard defines the <code class="sql">TRUNCATE TABLE <em>tablename</em></code> statement (optional feature ID F200, new in SQL:2008) as:<br />
      Delete all rows of a base table without causing any triggered action.

      <p>Unfortunately, the standard doesn't specify</p>
      <ol>
         <li>whether <code class="sql">TRUNCATE TABLE</code> should be allowed in a transaction involving other statements, or not</li>
         <li>whether <code class="sql">TRUNCATE TABLE</code> should imply an immediate <code class="sql">COMMIT</code>, or not</li>
      </ol>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="bulk-truncate_table-postgresql">PostgreSQL</a></td>
      <td class="solution">Follows the standard.

      <p>In PostgreSQL, <code class="sql">TRUNCATE TABLE</code> is <em>allowed in a transaction</em> involving other operations, and <code class="sql">TRUNCATE TABLE</code> does <em>not</em> imply an immediate <code class="sql">COMMIT</code> operation.</p>

      <p>See the documentation for variations and restrictions. Most importantly, you need to have be owner of the table to be truncated (or work as a superuser); alternatively, you need to have TRUNCATE privilege on the table. Note also the nice&mdash;but potentially dangerous&mdash;<code>CASCADE</code> modifier which may be useful for emptying related tables.</p>

      <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/sql-truncate.html">Documentation</a></p></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="bulk-truncate_table-db2">DB2</a></td>
      <td class="solution">Almost follows the standard.<sup>(since version 9.7)</sup>
      <br />DB2 requires that the <code>IMMEDIATE</code> keyword be added the the ordinary <code>TRUNCATE TABLE</code> statement, e.g.:
      <br /><code class="SQL">&nbsp;&nbsp;TRUNCATE TABLE <span class="foo">someschema.sometable</span>&nbsp;IMMEDIATE</code>
      <br /><code>TRUNCATE TABLE</code> must be the first statement in a transaction. A transaction starting with <code>TRUNCATE TABLE</code> may include other statements, but if the transaction is rolled back, the <code>TRUNCATE TABLE</code> operation is not undone.
      <br />DB2s <code>TRUNCATE TABLE</code> operation has a number of optional arguments, see the documentation for more on this; especially, the <code>REUSE&nbsp;STORAGE</code> argument may be important for ad-hoc DBA tasks.

      <p>In DB2 versions&nbsp;&lt;&nbsp;9.7, you may <span style="text-decoration: line-through">ab</span>use the <code>IMPORT</code> statement. Unfortunately, you need to know which operating system the command is executed from for this to work:</p>
      <ul>
         <li>On unix-like systems:
            <br /><code class="sql">IMPORT FROM /dev/null OF DEL REPLACE INTO <span class="foo">tablename</span></code></li>
         <li>On Windows:
            <br /><code class="sql">IMPORT FROM NUL OF DEL REPLACE INTO <span class="foo">tablename</span></code></li>
      </ul>

      <p><code>IMPORT</code> cannot be <span style="text-decoration: line-through">ab</span>used in all contexts. E.g., when working with dynamic SQL (from Java/.NET/PHP/...&mdash;not using the <code>db2</code> command line processor), you need to wrap the <code>IMPORT</code> command in a call to <code>ADMIN_CMD</code>, e.g.:
<br /><code class="sql">CALL ADMIN_CMD('IMPORT FROM /dev/null OF DEL REPLACE INTO tablename')</code></p>

      <p><code class="sql">IMPORT</code> seems to be <em>allowed in a transaction</em> involving other operations, however it implies an immediate <code class="sql">COMMIT</code> operation.</p>

      <p><small>The <code>ALTER TABLE</code> command <a href="http://groups.google.com/group/comp.databases.ibm-db2/tree/browse_frm/thread/cc36736aa9b81c6c/3f88d76e0b143207?rnum=1&amp;_done=%2Fgroup%2Fcomp.databases.ibm-db2%2Fbrowse_frm%2Fthread%2Fcc36736aa9b81c6c%2F3f88d76e0b143207%3F#doc_a0ba85f541175295">may also be <span style="text-decoration: line-through">ab</span>used to quickly empty a table</a>, but it requires more privileges, and may cause trouble with rollforward recovery.</small></p>

      <p><span class="doclink">Documentation</span>:</p>
      <ul>
         <li><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9r7/topic/com.ibm.db2.luw.sql.ref.doc/doc/r0053474.html"><code>TRUNCATE TABLE</code></a></li>
         <li><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0008304.htm"><code>IMPORT</code></a></li>
         <li><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0023575.htm"><code>IMPORT</code> through <code>ADMIN_CMD</code></a></li>
      </ul>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="bulk-truncate_table-mssql">MSSQL</a></td>
      <td class="solution">Follows the standard.

      <p>In MSSQL, <code class="sql">TRUNCATE TABLE</code> is <em>allowed in a transaction</em> involving other operations, and <code class="sql">TRUNCATE TABLE</code> does <em>not</em> imply an immediate <code class="sql">COMMIT</code> operation.</p>

      <p>You need to have at least ALTER-permission on the table to be truncated.</p>

      <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms177570.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="bulk-truncate_table-mysql">MySQL</a></td>
      <td class="solution">MySQL has a <code class="sql">TRUNCATE TABLE</code> statement, but it doesn't always follow the standard.

      <p>Note that in some cases, MySQL's truncate command is really the equivalent of an unrestricted DELETE command (i.e.: potentially slow and trigger-invoking). Its behaviour depends on which <em>storage engine</em> the table is managed by.</p>

      <p>When using InnoDB (transaction safe) tables, <code class="sql">TRUNCATE TABLE</code> is <em>allowed in a transaction</em> involving other operations, however <code class="sql">TRUNCATE TABLE</code> <em>implies</em> an immediate <code class="sql">COMMIT</code> operation.</p>

      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/truncate.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="bulk-truncate_table-oracle">Oracle</a></td>
      <td class="solution">Follows the standard.

      <p>Note, that the <code class="sql">TRUNCATE TABLE</code> <em>implicitly</em> commits the current transaction.</p>

      <p>You may find that <code class="sql">TRUNCATE TABLE</code> isn't nearly as quick as expected; in this case, consider using <code class="sql">TRUNCATE TABLE <span class="foo">tablename</span> <strong>REUSE STORAGE</strong></code> instead.</p>

      <p>Needed privileges&mdash;Quoting from the documentation:
      <br /><em>...the table or cluster must be in your schema or you must have DROP ANY TABLE system privilege.</em></p>

      <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/statements_10007.htm#sthref6853">Documentation</a></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="bulk-truncate_table-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h2><a class="name" name="cli">Command line procedures / metadata</a></h2>

<p>The following are not necessarily SQL operations, but rather a description 
of how different operations are performed in the command line interface provided 
by each product.</p>

<p>The shape of the command line interfaces in the commercial products is depressing. Vendors, please do 
something about it: Not all database developers like to use 
slow GUIs for technical stuff. And sometimes, DBMS work is performed over 
slow Internet lines which makes a decent command line interface vital.</p>

<p>Fortunately, a tool like <a href="http://henplus.sourceforge.net/">HenPlus</a> 
exists. It can be a pain to install, but once working, it's nice to work with.</p>

<h3><a class="name" name="cli-starting">Starting the command line interface</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="cli-starting-standard">Standard</a></td>
      <td class="solution">Not defined.</td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="cli-starting-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Run:<br />
         <code>psql</code><br />
         which should be in the PATH in any sensible installation.

         <p>PostgreSQL's command line interface is very user friendly. It has command 
         history (press arrow-up for previous commands) and a fairly well-working 
         command completion feature.</p>
         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/app-psql.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="cli-starting-db2">DB2</a></td>
      <td class="solution">
         Run:<br />
         <code>db2 -t</code>
         <br /><small>(The <code>-t</code> argument tells the command line processor to a semicolon as statement terminator instead of the default (newline). This allows for multi-line SQL statements.)</small>

         <p>The <code>db2</code> binary may not be in your PATH or may 
         be missing vital environment variables (which is 
         one of the stupid parts of DB2's installation procedure: It 
         doesn't offer to set up a proper global DB2 environment for the 
         users on the server) and you may have to include the <code>db2profile</code>
         file (situated in the <code>sqllib</code> directory in the home directory of
         the special DB2 instance user) into your shell.
         <br />&nbsp;&nbsp;&nbsp;&nbsp;E.g. on my Linux system, I've added the following line to my .bash_profile
         in order to get a shell with proper DB2 environment when logging in:<br />
         <code>.&nbsp;/home/db2inst1/sqllib/db2profile</code></p>

         <p>The 'utility' doesn't seem to have anything resembling useful 
            command history or command completion. Fortunately, queries may be 
            sent to the <code>db2</code> 'utility' in a non-interactive way like this:<br />
            <code class="sql">db2 "SELECT a_column FROM a_table"</code><br />
            This allows you to make use of your shell's command history handling.</p>

         <p>DB2 also has a 'utility' called <code>db2batch</code> which 
         some might find at bit nicer to work with.</p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0010409.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="cli-starting-mssql">MSSQL</a></td>
      <td class="solution">
         The command line interface is started by running<br />
         <code>sqlcmd</code>

         <p><code>sqlcmd</code> is not nice to work with. It's bad at 
         formatting result sets. It doesn't have command line completion. 
         You have to say <code>go</code> after your commands. A positive 
         thing about sqlsmd: It has command history, so you may press 
         arrow-up for previous commands in the current sqlsmd session.</p>

         <p><small>In MSSQL 2000, the command line interface was started by running <code>osql</code></small>.</p>

         <p>An alternative to osql&mdash;apart from HenPlus, mentioned above&mdash;is 
         <a href="http://www.sqsh.org/">SQSH</a> which should work on any 
         modern open source operating system, except it doesn't seem to support Kerberos, so you 
         need to log into the database using a database-account (not a Windows-account).</p>

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms162773.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="cli-starting-mysql">MySQL</a></td>
      <td class="solution">
         Run:<br />
         <code>mysql</code>

         <p>If you need help on the optional command line options, see the 
         man page.</p>

         <p>On platforms like Linux and FreeBSD (which have decent readline-capabilities), 
         MySQL's command line interface is simply great; not much else to say.
         MySQL's command line interface is said to be rather poor on Windows, though.</p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="cli-starting-oracle">Oracle</a></td>
      <td class="solution">
         Run:<br />
         <code>sqlplus</code>

         <p><code>sqlplus</code> lacks command completion, and has very limited built-in command history handling.</p>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10823/toc.htm">Documentation</a></p>

         <p>A unique feature of Oracle is that a web-based administration interface is provided, as a supplement to the local administration software. The URL to the interface is typically <code>https://<span class="foo">hostname</span>:1158/em/</code></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="cli-starting-informix">Informix</a></td>
      <td class="solution">Informix' command line utility is called <code>dbaccess</code>. If run without arguments, it starts a menu system. If you simply want to shoot SQL statements off to the database, another form is more convenient, at least on unix:
         <br /><code>echo 'SELECT foo FROM bar' | dbaccess&nbsp;<span class="variable">databasename</span></code>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.dba.doc/sii-01setup-17177.htm">Documentation</a></p>
      </td>
   </tr>
</table>

<h3><a class="name" name="cli-list_of_databases">Getting a list of databases</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="cli-list_of_databases-standard">Standard</a></td>
      <td class="solution">Not specified, as far as I know. (By the way: The SQL standard doesn't have the concept of a <em>database</em> as a container of schemas; instead, the standard specifies that schemas are contained in a <em>catalog</em>.)</td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="cli-list_of_databases-postgresql">PostgreSQL</a></td>
      <td class="solution">Using SQL: <code class="sql">SELECT&nbsp;datname&nbsp;FROM pg_catalog.pg_database</code>

         <p>When working in the <code>psql</code> command line interface: <code class="sql">\l</code> or <code>\l+</code></p>

         <p>Alternative (when working from the terminal, not in <code>psql</code>): <code>psql&nbsp;--list</code></p>

         <p><span class="doclink">Documentation</span>: The <a href="http://www.postgresql.org/docs/8.4/static/app-psql.html">psql</a> tool, the <a href="http://www.postgresql.org/docs/8.4/static/catalog-pg-database.html">pg_database</a> catalog.</p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="cli-list_of_databases-db2">DB2</a></td>
      <td class="solution">Offers the <code class="sql">LIST DATABASE DIRECTORY</code> command, but only when working in the <code>db2</code> command line processor (i.e. not when working from <code>db2batch</code>); this command's output is human readable, but sub-optimal as machine readable format. 

       <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0001961.htm">Documentation</a></p>

      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="cli-list_of_databases-mssql">MSSQL</a></td>
      <td class="solution"><code class="sql">EXEC SP_HELPDB</code>
      <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms178568.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="cli-list_of_databases-mysql">MySQL</a></td>
      <td class="solution"><code class="sql">SHOW DATABASES</code>

         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/show-databases.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="cli-list_of_databases-oracle">Oracle</a></td>
      <td class="solution">In Oracle, there is a one-to-one relationship between <em>databases</em> and <em>instances</em> (unless you work with a clustered Oracle system). You can get a list of instances; the way to do it depends on the operating system which Oracle is running on:
         <ul>
            <li>On unix-like systems: Look in the <code>/etc/oratab</code> file.</li>
            <li>On Windows: Start Windows' <em>Services</em> management console and look for services with names starting with <code>OracleService<strong>XXXX</strong></code>. Each <code>XXXX</code> is the name (AKA <em>SID</em>) of an instance.</li>
         </ul>

         <p>Documentation: <span class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/install.112/e10841/pre_install.htm#sthref143">oratab</a></span></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="cli-list_of_databases-informix">Informix</a></td>
      <td class="solution">Connect to the <em>sysmaster</em> database (all users are allowed to do this) and run:
         <br /><code class="sql">SELECT name FROM sysmaster:sysdatabases</code>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.adref.doc/ids_adr_0221.htm">Documentation</a></p>
      </td>
   </tr>
</table>


<h3><a class="name" name="cli-list_of_schemas">Getting a list of schemas</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="cli-list_of_schemas-standard">Standard</a></td>
      <td class="solution"><code class="sql">SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA</code></td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="cli-list_of_schemas-postgresql">PostgreSQL</a></td>
      <td class="solution">In the command line interface: <code>\dn</code> or <code>\dn+</code> (for more details).

      <p>Using SQL: Follows the standard.</p>

      <p><span class="doclink">Documentation</span>:</p>
      <ul>
         <li><a href="http://www.postgresql.org/docs/8.4/static/app-psql.html">The <code>psql</code> tool</a></li>
         <li>The <a href="http://www.postgresql.org/docs/8.4/static/infoschema-schemata.html">schemata INFORMATION_SCHEMA view</a></li>
      </ul>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="cli-list_of_schemas-db2">DB2</a></td>
      <td class="solution">
         <code class="sql">SELECT schemaname FROM syscat.schemata</code>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0001059.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="cli-list_of_schemas-mssql">MSSQL</a></td>
      <td class="solution">Follows the standard.

      <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms182642.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="cli-list_of_schemas-mysql">MySQL</a></td>
      <td class="solution">MySQL doesn't support schemas.</td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="cli-list_of_schemas-oracle">Oracle</a></td>
      <td class="solution">Oracle has a peculiar approach to schemas: A schema exists for each and every user. And there cannot be a schema without a corresponding user. Consequently, a way to get a list of schemas in Oracle is to query the <code>ALL_USERS</code> dictionary view:
      <br /><code class="sql">SELECT username FROM all_users</code>

      <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10820/statviews_2129.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="cli-list_of_schemas-informix">Informix</a></td>
      <td class="solution">Informix' concept of schemas is closely related to user names, so&mdash;somewhat&nbsp;surprisingly&mdash;the query is:
      <br /><code class="sql">SELECT UNIQUE owner FROM systables WHERE tabid&gt;99</code>

      <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqlr.doc/ids_sqr_072.htm">Documentation</a></p>
      </td>
   </tr>
</table>


<h3><a class="name" name="cli-list_of_tables">Getting a list of tables</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="cli-list_of_tables-standard">Standard</a></td>
      <td class="solution">
         Part 11 of the SQL standard specifies the INFORMATION_SCHEMA schema which must 
         be part of all database catalogues. The schema may be used like this:

         <p><code class="sql">
            SELECT * FROM INFORMATION_SCHEMA.TABLES<br />
            WHERE TABLE_TYPE='BASE TABLE'
         </code></p>

         <p>or (often more relevant):</p>

         <p><code class="sql">
            SELECT * FROM INFORMATION_SCHEMA.TABLES<br />
            WHERE TABLE_TYPE='BASE TABLE'<br />
            &nbsp;&nbsp;AND TABLE_SCHEMA='<span class="foo">SCHEMA-NAME</span>'
         </code></p>

         <p><small>See a <a href="#cli-list_of_tables-case-sensitivity_note">warning about potential 
         case sensitivity problems</a> below.</small></p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="cli-list_of_tables-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Follows the standard, except for 
         <a href="#cli-list_of_tables-postgresql-gotchas">some gotchas</a> mentioned below.

         <p>In command-line context, it's easier to use the following non-SQL command 
         instead of querying the INFORMATION_SCHEMA:<br />
         <code class="sql">\dt</code></p>

         <p>Documentation: The <span class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/infoschema-tables.html"><code>tables</code> INFORMATION_SCHEMA view</a></span>, the <span class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/app-psql.html"><code>psql</code> tool</a></span>.</p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="cli-list_of_tables-db2">DB2</a></td>
      <td class="solution">
         Doesn't provide the standard <code>INFORMATION_SCHEMA</code>. Instead, DB2 offers 
         the <code>SYSCAT</code> 
         schema (catalog) which is somewhat compatible.

         <p>Offers what is probably a shorthand to some system catalog query:<br />
         <code>LIST TABLES</code><br />
         or - if you want to see tables in another schema:<br />
         <code>LIST TABLES FOR SCHEMA <span class="foo">foo</span></code>
         <br />These commands are only available in the <code>db2</code> command line processor (i.e. not from&mdash;e.g.&mdash; <code>db2batch</code>).</p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0001967.htm">Documentation</a></p>
         </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="cli-list_of_tables-mssql">MSSQL</a></td>
      <td class="solution">Follows that standard.<br />
         Sometimes, the <code class="sql">SP_TABLES</code> system stored procedure is 
         easier to use.

      <p><span class="doclink">Documentation</span>:</p>
      <ul>
      <li>The <a href="http://msdn2.microsoft.com/en-us/library/ms186224.aspx">INFORMATION_SCHEMA.TABLES</a> view</li>
      <li><a href="http://msdn2.microsoft.com/en-us/library/ms186250.aspx"><code>sp_tables</code></a></li>
      </ul>

      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="cli-list_of_tables-mysql">MySQL</a></td>
      <td class="solution">
         Follows the standard, except that MySQL doesn't support schemas, so one might say that MySQL's <code>INFORMATION_SCHEMA</code> is really an 'INFORMATION_<em>DATABASE</em>' or 'INFORMATION_<em>CATALOGUE</em>'.

         <p>In command-line context, it's easier to use the following non-standard SQL:
         <br /><code>SHOW TABLES</code></p>

         <p><span class="doclink">Documentation</span>:</p>
         <ul>
         <li>The <a href="http://dev.mysql.com/doc/refman/5.0/en/information-schema.html"><code>INFORMATION_SCHEMA</code></a></li>
         <li><a href="http://dev.mysql.com/doc/refman/5.0/en/show-tables.html"><code class="sql">SHOW TABLES</code></a></li>
         </ul>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="cli-list_of_tables-oracle">Oracle</a></td>
      <td class="solution">
         Doesn't provide the standard INFORMATION_SCHEMA. Provides a <em>data dictionary</em> system instead.

         <p>The quickest way to get a usable list of 'normal' tables in the current schema:<br />
         <code class="sql">SELECT * FROM tab</code><br />
         Use of the <em>tab</em> dictionary view is officially deprecated, though. The following query takes longer to write, but is more future proof:<br />
            <code class="sql">SELECT owner||'.'||table_name FROM all_all_tables</code><br />
            <small>(Remember that in Oracle, there is a one-to-one relationship between 'owners' and schemas.)</small></p>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10820/statviews_1003.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="cli-list_of_tables-informix">Informix</a></td>
      <td class="solution">Doesn't provide the standard <code>INFORMATION_SCHEMA</code> out of the box. A few of the standard's INFORMATION_SCHEMA views may be added by running a special script, though.

      <p>Informix offers a set of <em>system catalogs</em> instead. To get a list of tables:
      <br /><code class="sql">SELECT tabname FROM systables WHERE tabid &gt; 99</code></p>

      <p>The above query will include views and other objects; if you want base tables only:
      <br /><code class="sql">SELECT tabname FROM systables WHERE tabid &gt; 99 AND tabtype='T'</code></p>

      <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqlr.doc/sii-01-18141.htm">Documentation</a></p>
      </td>
   </tr>
</table>

<div class="note">
<h4><a class="name" name="cli-list_of_tables-case-sensitivity_note">Warning about a general case sensitivity gotcha</a></h4>

<p>Note that there may be case sensitivity issues involved when using meta-data 
views like those in the INFORMATION_SCHEMA. Generally, 
the standard states that the name of an identifier (such as table names) are 
implicitly converted to uppercase, unless double-quotes are used when referring 
to the identifier. The same goes for identifiers used in queries: A query like 
<code class="sql">SELECT foo FROM tablename</code> is implicitly converted to 
<code class="sql">SELECT FOO FROM TABLENAME</code>.</p>

<p>If you create your table as<br />
<code class="sql">&nbsp;&nbsp;CREATE TABLE testtab (id INTEGER PRIMARY KEY)</code><br />
then a query like <br />
<code class="sql">&nbsp;&nbsp;SELECT * FROM testtab</code><br />
should work fine, and<br />
<code class="sql">&nbsp;&nbsp;SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='TESTTAB'</code><br />
should work, while the following query will probably fail:<br /> 
<code class="sql">&nbsp;&nbsp;SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='testtab'</code></p>
</div>

<div class="note">
<h4><a class="name" name="cli-list_of_tables-postgresql-gotchas">Warning about INFORMATION_SCHEMA gotchas in PostgreSQL</a></h4>
<p>Warning: PostgreSQL's case-conversion rules for unquoted identifiers (such as table 
names) are non-standard: PostgreSQL converts the identifiers to <em>lower case</em>, 
instead of converting to <em>upper case</em>. This means that 
you may try altering the case of identifier names used for queries in the 
INFORMATION_SCHEMA if you experience unexpected, empty metadata queries.</p>

<p>Note also that 
<a href="http://thread.gmane.org/gmane.comp.db.postgresql.sql/11397">due
to PostgreSQL's handling of constraint names, the INFORMATION_SCHEMA cannot 
safely be used to deduce referential constraints</a>; for this, you have to use PostgreSQL's 
<em><a href="http://www.postgresql.org/docs/8.4/static/catalogs.html">pg_catalog</a></em> 
system-schema.</p>
</div>

<h3><a class="name" name="cli-table_description">Getting a table description</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="cli-table_description-standard">Standard</a></td>
      <td class="solution">
         Part 11 of the SQL standard specifies the INFORMATION_SCHEMA schema which must 
         be part of all database catalogues. The schema may be used like this:

         <p><code class="sql">SELECT&nbsp;column_name,data_type,column_default,is_nullable<br />
            FROM<br />
            &nbsp;&nbsp;information_schema.tables&nbsp;AS&nbsp;t<br />
            &nbsp;&nbsp;JOIN<br />
            &nbsp;&nbsp;information_schema.columns&nbsp;AS&nbsp;c&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;t.table_catalog=c.table_catalog&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;t.table_schema=c.table_schema&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;t.table_name=c.table_name<br />
            WHERE<br />
            &nbsp;&nbsp;t.table_name='<span class="foo">TABLE-NAME</span>'</code></p>

         <p>&mdash;or like this (more verbose):</p>
         <p><code class="sql">SELECT<br />
            &nbsp;&nbsp;column_name,<br />
            &nbsp;&nbsp;data_type,<br />
            &nbsp;&nbsp;character_maximum_length,<br />
            &nbsp;&nbsp;numeric_precision,<br />
            &nbsp;&nbsp;column_default,<br />
            &nbsp;&nbsp;is_nullable<br />
            FROM<br />
            &nbsp;&nbsp;information_schema.tables&nbsp;as&nbsp;t<br />
            &nbsp;&nbsp;JOIN<br />
            &nbsp;&nbsp;information_schema.columns&nbsp;AS&nbsp;c&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;t.table_catalog=c.table_catalog&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;t.table_schema=c.table_schema&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;t.table_name=c.table_name<br />
            WHERE<br />
            &nbsp;&nbsp;&nbsp;&nbsp;c.table_schema='<span class="foo">TABLE-SCHEMA</span>'<br />
            &nbsp;&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;c.table_name='<span class="foo">TABLE-NAME</span>'</code></p>

         <p>To get information about constraints, involved columns and (possibly)
         referenced columns, a query like this may be used:<br />
         <code class="sql">SELECT<br />
            &nbsp;&nbsp;tc.CONSTRAINT_NAME,<br />
            &nbsp;&nbsp;CONSTRAINT_TYPE,<br />
            &nbsp;&nbsp;ccu.COLUMN_NAME,<br />
            &nbsp;&nbsp;rccu.COLUMN_NAME,<br />
            &nbsp;&nbsp;rccu.TABLE_CATALOG,<br />
            &nbsp;&nbsp;rccu.TABLE_SCHEMA,<br />
            &nbsp;&nbsp;rccu.TABLE_NAME,<br />
            &nbsp;&nbsp;CHECK_CLAUSE<br />
            FROM<br />
            &nbsp;&nbsp;INFORMATION_SCHEMA.TABLE_CONSTRAINTS&nbsp;tc<br />
            &nbsp;&nbsp;LEFT&nbsp;JOIN<br />
            &nbsp;&nbsp;INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE&nbsp;ccu&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.CONSTRAINT_CATALOG=ccu.CONSTRAINT_CATALOG&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.CONSTRAINT_SCHEMA=ccu.CONSTRAINT_SCHEMA&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.CONSTRAINT_NAME=ccu.CONSTRAINT_NAME&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.TABLE_CATALOG=ccu.TABLE_CATALOG&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.TABLE_SCHEMA=ccu.TABLE_SCHEMA&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.TABLE_NAME=ccu.TABLE_NAME<br />
            &nbsp;&nbsp;LEFT&nbsp;JOIN<br />
            &nbsp;&nbsp;INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS&nbsp;rc&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;rc.CONSTRAINT_CATALOG=ccu.CONSTRAINT_CATALOG&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;rc.CONSTRAINT_SCHEMA=ccu.CONSTRAINT_SCHEMA&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;rc.CONSTRAINT_NAME=ccu.CONSTRAINT_NAME<br />
            &nbsp;&nbsp;LEFT&nbsp;JOIN<br />
            &nbsp;&nbsp;INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE&nbsp;rccu&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;rc.UNIQUE_CONSTRAINT_CATALOG=rccu.CONSTRAINT_CATALOG&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;rc.UNIQUE_CONSTRAINT_SCHEMA=rccu.CONSTRAINT_SCHEMA&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;rc.UNIQUE_CONSTRAINT_NAME=rccu.CONSTRAINT_NAME<br />
            &nbsp;&nbsp;LEFT&nbsp;JOIN<br />
            &nbsp;&nbsp;INFORMATION_SCHEMA.CHECK_CONSTRAINTS&nbsp;cc&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.CONSTRAINT_CATALOG=cc.CONSTRAINT_CATALOG&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.CONSTRAINT_SCHEMA=cc.CONSTRAINT_SCHEMA&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.CONSTRAINT_NAME=cc.CONSTRAINT_NAME<br />
            WHERE<br />
            &nbsp;&nbsp;tc.TABLE_CATALOG='<span class="foo">CATALOG-NAME</span>'&nbsp;AND&nbsp;--&nbsp;<em>see&nbsp;remark</em><br />
            &nbsp;&nbsp;tc.TABLE_SCHEMA='<span class="foo">SCHEMA-NAME</span>'&nbsp;AND&nbsp;&nbsp;&nbsp;--&nbsp;<em>see&nbsp;remark</em><br />
            &nbsp;&nbsp;tc.TABLE_NAME='<span class="foo">TABLE-NAME</span>'<br />
            ORDER&nbsp;BY&nbsp;tc.CONSTRAINT_NAME</code></p>

         <p>If you don't care about potential namespace conflicts, you may leave out the lines commented with &quot;<code><em>--&nbsp;see&nbsp;remark</em></code>&quot;.</p>

         <p>See also: <a href="#cli-list_of_tables-case-sensitivity_note">Warning about potential 
         case sensitivity problems</a> above.</p>
      </td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="cli-table_description-postgresql">PostgreSQL</a></td>
      <td class="solution">
         Follows the standard, except for 
         <a href="#cli-list_of_tables-postgresql-gotchas">some gotchas</a> mentioned above.

         <p>In command-line context it's easier to use this non-SQL command:<br /> 
         <code class="sql">\d&nbsp;<span class="foo">tablename</span></code></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="cli-table_description-db2">DB2</a></td>
      <td class="solution">
         Doesn't provide the standard INFORMATION_SCHEMA.

         <p>To obtain (very) basic information about a table:<br />
         <code class="sql">DESCRIBE TABLE <span class="foo">tablename</span><br />
         DESCRIBE INDEXES FOR TABLE <span class="foo">tablename</span> SHOW DETAIL</code></p>

         <p>To get information about constraints, including involved/referred columns,
         a query like the following may be used, although the <code>db2</code> 'utility' 
         isn't good at adjusting column widths in output (i.e. the output is not 
         easy to read):<br />
         <code class="sql">SELECT<br />
            &nbsp;&nbsp;tc.constname&nbsp;as&nbsp;const_name,<br />
            &nbsp;&nbsp;type&nbsp;as&nbsp;const_type,<br />
            &nbsp;&nbsp;kcu.colname&nbsp;as&nbsp;col_name,<br />
            &nbsp;&nbsp;r.reftabschema&nbsp;as&nbsp;ref_tabschema,<br />
            &nbsp;&nbsp;r.reftabname&nbsp;as&nbsp;ref_tabname,<br />
            &nbsp;&nbsp;kcu_r.colname&nbsp;as&nbsp;ref_colname<br />
            FROM<br />
            &nbsp;&nbsp;syscat.tabconst&nbsp;tc<br />
            &nbsp;&nbsp;JOIN<br />
            &nbsp;&nbsp;syscat.keycoluse&nbsp;kcu&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.constname=kcu.constname<br />
            &nbsp;&nbsp;LEFT&nbsp;JOIN<br />
            &nbsp;&nbsp;syscat.references&nbsp;r&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;type='F'&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;tc.constname=r.constname<br />
            &nbsp;&nbsp;LEFT&nbsp;JOIN<br />
            &nbsp;&nbsp;syscat.keycoluse&nbsp;kcu_r&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;r.constname=kcu_r.constname<br />
            WHERE<br />
            &nbsp;&nbsp;tc.tabschema=UCASE('<span class="foo">schemaname</span>')&nbsp;AND<br />
            &nbsp;&nbsp;tc.tabname=UCASE('<span class="foo">tablename</span>')<br />
            ORDER&nbsp;BY&nbsp;const_name,col_name</code></p>

         <p><span class="doclink">Documentation</span>:</p>
         <ul>
         <li>The <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0002019.htm">DESCRIBE</a> command in the &quot;db2&quot; command line processor</li>
         <li><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0011297.htm">SYSCAT views</a></li>
         </ul>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="cli-table_description-mssql">MSSQL</a></td>
      <td class="solution">Follows the standard, except that
         <ul>
         <li>MSSQL uses non-standard names for some standard datatypes, i.e. <em>varchar</em> instead of the standard's <em>CHARACTER_VARYING</em></li>
         <li>MSSQL's INFORMATION_SCHEMA doesn't have all SQL:2008's columns (an example: MSSQL's INFORMATION_SCHEMA.COLUMNS view does not contain the IS_IDENTITY column)</li>
         </ul>

         <p>Often, the <code class="sql">SP_HELP <span class="foo">'tablename'</span></code> 
         system stored procedure is easier to use.</p>

         <p><span class="doclink">Documentation</span>:</p>
         <ul>
         <li><a href="http://msdn2.microsoft.com/en-us/library/ms186778.aspx">Information Schema Views</a></li>
         <li><a href="http://msdn2.microsoft.com/en-us/library/ms187335.aspx"><code>sp_help</code></a></li>
         </ul>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="cli-table_description-mysql">MySQL</a></td>
      <td class="solution">
         Follows the standard, except that
         <ul>
         <li>MySQL doesn't support schemas, so one might say that MySQL's <code>INFORMATION_SCHEMA</code> is really an 'INFORMATION_<em>DATABASE</em>' or 'INFORMATION_<em>CATALOGUE</em>'.</li>
         <li>MySQL's INFORMATION_SCHEMA doesn't have all SQL:2008's columns (an example: MySQL's INFORMATION_SCHEMA.COLUMNS view does not contain the IS_IDENTITY column).</li>
         <li>As MySQL's namespaces don't match the SQL standard fully, 
         the standard queries mentioned <a href="#cli-table_description">above</a> will not work. The 
         reason is that in MySQL, the value of <code>TABLE_CATALOG</code> is 
         <code>NULL</code> for all tables and columns. To obtain the wanted information, you need to 
         remove the table_catalog join-conditions. I.e., the first (and simplest) of the above queries 
         must be re-written to:

         <p><code class="sql">SELECT&nbsp;column_name,data_type,column_default,is_nullable<br />
            FROM<br />
            &nbsp;&nbsp;information_schema.tables&nbsp;AS&nbsp;t<br />
            &nbsp;&nbsp;JOIN<br />
            &nbsp;&nbsp;information_schema.columns&nbsp;AS&nbsp;c&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;t.table_schema=c.table_schema&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;t.table_name=c.table_name<br />
            WHERE<br />
            &nbsp;&nbsp;t.table_name='<span class="foo">TABLE-NAME</span>'</code></p></li>
         </ul>

         <p>In command-line context it's easier to use this non-SQL command:<br />
         <code>DESCRIBE&nbsp;<span class="foo">tablename</span></code></p>

         <p><span class="doclink">Documentation</span>:</p>
         <ul>
         <li>The <a href="http://dev.mysql.com/doc/refman/5.0/en/information-schema.html"><code>INFORMATION_SCHEMA</code></a></li>
         <li><a href="http://dev.mysql.com/doc/refman/5.0/en/describe.html">DESCRIBE</a></li>
         </ul>

      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="cli-table_description-oracle">Oracle</a></td>
      <td class="solution">
         Doesn't provide the standard INFORMATION_SCHEMA. Offers <em>data dictionary views</em> instead.

         <p>To get (very) basic information:<br />
         <code class="sql">DESCRIBE&nbsp;<span class="foo">tablename</span></code></p>

         <p>To get information on constraints, including foreign (referred) table/column
         information, a query like this may be used (adjust <span class="foo">tablename</span> 
         in one of the last lines):<br />
         <code class="sql">COLUMN&nbsp;consname&nbsp;FORMAT a11;<br />
            COLUMN&nbsp;colname&nbsp;FORMAT&nbsp;a10;<br />
            COLUMN&nbsp;type&nbsp;FORMAT&nbsp;a11;<br />
            COLUMN&nbsp;cond&nbsp;FORMAT&nbsp;a20;<br />
            COLUMN&nbsp;ref_tabname&nbsp;FORMAT&nbsp;a11;<br />
            COLUMN&nbsp;ref_colname&nbsp;FORMAT&nbsp;a11;<br />
            SELECT<br />
            &nbsp;&nbsp;uc.constraint_name&nbsp;consname,<br />
            &nbsp;&nbsp;ucc.column_name&nbsp;colname,<br />
            &nbsp;&nbsp;CASE<br />
            &nbsp;&nbsp;&nbsp;&nbsp;WHEN&nbsp;uc.constraint_type='C'&nbsp;THEN&nbsp;'CHECK'<br />
            &nbsp;&nbsp;&nbsp;&nbsp;WHEN&nbsp;uc.constraint_type='P'&nbsp;THEN&nbsp;'PRIMARY&nbsp;KEY'<br />
            &nbsp;&nbsp;&nbsp;&nbsp;WHEN&nbsp;uc.constraint_type='R'&nbsp;THEN&nbsp;'REFERENTIAL'<br />
            &nbsp;&nbsp;&nbsp;&nbsp;WHEN&nbsp;uc.constraint_type='U'&nbsp;THEN&nbsp;'UNIQUE'<br />
            &nbsp;&nbsp;&nbsp;&nbsp;ELSE&nbsp;uc.constraint_type<br />
            &nbsp;&nbsp;END&nbsp;as&nbsp;type,<br />
            &nbsp;&nbsp;uc.search_condition&nbsp;cond,<br />
            &nbsp;&nbsp;ucc_r.table_name&nbsp;ref_tabname,<br />
            &nbsp;&nbsp;ucc_r.column_name&nbsp;ref_colname<br />
            FROM<br />
            &nbsp;&nbsp;user_constraints&nbsp;uc<br />
            &nbsp;&nbsp;JOIN<br />
            &nbsp;&nbsp;user_cons_columns&nbsp;ucc&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;uc.constraint_name=ucc.constraint_name&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;uc.owner=ucc.owner<br />
            &nbsp;&nbsp;LEFT&nbsp;JOIN<br />
            &nbsp;&nbsp;user_constraints&nbsp;uc_r&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;uc.r_constraint_name=uc_r.constraint_name&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;uc.owner=uc_r.owner<br />
            &nbsp;&nbsp;LEFT&nbsp;JOIN<br />
            &nbsp;&nbsp;user_cons_columns&nbsp;ucc_r&nbsp;ON<br />
            &nbsp;&nbsp;&nbsp;&nbsp;uc_r.constraint_name=ucc_r.constraint_name&nbsp;AND<br />
            &nbsp;&nbsp;&nbsp;&nbsp;uc_r.owner=ucc_r.owner<br />
            WHERE<br />
            &nbsp;&nbsp;uc.TABLE_NAME&nbsp;=&nbsp;UPPER('<span class="foo">tablename</span>')<br />
            ORDER&nbsp;BY&nbsp;consname,colname</code>;</p>

         <p><a class="name" name="cli-table_description-oracle-indexes">To</a> get information
         on indexes on a table, a query like this may be 
         used (adjust <span class="foo">tablename</span> in one of the last lines):<br /><code 
            class="sql">COLUMN&nbsp;index_name&nbsp;&nbsp;FORMAT&nbsp;a11;<br />
            COLUMN&nbsp;type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FORMAT&nbsp;a8;<br />
            COLUMN&nbsp;uniness&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FORMAT&nbsp;a9;<br />
            COLUMN&nbsp;column_name&nbsp;FORMAT&nbsp;a20;<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SELECT&nbsp;index_name,<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index_type&nbsp;type,<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uniqueness&nbsp;uniness,<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column_name<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FROM&nbsp;user_indexes&nbsp;ui<br />
            NATURAL&nbsp;JOIN&nbsp;user_ind_columns&nbsp;uic<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHERE&nbsp;dropped='NO'<br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AND&nbsp;table_name=upper('tablename')<br />
            &nbsp;&nbsp;&nbsp;&nbsp;ORDER&nbsp;BY&nbsp;index_name,column_name</code></p>

      <p><span class="doclink">Documentation</span>:</p>
      <ul>
         <li><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10823/ch_twelve019.htm">DESCRIBE</a> sqlplus command</li>
         <li><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10823/ch_twelve013.htm">COLUMN</a> sqlplus command</li>
         <li><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10820/statviews_part.htm">Static Data Dictionary Views</a></li>
         <li><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10820/statviews_5242.htm">USER_CONSTRAINTS</a> data dictionary view</li>
         <li><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10820/statviews_5240.htm">USER_CONS_COLUMNS</a> data dictionary view</li>
         <li><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10820/statviews_5306.htm">USER_INDEXES</a> data dictionary view</li>
         <li><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10820/statviews_5300.htm">USER_IND_COLUMNS</a> data dictionary view</li>
      </ul>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="cli-table_description-informix">Informix</a></td>
      <td class="solution">Doesn't provide the standard <code>INFORMATION_SCHEMA</code> out of the box. If a special script is run, an INFORMATION_SCHEMA may be added which allows for using the <a href="#cli-table_description-standard">most basic</a> standards-based table description query.

         <p>In practice, an Informix-only query is used. The following query provides very basic table information, excluding constraints:
         <br /><code class="sql">SELECT
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colname,
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;coltype,
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CASE
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHEN (coltype-256)&lt;0 THEN 'YES'
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELSE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'NO'
         <br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AS nullable
         <br />FROM&nbsp;&nbsp;&nbsp;systables&nbsp;&nbsp;AS a
         <br />&nbsp;&nbsp;JOIN syscolumns AS b&nbsp;&nbsp;&nbsp;ON a.tabid = b.tabid
         <br />WHERE tabname='<span class="variable">tablename</span>'</code></p>

         <p>Notice that the table name is in lower case. The <em>colname</em> values are numeric codes which need to be <a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqlr.doc/sii-01-15568.htm">looked up</a> in order to provide meaning.</p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqlr.doc/sii011002477.htm">Documentation</a></p>
      </td>
   </tr>
</table>

<h3><a class="name" name="cli-analyze">Manually telling the DBMS to collect statistics</a></h3>

<p>In most DBMSes, it's possible to enable automatic statistics gathering, but sometimes, 
it's nice to be able to manually tell the DBMS to gather statistics for a table (or 
a number of tables).</p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="cli-analyze-standard">Standard</a></td>
      <td class="solution">Not standardized.</td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="cli-analyze-postgresql">PostgreSQL</a></td>
      <td class="solution"><code class="sql">ANALYZE <span class="foo">tablename</span></code>

      <p>If the <span class="foo">tablename</span> parameter is left out, then statistics are 
      gathered for all tables in the current database.</p>

      <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/sql-analyze.html">Documentation</a></p></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="cli-analyze-db2">DB2</a></td>
      <td class="solution"><code class="sql">RUNSTATS ON TABLE <span class="foo">schema-name</span>.<span class="foo">table-name</span> AND INDEXES ALL</code>
      <br />(many variations/options available)

      <p>The <code>RUNSTATS</code> command needs to be invoked in a special way if you aren't using the <code>db2</code> command line processor, namely through the <code>ADMIN_CMD</code> procedure.</p>

      <p><span class="doclink">Documentation</span>: <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0001980.htm"><code>RUNSTATS</code></a> and <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0023587.htm"><code>RUNSTATS</code> wrapped in <code>ADMIN_CMD</code></a>.</p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="cli-analyze-mssql">MSSQL</a></td>
      <td class="solution">First, you have to add statistics to the table:
         <br /><code class="sql">CREATE STATISTICS <span class="variable">stats_name</span>
         <br />ON <span class="variable">table_name</span>
         <br />(<span class="variable">column_name_1</span>, <span class="variable">column_name_2</span>, <span class="variable">column_name_3</span>, ...)</code>
         <br /><small>(The <code>CREATE STATISTICS</code> step is not needed for indexed columns. Thus, this step may be skipped if you are satisfied with keeping statistics on indexed columns only.)</small>

         <p>The statistics may then be updated when needed:
         <br /><code class="sql">UPDATE STATISTICS <span class="variable">table_name</span></code></p>

         <p>Having to explicitly mention tables and columns can be tedious, and in many cases, the <code class="sql">sp_createstats</code> and <code class="sql">sp_updatestats</code> stored procedures are easier to use.</p>

         <p><span class="doclink">Documentation</span>: <a href="http://msdn2.microsoft.com/en-us/library/ms188038.aspx">CREATE STATISTICS</a>, <a href="http://msdn2.microsoft.com/en-us/library/ms187348.aspx">UPDATE STATISTICS</a>, <a href="http://msdn2.microsoft.com/en-us/library/ms186834.aspx">sp_createstats</a>, <a href="http://msdn2.microsoft.com/en-us/library/ms173804.aspx">sp_updatestats</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="cli-analyze-mysql">MySQL</a></td>
      <td class="solution"><code class="sql">ANALYZE&nbsp;TABLE&nbsp;<span class="foo">tablename</span></code>

      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/analyze-table.html">Documentation</a></p></td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="cli-analyze-oracle">Oracle</a></td>
      <td class="solution">Oracle offers to <em>estimate</em> (quick) or <em>compute</em> (thorough) 
      statistics for a database object. The quick way to do this is to use the deprecated 
      <code>ANALYZE</code> command which can be used in various ways, e.g.

      <p><code class="sql">ANALYZE&nbsp;TABLE&nbsp;<span class="foo">tablename</span>&nbsp;<strong>ESTIMATE</strong>&nbsp;STATISTICS;<br />
      ANALYZE&nbsp;TABLE&nbsp;<span class="foo">tablename</span>&nbsp;<strong>ESTIMATE</strong>&nbsp;STATISTICS&nbsp;FOR&nbsp;ALL&nbsp;INDEXES;</code><br />
      (It's unclear to me if both are needed to gain the relevant statistics.)</p>

      <p>&mdash;Or:<br /><code class="sql">ANALYZE&nbsp;TABLE&nbsp;<span class="foo">tablename</span>&nbsp;<strong>COMPUTE</strong>&nbsp;STATISTICS;<br />
      ANALYZE&nbsp;TABLE&nbsp;<span class="foo">tablename</span>&nbsp;<strong>COMPUTE</strong>&nbsp;STATISTICS&nbsp;FOR&nbsp;ALL&nbsp;INDEXES;</code></p>

      <p>If you want to stay away from deprecated features (although I doubt that Oracle will 
      remove ANALYZE...STATISTICS... any time soon), you need to use the <a href="http://download.oracle.com/docs/cd/E11882_01/appdev.112/e10577/d_stats.htm">DBMS_STATS package</a>.</p>

      <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/statements_4005.htm">Documentation</a></p></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="cli-analyze-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h3><a class="name" name="cli-explain">Getting a query explanation</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="cli-explain-standard">Standard</a></td>
      <td class="solution">Not standardized.</td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="cli-explain-postgresql">PostgreSQL</a></td>
      <td class="solution"><code class="sql">EXPLAIN &lt;query&gt;</code>

      <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/sql-explain.html">Documentation</a></p></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="cli-explain-db2">DB2</a></td>
      <td class="solution">The easiest way to get a query explanation is to save the query in a file (without a terminating semicolon), and then run a special command-line utility:<br /><code>db2expln -database <span class="foo">databasename</span> -stmtfile <span class="foo">query.sql</span> -terminator ';' -terminal</code><br />In the above example, the query has been saved to a file called &quot;query.sql&quot;. 

      <p>In some situations, you may want to use the <code>dynexpln</code> utility instead of <code>db2expln</code>. And in yet other situations, the <code>db2exfmt</code> tool is a better choice. A visual explanation tool also exists.</p>

      <p>If you prefer to get the explanation through SQL:</p>

      <ol>
      <li>Set up needed <em>explain tables</em> using <code>EXPLAIN.DDL</code> which 
	      should exist in <code>sqllib/misc</code> of your DB2 instance user's home 
	      directory.</li>
	   <li>Optionally: Clean up old plan explanations: <code class="sql">DELETE FROM EXPLAIN_INSTANCE</code></li>
	   <li>Generate the explanation: <code class="sql">EXPLAIN PLAN FOR &lt;SQL-statement&gt;</code></li>
	   <li>Display plan:<br /><code class="sql">
		   SELECT O.Operator_ID, S2.Target_ID, O.Operator_Type,<br />
	   	&nbsp;&nbsp;S.Object_Name, CAST(O.Total_Cost AS INTEGER) Cost<br />
		   FROM EXPLAIN_OPERATOR O<br />
		   &nbsp;&nbsp;LEFT OUTER JOIN EXPLAIN_STREAM S2<br />
		   &nbsp;&nbsp;&nbsp;&nbsp;ON O.Operator_ID=S2.Source_ID<br />
		   &nbsp;&nbsp;LEFT OUTER JOIN EXPLAIN_STREAM S<br />
		   &nbsp;&nbsp;&nbsp;&nbsp;ON O.Operator_ID = S.Target_ID<br />
		   &nbsp;&nbsp;&nbsp;&nbsp;AND O.Explain_Time = S.Explain_Time<br />
		   &nbsp;&nbsp;&nbsp;&nbsp;AND S.Object_Name IS NOT NULL<br />
		   ORDER BY O.Explain_Time ASC, Operator_ID ASC<br /></code>

		   <p style="font-size: smaller">(Adapted from recipe in <em><a href="http://www.oreilly.com/catalog/sqltuning/">SQL Tuning</a></em>.)</p>
	   </li>
	   </ol>

        <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/c0005134.htm">Documentation</a></p>
	</td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="cli-explain-mssql">MSSQL</a></td>
      <td class="solution">MSSQL can be put in a query explanation mode where queries 
         are not actually executed, but a query explanation is returned instead:<br />
         <code class="sql">SET SHOWPLAN_TEXT ON</code>
         <p>The query explanation mode is turned off by running<br />
         <code class="sql">SET SHOWPLAN_TEXT OFF</code></p>

         <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms176058.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="cli-explain-mysql">MySQL</a></td>
      <td class="solution"><code class="sql">EXPLAIN &lt;query&gt;</code>

      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/explain.html">Documentation</a></p></td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="cli-explain-oracle">Oracle</a></td>
      <td class="solution"><code class="sql">EXPLAIN PLAN FOR &lt;query&gt;</code><br />
            After the query has run, do the following to get the plan explanation:<br />
            <code class="sql">SELECT plan_table_output FROM table(dbms_xplan.display())</code>

        <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/statements_9010.htm">Documentation</a></p>
        </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="cli-explain-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h3><a class="name" name="cli-timing">Turning on query timing</a></h3>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="cli-timing-standard">Standard</a></td>
      <td class="solution">Not standardized.</td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="cli-timing-postgresql">PostgreSQL</a></td>
      <td class="solution"><code class="sql">\timing</code>

      <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/app-psql.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="cli-timing-db2">DB2</a></td>
      <td class="solution">Run the query in the &quot;<code>db2batch</code>&quot; command line processor; <code>db2batch</code> prints the elapsed time of each query.

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0002043.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="cli-timing-mssql">MSSQL</a></td>
      <td class="solution"><code class="sql">SET STATISTICS TIME ON</code>

      <p class="doclink"><a href="http://msdn2.microsoft.com/en-us/library/ms190287.aspx">Documentation</a></p>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="cli-timing-mysql">MySQL</a></td>
      <td class="solution">MySQL's command line interface prints query times by default.</td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="cli-timing-oracle">Oracle</a></td>
      <td class="solution"><code class="sql">SET&nbsp;TIMING&nbsp;ON</code>

      <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10823/ch_twelve040.htm#i2699400">Documentation</a></p></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="cli-timing-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>

<h2><a class="name" name="jdbc">JDBC</a></h2>

<h3><a class="name" name="jdbc-jarfile">JDBC driver jar file name, and general documentation</a></h3>
<table>
   <tr class="postgresql">
      <td class="product"><a class="name" name="jdbc-jarfile-postgresql">PostgreSQL</a></td>
      <td class="solution">The <a href="http://jdbc.postgresql.org/">PostgreSQL JDBC Driver</a>: postgresql-<span class="variable">postgresqlversion</span>-<span class="variable">jdbcbuild#</span>.jdbc4.jar

      <p class="doclink"><a href="http://jdbc.postgresql.org/documentation/84/index.html">Documentation</a></p></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="jdbc-jarfile-db2">DB2</a></td>
      <td class="solution"><a href="http://www.ibm.com/software/data/db2/java/">IBM Data Server Driver for JDBC</a>: db2jcc.jar (included in default DB2 client software installations; may also be downloaded separately, after registration)

      <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9r5/topic/com.ibm.db2.luw.apdv.java.doc/doc/c0024189.html">Documentation</a></p></td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="jdbc-jarfile-mssql">MSSQL</a></td>
      <td class="solution"><a href="http://msdn.microsoft.com/en-us/data/aa937724.aspx">Microsoft's driver</a>: sqljdbc.jar
      <br />Alternative: The open source <a href="http://jtds.sourceforge.net/">JTDS driver</a>: jtds-<span class="variable">version</span>.jar

      <p><span class="doclink">Documentation</span>:</p>
      <ul>
         <li><a href="http://msdn.microsoft.com/library/bb418493">Microsoft's driver</a></li>
         <li><a href="http://jtds.sourceforge.net/doc.html">The jTDS driver</a></li>
      </ul>
      </td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="jdbc-jarfile-mysql">MySQL</a></td>
      <td class="solution">The <a href="http://www.mysql.com/products/connector/">MySQL Connector/J</a> driver: mysql-connector-java-<span class="variable">version</span>-bin.jar
      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.1/en/connector-j.html">Documentation</a></p></td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="jdbc-jarfile-oracle">Oracle</a></td>
      <td class="solution"><a href="http://www.oracle.com/technology/tech/java/sqlj_jdbc/">Oracle's JDBC drivers</a>: ojdbc5.jar (for Java 5), ojdbc6.jar (for Java 6)
      <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/java.112/e10589/getsta.htm#sthref30">Documentation</a></p>

      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="jdbc-jarfile-informix">Informix</a></td>
      <td class="solution">IBM's <a href="http://www-01.ibm.com/software/data/informix/tools/jdbc/">Informix JDBC driver</a>: ifxjdbc.jar (download requires registration and filling out annoying questionnaires, and an installer which only works with some JREs has to be run to unpack the driver)
      <br /><p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.jfoun.doc/sii-05jdbc-63486.htm">Documentation</a></p></td>
   </tr>
</table>

<h3><a class="name" name="jdbc-classname">JDBC driver class name</a></h3>
<table>
   <tr class="postgresql">
      <td class="product"><a class="name" name="jdbc-classname-postgresql">PostgreSQL</a></td>
      <td class="solution">org.postgresql.Driver
         <p class="doclink"><a href="http://jdbc.postgresql.org/documentation/84/load.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="jdbc-classname-db2">DB2</a></td>
      <td class="solution">com.ibm.db2.jcc.DB2Driver</td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="jdbc-classname-mssql">MSSQL</a></td>
      <td class="solution">Microsoft's driver: com.microsoft.sqlserver.jdbc.SQLServerDriver</td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="jdbc-classname-mysql">MySQL</a></td>
      <td class="solution">com.mysql.jdbc.Driver
         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.1/en/connector-j-usagenotes-basic.html#connector-j-usagenotes-connect-drivermanager">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="jdbc-classname-oracle">Oracle</a></td>
      <td class="solution">oracle.jdbc.driver.OracleDriver</td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="jdbc-classname-informix">Informix</a></td>
      <td class="solution">com.informix.jdbc.IfxDriver</td>
   </tr>
</table>

<h3><a class="name" name="jdbc-url">JDBC connection URL</a></h3>
<table>
   <tr class="postgresql">
      <td class="product"><a class="name" name="jdbc-url-postgresql">PostgreSQL</a></td>
      <td class="solution">jdbc:postgresql://<span class="variable">hostname</span>/<span class="variable">DBname</span>

      <p class="doclink"><a href="http://jdbc.postgresql.org/documentation/84/connect.html">Documentation</a></p></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="jdbc-url-db2">DB2</a></td>
      <td class="solution">jdbc:db2://<span class="variable">hostname</span>:<span class="variable">50000</span>/<span class="variable">DBname</span><br />
         or (if the database is on the local host):<br />
         jdbc:db2:<span class="variable">DBname</span>
      <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9r5/topic/com.ibm.db2.luw.apdv.java.doc/doc/r0052342.html">Documentation</a></p></td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="jdbc-url-mssql">MSSQL</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="jdbc-url-mysql">MySQL</a></td>
      <td class="solution">jdbc:mysql://[<span class="variable">host</span>][,<span class="variable">failoverhost</span>][:<span class="variable">port</span>]/[<span class="variable">database</span>]?user=<span class="variable">username</span>&amp;password=<span class="variable">password</span>
         <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.1/en/connector-j-usagenotes-basic.html#connector-j-examples-connection-drivermanager">Documentation</a></p>
      </td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="jdbc-url-oracle">Oracle</a></td>
      <td class="solution">jdbc:oracle:thin:@<i>hostname</i>:<i>1521</i>:<i>instancename</i></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="jdbc-url-informix">Informix</a></td>
      <td class="solution">jdbc:informix-sqli://<i>hostname</i>:<i>9088</i>/<i>DBname</i>:INFORMIXSERVER=<i>instancename</i><small><br />
         Use port 1526 instead of 9088 if the Informix version is &lt;11.</small></td>
   </tr>
</table>

<h2><a class="name" name="other">Other topics</a></h2>

<h3><a class="name" name="other-dummy_table">Dummy table use</a></h3>

<p>Some DBMSes let you perform a query like this:
<br />&nbsp;<code class="sql">SELECT 1+1</code>
<br />answering
<br />&nbsp;<code>2</code></p>

<p>With other DBMSes, you need to insert a dummy-table expression to obtain the same result:
<br />&nbsp;<code class="sql">SELECT 1+1 FROM <span class="foo">dummy-table</span></code></p>

<table>
   <tr class="standard">
      <td class="product"><a class="name" name="other-dummy_table-standard">Standard</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="other-dummy_table-postgresql">PostgreSQL</a></td>
      <td class="solution">No need for dummy-table.
         <p>In addition, the <code>VALUES</code> keyword may be used to produce 
         a simple result set, without introducing a <code>FROM</code> clause, 
         e.g.<br /><code class="sql">VALUES(1+1)</code><br />
         (Note the missing SELECT and FROM keywords).</p>

         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/sql-values.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="other-dummy_table-db2">DB2</a></td>
      <td class="solution">Dummy-table: <code>SYSIBM.SYSDUMMY1</code>.
         <p>In addition, the <code>VALUES</code> keyword may be used to produce 
         a simple result set, without introducing a <code>FROM</code> clause, 
         e.g.<br /><code class="sql">VALUES(1+1)</code><br />
         (Note the missing SELECT and FROM keywords).</p>

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0000877.htm">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="other-dummy_table-mssql">MSSQL</a></td>
      <td class="solution">No need for dummy-table.</td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="other-dummy_table-mysql">MySQL</a></td>
      <td class="solution">No need for dummy-table, although MySQL allows you to 
      refer to a <code>DUAL</code> dummy-table (for Oracle compatibility).</td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="other-dummy_table-oracle">Oracle</a></td>
      <td class="solution">Dummy-table: <code>DUAL</code>.</td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="other-dummy_table-informix">Informix</a></td>
      <td class="solution">Informix requires that you include a <code>FROM</code> specification. In recent versions of Informix<sup>(since version 11.10)</sup>, a dummy table has been included: <code>sysmaster:sysdual</code>.

      <p>For older Informix versions, the tradition is to use code like:
      <br /><code class="sql">SELECT ... FROM systables WHERE tabid=1</code><br />This code makes use of the fact that the <em>systables</em> table is guaranteed to contain a row where <em>tabid</em> equals 1.</p>

      <p><span class="doclink">Documentation</span>:</p>

      <ul>
         <li>The <a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.adref.doc/ids_adr_0225.htm">sysdual</a> table</li>
         <li>The <a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqlr.doc/sii-01-18141.htm">systables</a> table</li>
      </ul>
      </td>
   </tr>
</table>

<h3><a class="name" name="other-version">Obtaining DBMS version</a></h3>
<table>
   <tr class="standard">
      <td class="product"><a class="name" name="other-version-standard">Standard</a></td>
      <td class="solution"><code class="sql">SELECT&nbsp;CHARACTER_VALUE
         <br />&nbsp;&nbsp;FROM&nbsp;INFORMATION_SCHEMA.SQL_IMPLEMENTATION_INFO
         <br />&nbsp;WHERE&nbsp;IMPLEMENTATION_INFO_NAME='DBMS&nbsp;VERSION'</code></td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="other-version-postgresql">PostgreSQL</a></td>
      <td class="solution">Follows the standard. An alternative, non-standard function may be used:
         <br /><code class="sql">SELECT&nbsp;VERSION()</code>

         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/functions-info.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="other-version-db2">DB2</a></td>
      <td class="solution"><code class="sql">SELECT service_level FROM SYSIBMADM.ENV_INST_INFO</code>

      <p>&mdash;or run the special <code>db2level</code> program.</p>

      <p><span class="doclink">Documentation</span>: <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0022040.htm"><code>SYSIBMADM.ENV_INST_INFO</code></a> and <a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9/topic/com.ibm.db2.udb.admin.doc/doc/r0009195.htm"><code>db2level</code></a></p></td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="other-version-mssql">MSSQL</a></td>
      <td class="solution">MSSQL's implementation of the IMPLEMENTATION_SCHEMA doesn't seem to include the SQL_IMPLEMENTATION_INFO view. In stead, you may use<br /><code class="sql">SELECT&nbsp;SERVERPROPERTY('ProductVersion')</code>
      <br />(just the version), or
      <br /><code class="sql">SELECT @@VERSION</code>
      <br />(verbose, harder to parse).

      <p><span class="doclink">Documentation</span>: <a href="http://msdn2.microsoft.com/en-us/library/ms174396.aspx">SERVERPROPERTY</a>, <a href="http://msdn2.microsoft.com/en-us/library/ms177512.aspx">@@VERSION</a></p></td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="other-version-mysql">MySQL</a></td>
      <td class="solution">MySQL's <code>INFORMATION_SCHEMA</code> doesn't include the <code>SQL_IMPLEMENTATION_INFO</code> view.
      <p>Work-around:<br /><code class="sql">SELECT&nbsp;VERSION()</code></p>

      <p class="doclink"><a href="http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#id2914965">Documentation</a></p></td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="other-version-oracle">Oracle</a></td>
      <td class="solution"><code class="sql">SELECT banner FROM v$version</code>

      <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10820/dynviews_3117.htm">Documentation</a></p></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="other-version-informix">Informix</a></td>
      <td class="solution">Using SQL: <code class="sql">SELECT dbinfo('version','full') FROM systables WHERE tabid=1</code>

      <p>From the command line:
      <br /><code>onstat&nbsp;-</code></p>

      <p><span class="doclink">Documentation</span>:</p>
      <ul>
         <li>The <a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.sqls.doc/ids_sqs_1491.htm">dbinfo function</a></li>
         <li>The <a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.adref.doc/ids_adr_0495.htm">onstat utility</a></li>
      </ul>
      </td>
   </tr>
</table>

<h3><a class="name" name="other-standard_port">Standard TCP/IP port</a></h3>

<table>
   <tr>
      <th class="product">Product</th>
      <th class="solution">Port#</th>
      <th>Notes</th>
      <th>Documentation</th>
   </tr>
   <tr class="standard">
      <td class="product"><a class="name" name="other-standard_port-standard">Standard</a></td>
      <td class="solution" style="width: auto">Not&nbsp;specified</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="other-standard_port-postgresql">PostgreSQL</a></td>
      <td class="solution" style="width: auto">5432</td>
      <td>For security reasons, PostgreSQL doesn't listen to non-local TCP interfaces by default.</td>
      <td><a href="http://www.postgresql.org/docs/8.4/static/runtime-config-connection.html">Documentation</a></td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="other-standard_port-db2">DB2</a></td>
      <td class="solution" style="width: auto">50000</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="other-standard_port-mssql">MSSQL</a></td>
      <td class="solution" style="width: auto">1433</td>
      <td>By default, MSSQL Express Edition doesn't listen for TCP connections.</td>
      <td>&nbsp;</td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="other-standard_port-mysql">MySQL</a></td>
      <td class="solution" style="width: auto">3306</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="other-standard_port-oracle">Oracle</a></td>
      <td class="solution" style="width: auto">1521</td>
      <td>&nbsp;</td>
      <td><a href="http://download.oracle.com/docs/cd/E11882_01/network.112/e10836/listenercfg.htm">Documentation</a></td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="other-standard_port-informix">Informix</a></td>
      <td class="solution" style="width: auto">9088 (unencrypted)</td>
      <td>Informix versions prior to version 11, the default port was 1526.</td>
      <td>&nbsp;</td>
   </tr>
</table>

<h3><a class="name" name="other-diagnostic_log">Diagnostic log</a></h3>
<p>Each DBMS has different ways to record diagnostic information (event logs).</p>
<table>
   <tr class="standard">
      <td class="product"><a class="name" name="other-diagnostic_log-standard">Standard</a></td>
      <td class="solution">Not covered by the standard.</td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="other-diagnostic_log-postgresql">PostgreSQL</a></td>
      <td class="solution">By default, PostgreSQL logs to stderr, meaning that it's highly installation specific where the dianostic information is put; on this author's system, the default ends up in <code>/var/lib/pgsql/pgstartup.log</code>. The default can be set to something more reasonable (such as <code>syslog</code> on unix, <code>eventlog</code> on Windows) by adjusting the <code>log_destination</code> configuration parameter.

         <p class="doclink"><a href="http://www.postgresql.org/docs/8.4/static/runtime-config-logging.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="other-diagnostic_log-db2">DB2</a></td>
      <td class="solution">On unix systems, DB2s diagnostic log file is called <code>db2diag.log</code> and lives in the <code>sqllib/db2dump</code> sub-directory of the instance user's home directory. I.e., a typical full path is:<br /><code>/home/db2inst1/sqllib/db2dump/db2diag.log</code><br />If the file is renamed or deleted, DB2 will create a new <code>db2diag.log</code> without having to be restarted.

         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/db2luw/v9r7/topic/com.ibm.db2.luw.admin.trb.doc/doc/c0054462.html">Documentation</a></p>
      </td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="other-diagnostic_log-mssql">MSSQL</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="other-diagnostic_log-mysql">MySQL</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="other-diagnostic_log-oracle">Oracle</a></td>
      <td class="solution">A diagnostic directory contains a file called <code>alert_<span class="variable">INSTANCE</span>.log</code>. The diagnostic directory is determined by the following query:<br />
         <code class="sql">SELECT value FROM v$parameter WHERE name='background_dump_dest'</code><br />
         Examples of the diagnostic directory:
         <ul>
            <li>On an Oracle 11gR2 running on Linux: <code>/usr/local/oracle/diag/rdbms/<span class="variable">INSTANCE</span>/<span class="variable">INSTANCE</span>/trace</code></li>
            <li>On an Oracle 9.2 running on Windows: <code>D:\oracle\admin\<span class="variable">INSTANCE</span>\bdump</code></li>
         </ul>

         <p class="doclink"><a href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10595/monitoring001.htm#i1011629">Documentation</a></p>
      </td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="other-diagnostic_log-informix">Informix</a></td>
      <td class="solution">The path of the diagnostic log is defined by the MSGPATH configuration parameter. On a Linux installation, using default options:<br />
         <code>/opt/IBM/informix/tmp/online.log</code>


         <p class="doclink"><a href="http://publib.boulder.ibm.com/infocenter/idshelp/v115/topic/com.ibm.adref.doc/ids_adr_0112.htm">Documentation</a></p>
      </td>
   </tr>
</table>

<h2><a class="name" name="related">Related work</a></h2>
<ul class="longItems">
<li>Mimer Information Technology AB (makers of the
   <a href="http://www.mimer.com/">Mimer SQL</a> DBMS) has an 
   <a href="http://developer.mimer.com/validator/comparison/upd_comparison_chart.tml">interesting 
   feature comparison chart</a>, displaying what SQL:1999 features are implemented 
   in different commercial products. May be biased because it's created by a DBMS vendor.
   <br />Mimer also has <a href="http://developer.mimer.com/validator/reservedwords/">lists of reserved words</a>.</li>
<li>Wikipedia has a <em><a href="http://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems">Comparison of relational database management systems</a></em> page. And a <a href="http://en.wikibooks.org/wiki/SQL_dialects_reference">Wikibook called <em>SQL dialects reference</em></a> is in the works.</li>
<li>Chris Fehily's <em><a href="http://www.fehily.com/books/sql3.htm">SQL: Visual QuickStart Guide</a></em> teaches SQL by first describing the standards-based (SQL:2003) approach, and then how to adjust to the real World, using MS Access, MSSQL, Oracle, MySQL, PostgreSQL, and DB2. (Full disclosure note: I was <em>technical editor</em> on second edition of the book.)</li>
<li>Alessandro Tanasi: <em>Database <a href="http://www.tanasi.it/1246-database-datatype-comparison-sheet.html">datatype comparison sheet</a></em>.</li>
<li>Peter Gulutzan (who works for MySQL AB) has written <a href="http://www.ocelot.ca/ocelot.htm">several 
	articles</a> related to the subject. He has also written two related books:

   <ul>
   <li><em>SQL-99 Complete, Really</em> (co-authored with Trudy Pelzer) is said to be good.</li>
   <li><em><a href="http://www.awprofessional.com/bookstore/product.asp?isbn=0201791692">SQL Performance Tuning</a></em> (also co-authored with Trudy Pelzer), 
      mentions quite a few cross-product SQL issues 
	   (primarily related to performance, of course).</li>
   </ul>
</li>
<li><a name="astrogrid" class="name">Some</a> DBMS evaluations performed at the Astrogrid Virtual Observatory (focus on spatial functionality):
	<ul>
   <li>Various <a href="http://wiki.astrogrid.org/bin/view/Astrogrid/NotesOnDBMS">comparisons of MySQL, PostgreSQL and DB2</a>.</li>
   <li>Comparison of <a href="http://wiki.astrogrid.org/bin/view/Astrogrid/DBMSmathFunctions">availability and names of mathematical functions</a> in major DBMS products.</li>
	<li>Autumn '03: Comparison of <a href="http://wiki.astrogrid.org/bin/view/Astrogrid/ReportOnCrossMatchingCatalogues">DB2, MySQL, and Postgres</a>, comparing ease of use, scalability and performance of two types of spatial joins.</li>
	<li>Autumn '02: Comparison of <a href="http://wiki.astrogrid.org/bin/view/Astrogrid/DbmsEvaluations">PostgreSQL, MySQL, Oracle, SQL Server and DB2</a>.</li>
	</ul>
</li>
<li><em><a href="http://www.aronson.co.il/dbequiv/">Oracle / SQL Server / DB2 / Mckoi / MySQL Database Equivalents</a></em>.</li>
<li>Uday Parmar: <em><a href="http://www.devx.com/dbzone/Article/29480">Open Source Database Feature Comparison Matrix</a></em>.<br /><small>Note: Created by employees of a database vendor.</small></li>
<li>SQLite's survey of NULL-handling: <em><a href="http://www.sqlite.org/nulls.html">NULL Handling in SQLite Versus Other Database Engines</a></em>.</li>
<li>Bowman/Emerson/Darnovsky's 
	<em><a href="http://www.awprofessional.com/bookstore/product.asp?isbn=0201703092">The Practical SQL Handbook&mdash;Using SQL Variants</a></em> is OK for this subject, although it is rather out-dated and (worse) doesn't include any guidance on working with open source DBMSs.</li>
<li>Kevin E. Kline's <em><a href="http://oreilly.com/catalog/9780596518844">SQL in a Nutshell</a></em> from O'Reilly is a good reference. O'Reilly has also published Jonathan Gennick's <em><a href="http://oreilly.com/catalog/9780596526887/">SQL Pocket Guide</a></em> which looks good (but I haven't read it).</li>
<li>The Analysis and Solutions Company:
  <ul>
  <li><em><a href="http://www.analysisandsolutions.com/presentations/portability/slides/">Building Truly Portable Database Applications in PHP</a></em> includes advice on DBMS differences (some of the presentation is PHP-specific, as the title indicates).</li>
  <li><em><a href="http://www.analysisandsolutions.com/code/dates.htm">Database Portability: Date and Timestamp Columns</a></em>.</li>
  </ul>
</li>
<li>Jutta Horstmann <em><a href="http://www.osdbmigration.org:8080/osdb">OSDBmigration</a></em>.</li>
<li>Lewis Cunningham: <a href="http://it.toolbox.com/blogs/oracle-guide/a-comparison-of-data-types-between-various-databases-oracle-mysql-db2-ingres-sql-server-firebird-postgres-33209"><em>A comparison of data types between various databases - Oracle, MySQL, DB2, Ingres, SQL Server, Firebird, Postgres</em></a>.</li>
<li><a href="http://www.bristle.com/Tips/SQL.htm">Bristle Software SQL Tips</a> contains tips with variants for several DBMSes.</li>
<li>ConnStr.net: <a href="http://connstr.net/">.Net/ODBC connection strings to all sorts of database systems</a>.</li>
<li>See also <a href="links/">my DBMS links</a>.</li>
</ul>

<h2><a class="name" name="acknowledgments">Acknowledgments</a></h2>

<p>The following people have provided comments, suggestions and/or fixes, resulting in content changes on this page:</p>

<ul>
<li>Ian Barwick</li>
<li>Chester Kustarz</li>
<li>Bruno Wolff III</li>
<li>Carsten Pedersen</li>
<li>J&uuml;rgen Auer</li>
<li>Edi Stocker</li>
<li>Tzvetan Tzankov</li>
<li>Jess Robinson</li>
<li>Gordon P. Hemsley</li>
<li>Philip Nelson</li>
<li>Andreas Plesner Jacobsen</li>
<li>Clive Page</li>
<li>Holger Jakobs</li>
<li>Dennis Bj&ouml;rklund</li>
<li>Chris Fehily</li>
<li>Alf-Ivar Holm</li>
<li>Joseph Fuda</li>
<li>J M Sykes</li>
<li>Greg Sabino Mullane</li>
<li>Jari Aalto</li>
<li>Robert Jones</li>
<li>Greg Fortune</li>
<li>Dick Leone</li>
<li>Neil Conway</li>
<li>Markus Schaber</li>
<li>James Denny</li>
<li>Neal Lindsay</li>
<li>David Rowley</li>
<li>Erik Berglund</li>
<li>Michael Swart</li>
<li>Radosław Zieliński</li>
<li>Jonathan Giroux</li>
<li>Thomas Kellerer</li>
<li>Guillaume Taglang</li>
<li>Claus Samuelsen</li>
<li>David Fetter</li>
<li>Mike Wilson</li>
<li>James Beckett</li>
<li>Joachim Selke</li>
</ul>

<p><small>(In chronological order.)</small></p>

<hr />

<p>To <a href="/">Troels' home page</a>.</p>

<div class="footer">

<p>Version control information: $LastChangedDate: 2010-09-11 14:41:07 +0200 (Sat, 11 Sep 2010) $.</p>

<p><a class="name" name="license">This</a> work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/2.0/">Creative Commons License</a> which allows anyone to use the work in any way you want, as long as I'm attributed. <span class="floatright"><a rel="license" href="http://creativecommons.org/licenses/by/2.0/"><img alt="Creative Commons License" src="http://creativecommons.org/images/public/somerights20.gif" /></a></span></p>

<p><span class="floatright"><span class="online-only"><a href="http://validator.w3.org/check?uri=referer"><img src="http://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0!" height="31" width="88" /></a><a href="http://jigsaw.w3.org/css-validator/validator?uri=http%3A%2F%2Ftroels.arvin.dk%2Fdb%2Frdbms%2F"><img width="88" height="31" src="http://jigsaw.w3.org/css-validator/images/vcss" alt="Valid CSS!" /></a></span></span></p>

</div>

<!--

<rdf:RDF xmlns="http://web.resource.org/cc/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
<Work rdf:about="">
   <dc:title>Comparison of different SQL implementations</dc:title>
   <dc:creator><Agent>
      <dc:title>Troels Arvin</dc:title>
   </Agent></dc:creator>
   <dc:rights><Agent>
      <dc:title>Troels Arvin</dc:title>
   </Agent></dc:rights>
   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
   <dc:source rdf:resource="http://troels.arvin.dk/db/rdbms/"/>
   <license rdf:resource="http://creativecommons.org/licenses/by/2.0/" />
</Work>

<License rdf:about="http://creativecommons.org/licenses/by/2.0/">
   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
   <requires rdf:resource="http://web.resource.org/cc/Notice" />
   <requires rdf:resource="http://web.resource.org/cc/Attribution" />
   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
</License>

</rdf:RDF>

-->

<div class="dummyspace">
<p><a class="name" name="bottom">&nbsp;</a></p>
<p>&nbsp;</p><p>&nbsp;</p>
<p>&nbsp;</p><p>&nbsp;</p>
<p>&nbsp;</p><p>&nbsp;</p>
<p>&nbsp;</p><p>&nbsp;</p>
<p>&nbsp;</p><p>&nbsp;</p>
<p>&nbsp;</p><p>&nbsp;</p>
<p>&nbsp;</p><p>&nbsp;</p>
<p>&nbsp;</p><p>&nbsp;</p>
<p>&nbsp;</p><p>&nbsp;</p>
<p>&nbsp;</p><p>&nbsp;</p>
</div>

</body></html>

<!--
<table>
   <tr class="standard">
      <td class="product"><a class="name" name="-standard">Standard</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="postgresql">
      <td class="product"><a class="name" name="-postgresql">PostgreSQL</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="db2">
      <td class="product"><a class="name" name="-db2">DB2</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="mssql">
      <td class="product"><a class="name" name="-mssql">MSSQL</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="mysql">
      <td class="product"><a class="name" name="-mysql">MySQL</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="oracle">
      <td class="product"><a class="name" name="-oracle">Oracle</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
   <tr class="informix">
      <td class="product"><a class="name" name="-informix">Informix</a></td>
      <td class="solution">On my TODO.</td>
   </tr>
</table>







/* vim: set expandtab softtabstop=3 tabstop=3 shiftwidth=3: */
-->
