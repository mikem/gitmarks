<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html dir='ltr' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'>
<head>
<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'/>
<script type="text/javascript">(function() { var a=window;function c(b){this.t={};this.tick=function(d,i,e){e=e?e:(new Date).getTime();this.t[d]=[e,i]};this.tick("start",null,b)}var f=new c;a.jstiming={Timer:c,load:f};try{var g=null;if(a.chrome&&a.chrome.csi)g=Math.floor(a.chrome.csi().pageT);if(g==null)if(a.gtbExternal)g=a.gtbExternal.pageT();if(g==null)if(a.external)g=a.external.pageT;if(g)a.jstiming.pt=g}catch(h){};a.tickAboveFold=function(b){b=b;var d=0;if(b.offsetParent){do d+=b.offsetTop;while(b=b.offsetParent)}b=d;b<=750&&a.jstiming.load.tick("aft")};var j=false;function k(){if(!j){j=true;a.jstiming.load.tick("firstScrollTime")}}a.addEventListener?a.addEventListener("scroll",k,false):a.attachEvent("onscroll",k);
 })();</script>
<meta content='true' name='MSSmartTagsPreventParsing'/>
<meta content='blogger' name='generator'/>
<link href='http://www.blogger.com/favicon.ico' rel='icon' type='image/vnd.microsoft.icon'/>
<link href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html' rel='canonical'/>
<link rel="alternate" type="application/atom+xml" title="A Neighborhood of Infinity - Atom" href="http://blog.sigfpe.com/feeds/posts/default" />
<link rel="alternate" type="application/rss+xml" title="A Neighborhood of Infinity - RSS" href="http://blog.sigfpe.com/feeds/posts/default?alt=rss" />
<link rel="service.post" type="application/atom+xml" title="A Neighborhood of Infinity - Atom" href="http://www.blogger.com/feeds/11295132/posts/default" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.blogger.com/rsd.g?blogID=11295132" />
<link rel="alternate" type="application/atom+xml" title="A Neighborhood of Infinity - Atom" href="http://blog.sigfpe.com/feeds/7531218329312814569/comments/default" />
<!--[if IE]> <script> (function() { var html5 = ("abbr,article,aside,audio,canvas,datalist,details," + "figure,footer,header,hgroup,mark,menu,meter,nav,output," + "progress,section,time,video").split(','); for (var i = 0; i < html5.length; i++) { document.createElement(html5[i]); } })(); </script> <![endif]-->
<title>A Neighborhood of Infinity: Haskell Monoids and their Uses</title>
<link type='text/css' rel='stylesheet' href='http://www.blogger.com/static/v1/widgets/1743847221-widget_css_bundle.css' />
 <link rel="stylesheet" type="text/css" href="http://www.blogger.com/dyn-css/authorization.css?targetBlogID=11295132&zx=ef29556b-6eb2-44b0-aa48-3704f39042d8"/>
<style type="text/css">#navbar-iframe { display:block }
</style>

<style id='page-skin-1' type='text/css'><!--
/*
* Blogger Template Style
*
* Simple II
* by Jason Sutter
*/
/* Variable definitions
====================
<Variable name="bgcolor" description="Page Background Color"
type="color" default="#fff">
<Variable name="textcolor" description="Text Color"
type="color" default="#000">
<Variable name="pagetitlecolor" description="Blog Title Color"
type="color" default="#000">
<Variable name="titlecolor" description="Post Title Color"
type="color" default="#000">
<Variable name="footercolor" description="Date and Footer Color"
type="color" default="#555">
<Variable name="linkcolor" description="Link Color"
type="color" default="#58a">
<Variable name="visitedlinkcolor" description="Visited Link Color"
type="color" default="#999"> Used to be #969
<Variable name="bordercolor" description="Border Color"
type="color" default="#999">
<Variable name="bodyfont" description="Text Font"
type="font" default="normal normal 100% Georgia,Serif;">
<Variable name="pagetitlefont" description="Blog Title Font"
type="font"
default="normal bold 200% Georgia,Serif">
<Variable name="startSide" description="Start side in blog language"
type="automatic" default="left">
<Variable name="endSide" description="End side in blog language"
type="automatic" default="right">
*/
body {
margin:0;
font:normal normal 100% Georgia,Serif;;
background:#ffffff;
color:#000000;
}
a:link {
color:#5588aa;
text-decoration:none;
}
a:visited {
color:#999999;
text-decoration:none;
}
a:hover {
color:#000000;
text-decoration:underline;
}
a img {
border-width:0;
}
#outer-wrapper {
margin-top: 0px;
margin-right: 3em;
margin-bottom: 0;
margin-left: 3em;
}
h1 {
border-bottom:dotted 1px #999999;
margin-bottom:0px;
color: #000000;
font: normal bold 200% Georgia,Serif;
}
h1 a, h1 a:link, h1 a:visited {
color: #000000;
}
h2 {
margin:0px;
padding: 0px;
}
#main .widget {
padding-bottom:10px;
margin-bottom:20px;
border-bottom:dotted 1px #999999;
clear: both;
}
#main .Header {
border-bottom-width: 0px;
}
h2.date-header {
padding-top:15px;
color:#555555;
padding-bottom:0px;
margin-bottom:0px;
font-size: 90%;
}
h3.post-title {
font-size: 140%;
color: #000000;
}
.post {
padding-left:5%;
padding-right:10%;
}
.post-footer {
color:#555555;
}
#comments {
padding-top:30px;
color:#000000;
padding-bottom:0px;
margin-bottom:0px;
font-weight:bold;
}
#comments .comment-footer {
font-size:1em;
font-weight:normal;
color:#555555;
margin-right:10px;
display:inline;
}
.comment-author {
margin-top: 3%;
}
.comment-body {
font-size:1em;
font-weight:normal;
}
.deleted-comment {
font-style:italic;
color:gray;
}
.comment-link {
margin-left:.6em;
}
.feed-links {
clear: both;
line-height: 2.5em;
}
#blog-pager-newer-link {
float: left;
}
#blog-pager-older-link {
float: right;
}
#blog-pager {
text-align: center;
}
.clear {
clear: both;
}
.profile-img {
float: left;
margin-top: 0;
margin-right: 5px;
margin-bottom: 5px;
margin-left: 0;
}
body#layout #outer-wrapper {
margin-top: 0px;
margin-right: 50px;
margin-bottom: 0;
margin-left: 50px;
}

--></style>
<script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('headEnd');
</script></head>
<body>
<div class='navbar section' id='navbar'><div class='widget Navbar' id='Navbar1'><script type="text/javascript">
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener("load",
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent('onload', function(){ object[attribute] = val; });
      }
    }
  </script>
<iframe src="http://www.blogger.com/navbar.g?targetBlogID=11295132&amp;blogName=A+Neighborhood+of+Infinity&amp;publishMode=PUBLISH_MODE_HOSTED&amp;navbarType=BLUE&amp;layoutType=LAYOUTS&amp;searchRoot=http%3A%2F%2Fblog.sigfpe.com%2Fsearch&amp;blogLocale=en_US&amp;homepageUrl=http%3A%2F%2Fblog.sigfpe.com%2F&amp;targetPostID=7531218329312814569" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" height="30px" width="100%" id="navbar-iframe" allowtransparency="true" title="Blogger Navigation and Search"></iframe>
<div></div></div></div>
<div id='outer-wrapper'>
<div class='main section' id='main'><div class='widget Header' id='Header1'>
<div id='header-inner'>
<div class='titlewrapper'>
<h1 class='title'>
<a href='http://blog.sigfpe.com/'>A Neighborhood of Infinity</a>
</h1>
</div>
<div class='descriptionwrapper'>
<p class='description'><span>
</span></p>
</div>
</div>
</div><div class='widget Blog' id='Blog1'>
<div class='blog-posts hfeed'>
<!-- google_ad_section_start(name=default) -->

          <div class="date-outer">
        
<h2 class='date-header'><span>Saturday, January 17, 2009</span></h2>

          <div class="date-posts">
        
<div class='post-outer'>
<div class='post hentry'>
<a name='7531218329312814569'></a>
<h3 class='post-title entry-title'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html'>Haskell Monoids and their Uses</a>
</h3>
<div class='post-header-line-1'></div>
<div class='post-body entry-content'>
Haskell is a great language for constructing code modularly from small but orthogonal building blocks. One of these small blocks is the monoid. Although monoids come from mathematics (algebra in particular) they are found everywhere in computing. You probably use one or two monoids implicitly with every line of code you write, whatever the language, but you might not know it yet. By making them explicit we find interesting new ways of constructing those lines of code. In particular, ways that are often easier to both read and write. So the following is an intro to monoids in Haskell. I'm assuming familiarity with type classes, because Haskell monoids form a type class. I also assume some familiarity with monads, though nothing too complex.<br /><br />This post is literate Haskell so you can play with the examples directly.<br /><br /><H3>Defining Monoids</H3><br />In Haskell, a monoid is a type with a rule for how two elements of that type can be combined to make another element of the same type. To be a monoid there also needs to be an element that you can think of as representing 'nothing' in the sense that when it's combined with other elements it leaves the other element unchanged.<br /><br />A great example is lists. Given two lists, say <tt>[1,2]</tt> and <tt>[3,4]</tt>, you can join them together using <tt>++</tt> to get <tt>[1,2,3,4]</tt>. There's also the empty list <tt>[]</tt>. Using <tt>++</tt> to combine <tt>[]</tt> with any list gives you back the same list, for example <tt>[]++[1,2,3,4]==[1,2,3,4]</tt>.<br /><br />Another example is the type of integers, <tt>Integer</tt>. Given two elements, say 3 and 4, we can combine them with + to get 7. We also have the element 0 which when added to any other integer leaves it unchanged.<br /><br />So here is a possible definition for the monoid type class:<br /><pre><br />class Monoid m where<br />    mappend :: m -> m -> m<br />    mempty :: m<br /></pre><br />The function mappend is the function we use to combine pairs of elements, and mempty is the 'nothing' element. We can make lists an instance like this:<br /><br /><pre><br />instance Monoid [a] where<br />    mappend = (++)<br />    mempty = []<br /></pre><br /><br />Because we want mempty to do nothing when combined with other elements we also require monoids to obey these two rules<br /><pre><br />a `mappend` mempty = a<br /></pre><br />and<br /><pre><br />mempty `mappend` a = a.<br /></pre><br /><br />Notice how there are two ways to combine a and b using mappend. We can write <tt>a `mappend` b</tt> or <tt>b `mappend` a</tt>. There is no requirement on a monoid that these be equal to each other. (But see below.) But there is another property that monoids are required to have. Suppose we start with the list <tt>[3,4]</tt>. And now suppose we want to concatenate it with <tt>[1,2]</tt> on the left and <tt>[5,6]</tt> on the right. We could do the left concatenation first to get <tt>[1,2]++[3,4]</tt> and then form <tt>([1,2]++[3,4])++[5,6]</tt>. But we could do the right one first and get <tt>[1,2]++([3,4]++[5,6])</tt>. Because we're concatenating at opposite ends the two operations don't interfere and it doesn't matter which we do first. This gives rise to the third and last requirement we have of monoids:<br /><pre><br />(a `mappend` b) `mappend` c == a `mappend` (b `mappend` c)<br /></pre><br />and you can summarise it with the slogan 'combining on the left doesn't interfere with combining on the right'. Notice how the integers, combined with +, also have this property. It's such a useful property it has a name: associativity.<br /><br />That's a complete specification of what a monoid is. Haskell doesn't enfore the three laws I've given, but anyone reading code using a monoid will expect these laws to hold.<br /><br /><H3>Some Uses of Monoids</H3><br />But given that we already have individual functions like <tt>++</tt> and <tt>+</tt>, why would we ever want to use mappend instead?<br /><br />One reason is that with a monoid we get another function called mconcat for free. mconcat takes a list of values in a monoid and combines them all together. For example <tt>mconcat [a,b,c]</tt> is equal to <tt>a `mappend` (b `mappend` c)</tt>. Any time you have a monoid you have this quick and easy way to combine a whole list together. But note that there is some ambiguity in the idea behind <tt>mconcat</tt>. To compute <tt>mconcat [a,b,...,c,d]</tt> which order should we work in? Should we work from left to right and compute <tt>a `mappend` b</tt> first? Or should we start with <tt>c `mappend` d</tt>. That's one place where the associativity law comes in: it makes no difference.<br /><br />Another place where you might want to use a monoid is in code that is agnostic about how you want to combine elements. Just as mconcat works with any monoid, you might want to write your own code that works with any monoid.<br /><br />Explicitly using the Monoid type class for a function also tells the reader of your code what your intentions are. If a function has signature <tt>[a] -&gt; b</tt> you know it takes a list and constructs an object of type b from it. But it has considerable freedom in what it can do with your list. But if you see a function of type <tt>(Monoid a) =&gt; a -&gt; b</tt>, even if it is only used with lists, we know what kind of things the function will do with the list. For example, we know that the function might add things to your list, but it's never going to pull any elements out of your list.<br /><br />The same type can give rise to a monoid in different ways. For example, I've already mentions that the integers form a monoid. So we could define:<br /><pre><br />instance Monoid Integer where<br />    mappend = (+)<br />    mempty = 0<br /></pre><br />But there's a good reason not to do that: there's another natural way to make integers into a monoid:<br /><pre><br /><br />instance Monoid Integer where<br />    mappend = (*)<br />    mempty = 1<br /></pre><br />We can't have both of these definitions at the same time. So the Data.Monoid library doesn't make Integer into a Monoid directly. Instead, it wraps them with Sum and Product. It also does so more generally so that you can make any Num type into a monoid in two different ways. We have both<br /><pre><br />Num a => Monoid (Sum a)<br /></pre><br />and<br /><pre><br />Num a => Monoid (Product a)<br /></pre><br />To use these we wrap our values in the appropriate wrapper and we can then use the monoid functions. For example <tt>mconcat [Sum 2,Sum 3,Sum 4]</tt> is <tt>Sum 9</tt>, but <tt>mconcat [Product 2,Product 3,Product 4]</tt> is <tt>[Product 24]</tt>.<br /><br />Using <tt>Sum</tt> and <tt>Product</tt> looks like a complicated way to do ordinary addition and multiplication. Why do things that way?<br /><br /><H3>The Writer Monad</H3><br />You can think of monoids as being accumulators. Given a running total, n, we can add in a new value a to get a new running total n' = n `mappend` a. Accumulating totals is a very common design pattern in real code so it's useful to abstract this idea. This is exactly what the Writer monad allows. We can write monadic code that accumulates values as a "side effect". The function to perform the accumulation is (somewhat confusingly) called <tt>tell</tt>. Here's an example where we're logging a trace of what we're doing.<br /><br /><pre><br />&gt; import Data.Monoid<br />&gt; import Data.Foldable<br />&gt; import Control.Monad.Writer<br />&gt; import Control.Monad.State<br /><br />&gt; fact1 :: Integer -&gt; Writer String Integer<br />&gt; fact1 0 = return 1<br />&gt; fact1 n = do<br />&gt;   let n' = n-1<br />&gt;   tell $ "We've taken one away from " ++ show n ++ "\n"<br />&gt;   m &lt;- fact1 n'<br />&gt;   tell $ "We've called f " ++ show m ++ "\n"<br />&gt;   let r = n*m<br />&gt;   tell $ "We've multiplied " ++ show n ++ " and " ++ show m ++ "\n"<br />&gt;   return r<br /><br /></pre><br />This is an implementation of the factorial function that tells us what it did. Each time we call <tt>tell</tt> we combine its argument with the running log of all of the strings that we've 'told' so far. We use <tt>runWriter</tt> to extract the results back out. If we run<br /><br /><pre><br />&gt; ex1 = runWriter (fact1 10)<br /><br /></pre><br />we get back both 10! and a list of what it took to compute this.<br /><br />But Writer allows us to accumulate more than just strings. We can use it with any monoid. For example, we can use it to count how many multiplications and subtractions were required to compute a given factorial. To do this we simply tell a value of the appropriate type. In this case we want to add values, and the monoid for addition is Sum. So instead we could implement:<br /><br /><pre><br />&gt; fact2 :: Integer -&gt; Writer (Sum Integer) Integer<br />&gt; fact2 0 = return 1<br />&gt; fact2 n = do<br />&gt;   let n' = n-1<br />&gt;   tell $ Sum 1<br />&gt;   m &lt;- fact2 n'<br />&gt;   let r = n*m<br />&gt;   tell $ Sum 1<br />&gt;   return r<br /></pre><br />    <br /><pre><br />&gt; ex2 = runWriter (fact2 10)<br /><br /></pre><br />There's another way we could have written this, using the state monad:<br /><br /><pre><br />&gt; fact3 :: Integer -&gt; State Integer Integer<br />&gt; fact3 0 = return 1<br />&gt; fact3 n = do<br />&gt;   let n' = n-1<br />&gt;   modify (+1)<br />&gt;   m &lt;- fact3 n'<br />&gt;   let r = n*m<br />&gt;   modify (+1)<br />&gt;   return r<br /><br />&gt; ex3 = runState (fact3 10) 0<br /><br /></pre><br />It works just as well, but there is a big advantage to using the <tt>Writer</tt> version. It has type signature <tt>f :: Integer -&gt; Writer (Sum Integer) Integer</tt>. We can immediately read from this that our function has a side effect that involves accumulating a number in a purely additive way. It's never going to, for example, multiply the accumulated value. The type information tells us a lot about what is going on inside the function without us having to read a single line of the implementation. The version written with <tt>State</tt> is free to do whatever it likes with the accumulated value and so it's harder to discern its purpose.<br /><br />Data.Monoid also provides an Any monoid. This is the Bool type with the disjunction operator, better known as ||. The idea behind the name is that if you combine together any collection of elements of type <tt>Any</tt> then the result is <tt>Any True</tt> precisely when at least any one of the original elements is <tt>Any True</tt>. If we think of these values as accumulators then they provide a kind of one way switch. We start accumulating with mempty, ie. <tt>Any False</tt>, and we can think of this as being the switch being off. Any time we accumulate Any True into our running 'total' the switch is turned on. This switch can never be switched off again by accumulating any more values. This models a pattern we often see in code: a flag that we want to switch on, as a side effect, if a certain condition is met at any point.<br /><br /><pre><br />&gt; fact4 :: Integer -&gt; Writer Any Integer<br />&gt; fact4 0 = return 1<br />&gt; fact4 n = do<br />&gt;   let n' = n-1<br />&gt;   m &lt;- fact4 n'<br />&gt;   let r = n*m<br />&gt;   tell (Any (r==120))<br />&gt;   return r<br /><br />&gt; ex4 = runWriter (fact4 10)<br /><br /></pre><br />At the end of our calculation we get n!, but we are also told if at any stage in the calculation two numbers were multiplied to give 120. We can almost read the tell line as if it were English: "tell my caller if any value of r is ever 120". Not only do we get the plumbing for this flag with a minimal amount of code. If we look at the type for this version of f it tells us exactly what's going on. We can read off immediately that this function, as a "side effect", computes a flag that can be turned on, but never turned off. That's a lot of useful information from just a type signature. In many other programming languages we might expect to see a boolean in the type signature, but we'd be forced to read the code to get any idea of how it will be used.<br /><br /><H3>Commutative Monoids, Non-Commutative Monoids and Dual Monoids</H3><br /><br />Two elements of a monoid, x and y, are said to commute if <tt>x `mappend` y == y `mappend` x</tt>. The monoid itself is said to be commutative if all of its elements commute with each other. A good example of a commutative monoid is the type of integers. For any pair of integers, <tt>a+b==b+a</tt>.<br /><br />If a monoid isn't commutative, it's said to be non-commutative. If it's non-comuutative it means that for some x and y, <tt>x `mappend` y</tt> isn't the same as <tt>y `mappend` x</tt>, so <tt>mappend</tt> and <tt>flip mappend</tt> are not the same function. For example <tt>[1,2] ++ [3,4]</tt> is different from <tt>[3,4] ++ [1,2]</tt>. This has the interesting consequence that we can make another monoid in which the combination function is <tt>flip mappend</tt>. We can still use the same <tt>mempty</tt> element, so the first two monoid laws hold. Additionally, it's a nice exercise to prove that the third monoid law still holds. This flipped monoid is called the dual monoid and Data.Monoid provides the <tt>Dual</tt> type constructor to build the dual of a monoid. We can use this to reverse the order in which the writer monad accumulates values. For example the following code collects the execution trace in reverse order:<br /><br /><pre><br />&gt; fact5 :: Integer -&gt; Writer (Dual String) Integer<br />&gt; fact5 0 = return 1<br />&gt; fact5 n = do<br />&gt;   let n' = n-1<br />&gt;   tell $ Dual $ "We've taken one away from " ++ show n ++ "\n"<br />&gt;   m &lt;- fact5 n'<br />&gt;   tell $ Dual $ "We've called f " ++ show m ++ "\n"<br />&gt;   let r = n*m<br />&gt;   tell $ Dual $ "We've multiplied " ++ show n ++ " and " ++ show m ++ "\n"<br />&gt;   return r<br /><br />&gt; ex5 = runWriter (fact5 10)<br /><br /></pre><br /><H3>The Product Monoid</H3><br /><br />Suppose we want to accumulate two side effects at the same time. For example, maybe we want to both count instructions and leave a readable trace of our computation. We could use monad transformers to combine two writer monads. But there is a slightly easier way - we can combine two monoids into one 'product' monoid. It's defined like this:<br /><pre><br />instance (Monoid a,Monoid b) => Monoid (a,b) where<br />    mempty = (mempty,mempty)<br />    mappend (u,v) (w,x) = (u `mappend` w,v `mappend` x)<br /></pre><br /><br />Each time we use mappend on the product we actually perform a pair of mappends on each of the elements of the pair. With these small helper functions:<br /><br /><pre><br />&gt; tellFst a = tell $ (a,mempty)<br />&gt; tellSnd b = tell $ (mempty,b)<br /><br /></pre><br />we can now use two monoids simultaneously:<br /><br /><pre><br />&gt; fact6 :: Integer -&gt; Writer (String,Sum Integer) Integer<br />&gt; fact6 0 = return 1<br />&gt; fact6 n = do<br />&gt;   let n' = n-1<br />&gt;   tellSnd (Sum 1)<br />&gt;   tellFst $ "We've taken one away from " ++ show n ++ "\n"<br />&gt;   m &lt;- fact6 n'<br />&gt;   let r = n*m<br />&gt;   tellSnd (Sum 1)<br />&gt;   tellFst $ "We've multiplied " ++ show n ++ " and " ++ show m ++ "\n"<br />&gt;   return r<br /><br />&gt; ex6 = runWriter (fact6 5)<br /><br /></pre><br />If we had simply implemented our code using one specific monoid, like lists, our code would be very limited in its application. But by using the general <tt>Monoid</tt> type class we ensure that users of our code can use not just any individual monoid, but even multiple monoids. This can make for more efficient code because it means we can perform multiple accumulations while traversing a data structure once. And yet we still ensure readability because our code is written using the interface to a single monoid making our algorithms simpler to read.<br /><br /><H3>Foldable Data</H3><br /><br />One last application to mention is the Data.Foldable library. This provides a generic approach to walking through a datastructure, accumulating values as we go. The <tt>foldMap</tt> function applies a function to each element of our structure and then accumulates the return values of each of these applications. An implementation of <tt>foldMap</tt> for a tree structure might be:<br /><br /><pre><br />&gt; data Tree a = Empty | Leaf a | Node (Tree a) a (Tree a)<br /><br />&gt; instance Foldable Tree where<br />&gt;   foldMap f Empty = mempty<br />&gt;   foldMap f (Leaf x) = f x<br />&gt;   foldMap f (Node l k r) = foldMap f l `mappend` f k `mappend` foldMap f r<br /></pre><br />    <br />We can now use any of the monoids discussed above to compute properties of our trees. For example, we can use the function <tt>(== 1)</tt> to test whether each element is equal to 1 and then use the Any monoid to find out if any element of the tree is equal to 1. Here are a pair of examples: one to compute whether or not an element is equal to 1, and another to test if every element is greater than 5:<br /><br /><pre><br />&gt; tree = Node (Leaf 1) 7 (Leaf 2)<br /><br />&gt; ex7 = foldMap (Any . (== 1)) tree<br />&gt; ex8 = foldMap (All . (&gt; 5)) tree<br /><br /></pre><br />Note, of course, that these expressions can be used, unmodified, with any foldable type, not just trees.<br /><br />I hope you agree that this expresses our intentions in a way that is easy to read.<br /><br />That suggests another exercise: write something similar to find the minimum or maximum element in a tree. You may need to construct a new monoid along the lines of <tt>Any</tt> and <tt>All</tt>. Try finding both in one traversal of the tree using the product monoid.<br /><br />The foldable example also illustrates another point. The implementor of <tt>foldMap</tt> for the tree doesn't need to worry about whether the left tree should be combined with the central element before the right tree. Associativity means it can be implemented either way and give the same results.<br /><br /><H3>Recap</H3><br />Monoids provide a general approach to combining and accumulating values. They allow us to write code that is agnostic about the method we will use to combine values, and that makes our code more reusable. By using named monoids we can write type signatures that express our intentions to people reading our code: for example by using Any instead of Bool we make it clear just how our boolean value is to be used. And we can combine the monoid-based building blocks provided by Haskell libraries to build useful and readable algorithms with a minimum of effort.<br /><br />Some final notes: mathematicians often refer to mappend as a 'binary operator' and often it's called 'multiplication'. Just like in ordinary algebra, it's often also written with abuttal or using the star operator, ie. ab and a*b might both represent <tt>a `mappend` b</tt>. You can read more about monoids at <a href="http://en.wikipedia.org/wiki/Monoid">Wikipedia</a>. And I wish I had time to talk about monoid morphisms, and why the list monoid is free (and what consequences that might have for how you can your write code), and how compositing gives you <a href="http://en.wikipedia.org/wiki/Alpha_compositing">monoids</a> and a whole lot more.<br /><HR><br /><iframe src="http://rcm.amazon.com/e/cm?t=sigfpe-20&o=1&p=8&l=as1&asins=0262660717&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
<div style='clear: both;'></div>
</div>
<div class='post-footer'>
<div class='post-footer-line post-footer-line-1'><span class='post-author vcard'>
Posted by
<span class='fn'>sigfpe</span>
</span>
<span class='post-timestamp'>
at
<a class='timestamp-link' href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html' rel='bookmark' title='permanent link'><abbr class='published' title='2009-01-17T13:47:00-08:00'>Saturday, January 17, 2009</abbr></a>
</span>
<span class='post-comment-link'>
</span>
<span class='post-icons'>
<span class='item-action'>
<a href='http://www.blogger.com/email-post.g?blogID=11295132&postID=7531218329312814569' title='Email Post'>
<img alt='' class='icon-action' src='http://www.blogger.com/img/icon18_email.gif'/>
</a>
</span>
<span class='item-control blog-admin pid-961546855'>
<a href='http://www.blogger.com/post-edit.g?blogID=11295132&postID=7531218329312814569' title='Edit Post'>
<img alt='' class='icon-action' height='18' src='http://img2.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/>
</a>
</span>
</span>
<span class='post-backlinks post-comment-link'>
</span>
</div>
<div class='post-footer-line post-footer-line-2'><span class='post-labels'>
</span>
</div>
<div class='post-footer-line post-footer-line-3'></div>
</div>
</div>
<div class='comments' id='comments'>
<a name='comments'></a>
<h4>
32
comments:
        
</h4>
<div id='Blog1_comments-block-wrapper'>
<dl class='avatar-comment-indent' id='comments-block'>
<dt class='comment-author ' id='c5888740182765877123'>
<a name='c5888740182765877123'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/02173506978646246705" rel="nofollow" onclick="" class="avatar-hovercard" id="av-0-02173506978646246705"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="jag">

</a></span></div>
<a href='http://www.blogger.com/profile/02173506978646246705' rel='nofollow'>jag</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5888740182765877123'>
<p>
"Suppose we start with the list [3,4]. And now suppose we want to concatenate it with [1,2] on the left and [3,4] on the right."<BR/><BR/>Did you mean [5,6] on the right?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232232240000#c5888740182765877123' title='comment permalink'>
Saturday, 17 January, 2009
</a>
<span class='item-control blog-admin pid-1524041323'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=5888740182765877123' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c130690361018641210'>
<a name='c130690361018641210'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/08096190433222340957" rel="nofollow" onclick="" class="avatar-hovercard" id="av-1-08096190433222340957"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="26" alt="" class="delayLoad" style="display: none;" longdesc="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" title="sigfpe">

<noscript><img src="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" width="35" height="26" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/08096190433222340957' rel='nofollow'>sigfpe</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-130690361018641210'>
<p>
jag, <BR/><BR/>Yes. When I have a moment I'll fix it.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232232360000#c130690361018641210' title='comment permalink'>
Saturday, 17 January, 2009
</a>
<span class='item-control blog-admin pid-961546855'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=130690361018641210' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4304556686092933769'>
<a name='c4304556686092933769'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/16990997255414980224" rel="nofollow" onclick="" class="avatar-hovercard" id="av-2-16990997255414980224"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Vagif Verdi">

</a></span></div>
<a href='http://www.blogger.com/profile/16990997255414980224' rel='nofollow'>Vagif Verdi</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4304556686092933769'>
<p>
Great article. Very well written, clear and accessible to haskell newbees. <BR/><BR/>I&#39;m sure you know about haskell wikibook, which is a collection of haskell tutorials. Currently Monoids article is missing from wikibooks: http://en.wikibooks.org/w/index.php?title=Haskell/Monoids&amp;action=edit&amp;redlink=1<BR/><BR/>Would you mind to incorporate your article to wikibooks ? It would be a great addition and will enjoy much higher visibility there.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232236620000#c4304556686092933769' title='comment permalink'>
Saturday, 17 January, 2009
</a>
<span class='item-control blog-admin pid-1682651986'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=4304556686092933769' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1496959440634100205'>
<a name='c1496959440634100205'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/02173506978646246705" rel="nofollow" onclick="" class="avatar-hovercard" id="av-3-02173506978646246705"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="jag">

</a></span></div>
<a href='http://www.blogger.com/profile/02173506978646246705' rel='nofollow'>jag</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1496959440634100205'>
<p>
Indeed, great article, very well written. I hope you can find the time to tell us about all those things you're teasing us with in the last paragraph.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232246400000#c1496959440634100205' title='comment permalink'>
Saturday, 17 January, 2009
</a>
<span class='item-control blog-admin pid-1524041323'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=1496959440634100205' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5562845273605539740'>
<a name='c5562845273605539740'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Nicolas">

</span></div>
Nicolas
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5562845273605539740'>
<p>
Great article! I usually try to read your posts, but they are too complex for me most of the time. This one was very well written and simple enough. <BR/><BR/>I think I noticed a mistake: <BR/><I><BR/>mconcat [Product 2,Product 3,Product 4] is [Product 24].<BR/></I><BR/>Shouldn't that be Product 24 instead of the list [Product 24]?<BR/><BR/>Thanks for taking the time to write on this!
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232292540000#c5562845273605539740' title='comment permalink'>
Sunday, 18 January, 2009
</a>
<span class='item-control blog-admin pid-79519501'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=5562845273605539740' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5302232977628356124'>
<a name='c5302232977628356124'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Drew P. Vogel">

</span></div>
Drew P. Vogel
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5302232977628356124'>
<p>
This post seems as if it sprung from the Monoid vs Appendable naming discussion on haskell-cafe. This explanation of the Monoid type class is *exactly* what the documentation needs. Not only did I fully understand it, I now also understand what the Writer Monad does for me.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232296200000#c5302232977628356124' title='comment permalink'>
Sunday, 18 January, 2009
</a>
<span class='item-control blog-admin pid-1052486754'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=5302232977628356124' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c4976680373202357654'>
<a name='c4976680373202357654'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/08096190433222340957" rel="nofollow" onclick="" class="avatar-hovercard" id="av-6-08096190433222340957"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="26" alt="" class="delayLoad" style="display: none;" longdesc="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" title="sigfpe">

<noscript><img src="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" width="35" height="26" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/08096190433222340957' rel='nofollow'>sigfpe</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4976680373202357654'>
<p>
Drew,<BR/><BR/>I was, of course, following the little flamewar about monoids!
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232298600000#c4976680373202357654' title='comment permalink'>
Sunday, 18 January, 2009
</a>
<span class='item-control blog-admin pid-961546855'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=4976680373202357654' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3066780622758095169'>
<a name='c3066780622758095169'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3066780622758095169'>
<p>
Thanks, a very clear explanation of not just what monoids are, but also (and much more importantly) why they are an interesting abstraction for programming. I hope you get time to talk about the interesting-sounding stuff you mentioned at the end of your post.<BR/><BR/>A quick question: for the Writer monad, is it necessary for mappend to be associative?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232299140000#c3066780622758095169' title='comment permalink'>
Sunday, 18 January, 2009
</a>
<span class='item-control blog-admin pid-1955134213'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=3066780622758095169' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1277418843944497096'>
<a name='c1277418843944497096'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/14754929367418830739" rel="nofollow" onclick="" class="avatar-hovercard" id="av-8-14754929367418830739"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="&#21934;&#20013;&#26480;">

</a></span></div>
<a href='http://www.blogger.com/profile/14754929367418830739' rel='nofollow'>單中杰</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1277418843944497096'>
<p>
Great article! Surely you mean to cite <A HREF="http://sigfpe.blogspot.com/2008/11/approach-to-algorithm-parallelisation.html" REL="nofollow">your earlier article on algorithm parallelization</A>. (:
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232308140000#c1277418843944497096' title='comment permalink'>
Sunday, 18 January, 2009
</a>
<span class='item-control blog-admin pid-152153282'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=1277418843944497096' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2449059956426574359'>
<a name='c2449059956426574359'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/08974372500960094990" rel="nofollow" onclick="" class="avatar-hovercard" id="av-9-08974372500960094990"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Shin no Noir">

</a></span></div>
<a href='http://www.blogger.com/profile/08974372500960094990' rel='nofollow'>Shin no Noir</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2449059956426574359'>
<p>
I've come up with the following solution to the Min/Max monoid exercise, but it only works for instances of Bounded:<BR/><BR/>   http://hpaste.org/14067<BR/><BR/>Does a nice solution exists for non-bounded types? The only possible solution I thought of so far is introducing a type that's isomorphic to Maybe.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232308740000#c2449059956426574359' title='comment permalink'>
Sunday, 18 January, 2009
</a>
<span class='item-control blog-admin pid-248776452'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=2449059956426574359' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c9044161385503747631'>
<a name='c9044161385503747631'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/08096190433222340957" rel="nofollow" onclick="" class="avatar-hovercard" id="av-10-08096190433222340957"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="26" alt="" class="delayLoad" style="display: none;" longdesc="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" title="sigfpe">

<noscript><img src="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" width="35" height="26" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/08096190433222340957' rel='nofollow'>sigfpe</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-9044161385503747631'>
<span class='deleted-comment'>This post has been removed by the author.</span>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232321220000#c9044161385503747631' title='comment permalink'>
Sunday, 18 January, 2009
</a>
<span class='item-control blog-admin pid-961546855'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=9044161385503747631' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2669299631291723570'>
<a name='c2669299631291723570'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/08974372500960094990" rel="nofollow" onclick="" class="avatar-hovercard" id="av-11-08974372500960094990"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Shin no Noir">

</a></span></div>
<a href='http://www.blogger.com/profile/08974372500960094990' rel='nofollow'>Shin no Noir</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2669299631291723570'>
<p>
Ah, right... deriving to the rescue. :)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232322000000#c2669299631291723570' title='comment permalink'>
Sunday, 18 January, 2009
</a>
<span class='item-control blog-admin pid-248776452'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=2669299631291723570' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c7827357717152706114'>
<a name='c7827357717152706114'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/08096190433222340957" rel="nofollow" onclick="" class="avatar-hovercard" id="av-12-08096190433222340957"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="26" alt="" class="delayLoad" style="display: none;" longdesc="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" title="sigfpe">

<noscript><img src="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" width="35" height="26" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/08096190433222340957' rel='nofollow'>sigfpe</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7827357717152706114'>
<p>
Here&#39;s a possible solution to the min/max problem:<BR/><BR/>This part ought to be in a library:<BR/><BR/>&gt; data Smallest a = Smallest a | PlusInfinity deriving (Show,Eq,Ord)<BR/>&gt; data Largest a = MinusInfinity | Largest a deriving (Show,Eq,Ord)<BR/><BR/>&gt; instance (Ord a) =&gt; Monoid (Smallest a) where<BR/>&gt;     mempty = PlusInfinity<BR/>&gt;     mappend = min<BR/><BR/>&gt; instance (Ord a) =&gt; Monoid (Largest a) where<BR/>&gt;     mempty = MinusInfinity<BR/>&gt;     mappend = max<BR/><BR/>&gt; ex10 = foldMap (Smallest &amp;&amp;&amp; Largest) tree :: (Smallest Int,Largest Int)<BR/><BR/>And the implementation would then be just:<BR/><BR/>&gt; ex10 = foldMap (Smallest &amp;&amp;&amp; Largest) tree :: (Smallest Int,Largest Int)<BR/><BR/>I got the idea for using &amp;&amp;&amp; from http://hpaste.org/14067<BR/><BR/>This is an updated version. My first attempt was wrong :-(
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232322540000#c7827357717152706114' title='comment permalink'>
Sunday, 18 January, 2009
</a>
<span class='item-control blog-admin pid-961546855'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=7827357717152706114' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5743095652778688385'>
<a name='c5743095652778688385'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/01069099703796397027" rel="nofollow" onclick="" class="avatar-hovercard" id="av-13-01069099703796397027"><img src="http://img1.blogblog.com/img/blank.gif" width="31" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://photos1.blogger.com/blogger/7901/3055/1600/lgm.jpg" title="leithaus">

<noscript><img src="http://photos1.blogger.com/blogger/7901/3055/1600/lgm.jpg" width="31" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/01069099703796397027' rel='nofollow'>leithaus</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5743095652778688385'>
<p>
Dan,<BR/><BR/>And when we have a &#39;notion of composition&#39; (monoid ~ monad) plus a &#39;notion of collection&#39; (essentially presented as a monad) we can autogenerate a &#39;relationally complete&#39; logic. <BR/><BR/>m,n ::= e | g1 | ... | gN | m*n<BR/><BR/>That freely generates our monoid terms (for a monoid with N generators), but needs to be whacked down by m*e = m = e*m, m1*(m2*m3) = (m1*m2)*m3 (plus whatever other identities a specific monoid supports). If our &#39;notion of collection is set&#39;, the we get the following logic &#39;for free&#39;.<BR/><BR/>k,l ::= true | ~k | k&amp;l <BR/>        e | g1 | ... | gN | k*l<BR/>        for x in k.l | rec x.k | x<BR/><BR/>The boolean connectives at the top come from the fact that we&#39;re using set. The &#39;structural&#39; connectives in the middle come from the monoid structure. The other structure comes from calculations of fixpoints.<BR/><BR/>See <A HREF="http://biosimilarity.blogspot.com/2007/02/algebraic-databases.html" REL="nofollow">algebraic databases</A> for more discussion. Or, <A HREF="http://biosimilarity.blogspot.com/2009/01/3-applications-of-indexed-composition.html" REL="nofollow">indexed compositions</A> for applications.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232388420000#c5743095652778688385' title='comment permalink'>
Monday, 19 January, 2009
</a>
<span class='item-control blog-admin pid-1446523942'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=5743095652778688385' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c3223261268601730617'>
<a name='c3223261268601730617'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="lodi">

</span></div>
lodi
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-3223261268601730617'>
<p>
This was an amazingly straightforward yet enlightening article; the section on the 'Product' monoid was particularly novel for me.  I would love to see you expand on the concepts you mentioned towards the end, grounded with real-world haskell examples (as you did in this post.)  Thanks for writing sigfpe!<BR/><BR/>P.S.  In my opinion you just single-handedly resolved the 'Appendable' debate on haskell-cafe with your tree folding examples.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232555040000#c3223261268601730617' title='comment permalink'>
Wednesday, 21 January, 2009
</a>
<span class='item-control blog-admin pid-178609327'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=3223261268601730617' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7915992082775821096'>
<a name='c7915992082775821096'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7915992082775821096'>
<p>
Multiplying monoids gives a product monoid. This is associative and has a neutral element. So monoids form a monoid :) (up to isomorphism)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232630700000#c7915992082775821096' title='comment permalink'>
Thursday, 22 January, 2009
</a>
<span class='item-control blog-admin pid-770868312'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=7915992082775821096' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c7288982103996085899'>
<a name='c7288982103996085899'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/08096190433222340957" rel="nofollow" onclick="" class="avatar-hovercard" id="av-16-08096190433222340957"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="26" alt="" class="delayLoad" style="display: none;" longdesc="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" title="sigfpe">

<noscript><img src="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" width="35" height="26" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/08096190433222340957' rel='nofollow'>sigfpe</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7288982103996085899'>
<p>
Anonymous,<BR/><BR/>Mooids form a <A HREF="http://en.wikipedia.org/wiki/Monoidal_category" REL="nofollow">monoidal category in fact</A>.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232635140000#c7288982103996085899' title='comment permalink'>
Thursday, 22 January, 2009
</a>
<span class='item-control blog-admin pid-961546855'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=7288982103996085899' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c493826300030529475'>
<a name='c493826300030529475'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/01069099703796397027" rel="nofollow" onclick="" class="avatar-hovercard" id="av-17-01069099703796397027"><img src="http://img1.blogblog.com/img/blank.gif" width="31" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://photos1.blogger.com/blogger/7901/3055/1600/lgm.jpg" title="leithaus">

<noscript><img src="http://photos1.blogger.com/blogger/7901/3055/1600/lgm.jpg" width="31" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/01069099703796397027' rel='nofollow'>leithaus</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-493826300030529475'>
<p>
And monads are a monoid object in the category of endofunctors.<BR/><BR/>In the language of the times monoid is a minimalist notion of composition before categorification. Monad is a minimalist notion of composition post categorification.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232657280000#c493826300030529475' title='comment permalink'>
Thursday, 22 January, 2009
</a>
<span class='item-control blog-admin pid-1446523942'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=493826300030529475' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c1544072014320810577'>
<a name='c1544072014320810577'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/10083178578284485368" rel="nofollow" onclick="" class="avatar-hovercard" id="av-18-10083178578284485368"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Andr&eacute; Pang">

</a></span></div>
<a href='http://www.blogger.com/profile/10083178578284485368' rel='nofollow'>André Pang</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-1544072014320810577'>
<p>
Thanks for an excellent article, Dan.  I normally get about halfway through your blog posts before my brain explodes; eliminating all the jargon in your post and explaining all the maths terms helped tremendously.  (For example, I know what associativity is, but I always confuse it with commutativity, and it's great that you cater for the dumb folk like me without having to look up all the terms to clarify the terms :).  It helps a ton with the flow of the article.)<BR/><BR/>Please keep up writing blog posts targeted at the poor folks like me, who have some Haskell skills but don't really know all the maths jargon!
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232813460000#c1544072014320810577' title='comment permalink'>
Saturday, 24 January, 2009
</a>
<span class='item-control blog-admin pid-2077516444'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=1544072014320810577' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5439408264911599075'>
<a name='c5439408264911599075'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/08770230331776974807" rel="nofollow" onclick="" class="avatar-hovercard" id="av-19-08770230331776974807"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="Peter Berry">

</a></span></div>
<a href='http://www.blogger.com/profile/08770230331776974807' rel='nofollow'>Peter Berry</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5439408264911599075'>
<p>
With the comment about "Any" being clearer than "Bool" about the intentions of the code, it seems like it's actually a Good Thing that Haskell requires newtype wrappers to coax different monoids out of the same type.<BR/><BR/>As for Writer and commutativity, I think that to be a monad it has to satisfy the monad "commutativity" law, for which it relies on the monoid's commutativity. Is that right?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1232856900000#c5439408264911599075' title='comment permalink'>
Saturday, 24 January, 2009
</a>
<span class='item-control blog-admin pid-769907900'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=5439408264911599075' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7429058913543989827'>
<a name='c7429058913543989827'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7429058913543989827'>
<p>
Wow, I for one would love to see a book full of material like this ! A book exposing Haskell mathematical underpinnings and techniques to harness this power in day to day programming...<BR/>Do you feel up to it?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1233095640000#c7429058913543989827' title='comment permalink'>
Tuesday, 27 January, 2009
</a>
<span class='item-control blog-admin pid-1916546604'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=7429058913543989827' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c6538228672369862344'>
<a name='c6538228672369862344'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/08096190433222340957" rel="nofollow" onclick="" class="avatar-hovercard" id="av-21-08096190433222340957"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="26" alt="" class="delayLoad" style="display: none;" longdesc="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" title="sigfpe">

<noscript><img src="http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg" width="35" height="26" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/08096190433222340957' rel='nofollow'>sigfpe</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6538228672369862344'>
<p>
Peter,<BR/><BR/>Any monoid makes Writer a monad. Any commutative monoid makes Writer a commutative monad.<BR/><BR/>Anynoymous,<BR/><BR/>I'd love to collect together a bunch of algebraic programming stuff in a book. But I also know it's a vast amount of work to get a book written. I'd need several months off work.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1233096720000#c6538228672369862344' title='comment permalink'>
Tuesday, 27 January, 2009
</a>
<span class='item-control blog-admin pid-961546855'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=6538228672369862344' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7641229007820063972'>
<a name='c7641229007820063972'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7641229007820063972'>
<p>
Well, you can certainly rescue some of your blog posts to that end. This one on monoid is perfect really, theory meets practice !<BR/><BR/>Maybe you could team up with <A HREF="http://scienceblogs.com/goodmath/goodmath/programming/haskell/" REL="nofollow">Good Math</A> ? <BR/><BR/>The two of you have already produced quite a bit along those lines.<BR/><BR/>The book would obviously need a concerted approach with respect to the topics presented... <BR/><BR/>I am pretty sure, a lot of newcomers to Haskell would love to read more about the Mathematics lurking behind its powerful features.<BR/><BR/>Maybe it could be self-published, something like Lulu ?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1233855900000#c7641229007820063972' title='comment permalink'>
Thursday, 05 February, 2009
</a>
<span class='item-control blog-admin pid-297447879'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=7641229007820063972' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c4852969683482904577'>
<a name='c4852969683482904577'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://masak.org/carl" rel="nofollow" onclick=""><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Carl Masak">

</a></span></div>
<a href='http://masak.org/carl' rel='nofollow'>Carl Masak</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-4852969683482904577'>
<p>
Thank you for an informative and approachable post. The things about Writer was especially helpful for a problem in Haskell that I've been mulling over.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1235208240000#c4852969683482904577' title='comment permalink'>
Saturday, 21 February, 2009
</a>
<span class='item-control blog-admin pid-1869488331'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=4852969683482904577' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8989014702615512362'>
<a name='c8989014702615512362'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.blogger.com/profile/08425435755112948327" rel="nofollow" onclick="" class="avatar-hovercard" id="av-24-08425435755112948327"><img src="http://img2.blogblog.com/img/b16-rounded.gif" width="16" height="16" alt="" title="johnbender">

</a></span></div>
<a href='http://www.blogger.com/profile/08425435755112948327' rel='nofollow'>johnbender</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8989014702615512362'>
<p>
As much as everyone else has said this: great article. I'm relatively new to Haskell and this was completely readable.<BR/><BR/>Thank you for sharing!
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1239506340000#c8989014702615512362' title='comment permalink'>
Saturday, 11 April, 2009
</a>
<span class='item-control blog-admin pid-1796977536'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=8989014702615512362' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c6808636339223707350'>
<a name='c6808636339223707350'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Anonymous">

</span></div>
Anonymous
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-6808636339223707350'>
<p>
Great post. One minor note:<br /><br />(Monoid a) =&gt; a -&gt; b<br />should be<br />(Monoid a) =&gt; a -&gt; a<br /><br />otherwise there is no way the monoid could be changed and a the eval unsafe cast avoided.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1239742980000#c6808636339223707350' title='comment permalink'>
Tuesday, 14 April, 2009
</a>
<span class='item-control blog-admin pid-857495815'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=6808636339223707350' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c2810611954959669726'>
<a name='c2810611954959669726'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/14856370078919907461" rel="nofollow" onclick="" class="avatar-hovercard" id="av-26-14856370078919907461"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://2.bp.blogspot.com/_CmcKoj9unS4/Sduo4JI8sEI/AAAAAAAAAhU/lL1Mv-RqEXw/S45/upic.jpg" title="Qrilka">

<noscript><img src="http://2.bp.blogspot.com/_CmcKoj9unS4/Sduo4JI8sEI/AAAAAAAAAhU/lL1Mv-RqEXw/S45/upic.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/14856370078919907461' rel='nofollow'>Qrilka</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-2810611954959669726'>
<p>
Dan, I want to translate your post to russian and publish (linking to the original text). Do I need make any additional steps from copyright point of view?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1241334720000#c2810611954959669726' title='comment permalink'>
Sunday, 03 May, 2009
</a>
<span class='item-control blog-admin pid-1973907236'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=2810611954959669726' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author blog-author' id='c7834161984838594655'>
<a name='c7834161984838594655'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/08096190433222340957" rel="nofollow" onclick="" class="avatar-hovercard" id="av-27-08096190433222340957"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://3.bp.blogspot.com/_UdKHLrHa05M/SbBFDnCi6yI/AAAAAAAAASk/a-la4gQB_LU/S45/ImageDSC01397_1.jpg" title="sigfpe">

<noscript><img src="http://3.bp.blogspot.com/_UdKHLrHa05M/SbBFDnCi6yI/AAAAAAAAASk/a-la4gQB_LU/S45/ImageDSC01397_1.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/08096190433222340957' rel='nofollow'>sigfpe</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7834161984838594655'>
<p>
Qrilka,<br /><br />Feel free to make a translation. Link back here and maybe put a link here pointing to the translation.
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1241360520000#c7834161984838594655' title='comment permalink'>
Sunday, 03 May, 2009
</a>
<span class='item-control blog-admin pid-961546855'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=7834161984838594655' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7365934895068785249'>
<a name='c7365934895068785249'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/14856370078919907461" rel="nofollow" onclick="" class="avatar-hovercard" id="av-28-14856370078919907461"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://2.bp.blogspot.com/_CmcKoj9unS4/Sduo4JI8sEI/AAAAAAAAAhU/lL1Mv-RqEXw/S45/upic.jpg" title="Qrilka">

<noscript><img src="http://2.bp.blogspot.com/_CmcKoj9unS4/Sduo4JI8sEI/AAAAAAAAAhU/lL1Mv-RqEXw/S45/upic.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/14856370078919907461' rel='nofollow'>Qrilka</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7365934895068785249'>
<p>
BTW "to combine [] with any list leaves gives you back" maybe "leaves" is unnecessary here?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1241548020000#c7365934895068785249' title='comment permalink'>
Tuesday, 05 May, 2009
</a>
<span class='item-control blog-admin pid-1973907236'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=7365934895068785249' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c8280130450403069869'>
<a name='c8280130450403069869'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/14856370078919907461" rel="nofollow" onclick="" class="avatar-hovercard" id="av-29-14856370078919907461"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://2.bp.blogspot.com/_CmcKoj9unS4/Sduo4JI8sEI/AAAAAAAAAhU/lL1Mv-RqEXw/S45/upic.jpg" title="Qrilka">

<noscript><img src="http://2.bp.blogspot.com/_CmcKoj9unS4/Sduo4JI8sEI/AAAAAAAAAhU/lL1Mv-RqEXw/S45/upic.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/14856370078919907461' rel='nofollow'>Qrilka</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-8280130450403069869'>
<p>
And also why are you talking about signatures and adding/pulling out elements? The lists are immutable here I think. Am I wrong?
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1241869080000#c8280130450403069869' title='comment permalink'>
Saturday, 09 May, 2009
</a>
<span class='item-control blog-admin pid-1973907236'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=8280130450403069869' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c7217888667810962471'>
<a name='c7217888667810962471'></a>
<div class="avatar-image-container vcard"><span dir="ltr"><a href="http://www.blogger.com/profile/14856370078919907461" rel="nofollow" onclick="" class="avatar-hovercard" id="av-30-14856370078919907461"><img src="http://img1.blogblog.com/img/blank.gif" width="35" height="35" alt="" class="delayLoad" style="display: none;" longdesc="http://2.bp.blogspot.com/_CmcKoj9unS4/Sduo4JI8sEI/AAAAAAAAAhU/lL1Mv-RqEXw/S45/upic.jpg" title="Qrilka">

<noscript><img src="http://2.bp.blogspot.com/_CmcKoj9unS4/Sduo4JI8sEI/AAAAAAAAAhU/lL1Mv-RqEXw/S45/upic.jpg" width="35" height="35" class="photo" alt=""></noscript></a></span></div>
<a href='http://www.blogger.com/profile/14856370078919907461' rel='nofollow'>Qrilka</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-7217888667810962471'>
<p>
So we finished 1st ussue of our journal and your article is in it - http://fprog.ru/2009/issue1/<br />(Not sure if you can read Russian though)
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1248158794994#c7217888667810962471' title='comment permalink'>
Monday, 20 July, 2009
</a>
<span class='item-control blog-admin pid-1973907236'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=7217888667810962471' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
<dt class='comment-author ' id='c5721273125595698107'>
<a name='c5721273125595698107'></a>
<div class="avatar-image-container avatar-stock"><span dir="ltr"><a href="http://www.loup-vaillant.fr" rel="nofollow" onclick=""><img src="http://img1.blogblog.com/img/blank.gif" width="16" height="16" alt="" title="Loup Vaillant">

</a></span></div>
<a href='http://www.loup-vaillant.fr' rel='nofollow'>Loup Vaillant</a>
said...
</dt>
<dd class='comment-body' id='Blog1_cmt-5721273125595698107'>
<p>
@ Qrilka<br /><br />&gt; And also why are you talking about signatures and adding/pulling out elements? The lists are immutable here I think. Am I wrong?<br /><br />That was just an abuse of language. But saying &quot;producing a result which is the addition/removal of elements of the original list&quot; would sound a bit cumbersome.<br /><br />Note that the exact same abuse of language is made when we are talking about mutable variables: when you &quot;change&quot; a variable, you actually replace the value it contains by another value. The variable itself, as a container, didn&#39;t really change.  And the value that was previously in it certainly didn&#39;t changed at all. You just lost one reference to it.<br /><br />Anyway, <a href="http://www.loup-vaillant.fr/articles/assignment" rel="nofollow" rel="nofollow">assingment is evil</a>, so&#8230;
</p>
</dd>
<dd class='comment-footer'>
<span class='comment-timestamp'>
<a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html?showComment=1259060241609#c5721273125595698107' title='comment permalink'>
Tuesday, 24 November, 2009
</a>
<span class='item-control blog-admin pid-90476176'>
<a class='comment-delete' href='http://www.blogger.com/delete-comment.g?blogID=11295132&postID=5721273125595698107' title='Delete Comment'>
<img src='//www.blogger.com/img/icon_delete13.gif'/>
</a>
</span>
</span>
</dd>
</dl>
</div>
<p class='comment-footer'>
<a href='https://www.blogger.com/comment.g?blogID=11295132&postID=7531218329312814569' onclick=''>Post a Comment</a>
</p>
<div id='backlinks-container'>
<div id='Blog1_backlinks-container'>
<a name='links'></a><h4>
</h4>
<p class='comment-footer'>
<a class='comment-link' href='' id='Blog1_backlinks-create-link' target='_blank'>
</a>
</p>
</div>
</div>
</div>
</div>
<div id="latency-7531218329312814569"></div><script type="text/javascript">if (window['tickAboveFold']) {window['tickAboveFold'](document.getElementById("latency-7531218329312814569")); } </script>

        </div></div>
      
<!-- google_ad_section_end -->
</div>
<div class='blog-pager' id='blog-pager'>
<span id='blog-pager-newer-link'>
<a class='blog-pager-newer-link' href='http://blog.sigfpe.com/2009/01/fast-incremental-regular-expression.html' id='Blog1_blog-pager-newer-link' title='Newer Post'>Newer Post</a>
</span>
<span id='blog-pager-older-link'>
<a class='blog-pager-older-link' href='http://blog.sigfpe.com/2009/01/rewriting-monadic-expressions-with.html' id='Blog1_blog-pager-older-link' title='Older Post'>Older Post</a>
</span>
<a class='home-link' href='http://blog.sigfpe.com/'>Home</a>
</div>
<div class='clear'></div>
<div class='post-feeds'>
<div class='feed-links'>
Subscribe to:
<a class='feed-link' href='http://blog.sigfpe.com/feeds/7531218329312814569/comments/default' target='_blank' type='application/atom+xml'>Post Comments (Atom)</a>
</div>
</div>
</div><div class='widget BlogArchive' id='BlogArchive1'>
<h2>Blog Archive</h2>
<div class='widget-content'>
<div id='ArchiveList'>
<div id='BlogArchive1_ArchiveList'>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/search?updated-min=2010-01-01T00%3A00%3A00-08%3A00&updated-max=2011-01-01T00%3A00%3A00-08%3A00&max-results=20'>2010</a>
<span class='post-count' dir='ltr'>(20)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/12/generalising-godels-theorem-with_24.html'>Generalising Gödel&#39;s Theorem with Multiple Worlds....</a></li>
<li><a href='http://blog.sigfpe.com/2010/12/generalising-godels-theorem-with.html'>Generalising Gödel&#39;s Theorem with Multiple Worlds....</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/11/beating-odds-with-entangled-qubits.html'>Beating the odds with entangled qubits</a></li>
<li><a href='http://blog.sigfpe.com/2010/11/statistical-fingertrees.html'>Statistical Fingertrees</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/09/on-removing-singularities-from-rational.html'>On Removing Singularities from Rational Functions</a></li>
<li><a href='http://blog.sigfpe.com/2010/09/automatic-evenodd-splitting.html'>Automatic even/odd splitting</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/08/constraining-types-with-regular.html'>Constraining Types with Regular Expressions</a></li>
<li><a href='http://blog.sigfpe.com/2010/08/divided-differences-and-tomography-of.html'>Divided Differences and the Tomography of Types</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/07/automatic-divided-differences.html'>Automatic Divided Differences</a></li>
<li><a href='http://blog.sigfpe.com/2010/07/death-to-hydrae-or-denotational.html'>Death to Hydrae (or the operational semantics of o...</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/05/constructing-intermediate-values.html'>Constructing Intermediate Values</a></li>
<li><a href='http://blog.sigfpe.com/2010/05/optimising-pointer-subtraction-with-2.html'>Optimising pointer subtraction with 2-adic integer...</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/04/on-representing-some-real-numbers.html'>On representing some real numbers exactly</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/03/partial-ordering-of-some-category.html'>A Partial Ordering of some Category Theory applied...</a></li>
<li><a href='http://blog.sigfpe.com/2010/03/products-limits-and-parametric.html'>Products, Limits and Parametric Polymorphism</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/02/decategorification-of-naturals.html'>The Categorification of the Naturals</a></li>
<li><a href='http://blog.sigfpe.com/2010/02/tagging-monad-transformer-layers.html'>Tagging Monad Transformer Layers</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2010_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(3)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2010/01/target-enumeration-with-euler.html'>Target Enumeration with the Euler Characteristic. ...</a></li>
<li><a href='http://blog.sigfpe.com/2010/01/counting-targets-using-euler.html'>Counting Targets using the Euler Characteristic, P...</a></li>
<li><a href='http://blog.sigfpe.com/2010/01/monads-are-trees-with-grafting.html'>Monads are Trees with Grafting</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/search?updated-min=2009-01-01T00%3A00%3A00-08%3A00&updated-max=2010-01-01T00%3A00%3A00-08%3A00&max-results=21'>2009</a>
<span class='post-count' dir='ltr'>(21)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/12/where-do-monads-come-from.html'>Where do monads come from?</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/11/programming-with-impossible-functions.html'>Programming with impossible functions, or how to g...</a></li>
<li><a href='http://blog.sigfpe.com/2009/11/memoizing-polymorphic-functions-with.html'>Memoizing Polymorphic Functions with High School A...</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(3)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/10/buffons-needle-easy-way.html'>Buffon&#39;s Needle, the Easy Way</a></li>
<li><a href='http://blog.sigfpe.com/2009/10/what-category-do-haskell-types-and.html'>&quot;What Category do Haskell Types and Functions Live...</a></li>
<li><a href='http://blog.sigfpe.com/2009/10/vectors-invariance-and-math-apis.html'>Vectors, Invariance, and Math APIs</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/09/test-ignore_29.html'>test, ignore</a></li>
<li><a href='http://blog.sigfpe.com/2009/09/finite-differences-of-types.html'>Finite Differences of Types</a></li>
<li><a href='http://blog.sigfpe.com/2009/09/language-nomonomorphismrestrictiongener.html'>More Parsing With Best First Search</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/07/monad-for-combinatorial-search-with.html'>A Monad for Combinatorial Search with Heuristics</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/06/automata-and-a-d-e-classification.html'>Automata and the A-D-E classification.</a></li>
<li><a href='http://blog.sigfpe.com/2009/06/hashing-molecules.html'>Hashing Molecules</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(2)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/05/trace-diagrams-with-monads.html'>Trace Diagrams with Monads</a></li>
<li><a href='http://blog.sigfpe.com/2009/05/three-projections-of-doctor-futamura.html'>The Three Projections of Doctor Futamura</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/04/faster-than-speeding-photon.html'>Faster than a speeding photon</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/03/dinatural-transformations-and-coends.html'>Dinatural Transformations and Coends</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/02/beyond-monads.html'>Beyond Monads</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate expanded'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy toggle-open'>&#9660;&#160;</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2009_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(4)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2009/01/beyond-regular-expressions-more.html'>Beyond Regular Expressions: More Incremental Strin...</a></li>
<li><a href='http://blog.sigfpe.com/2009/01/fast-incremental-regular-expression.html'>Fast incremental regular expression matching with ...</a></li>
<li><a href='http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html'>Haskell Monoids and their Uses</a></li>
<li><a href='http://blog.sigfpe.com/2009/01/rewriting-monadic-expressions-with.html'>Rewriting Monadic Expressions with Template Haskel...</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/search?updated-min=2008-01-01T00%3A00%3A00-08%3A00&updated-max=2009-01-01T00%3A00%3A00-08%3A00&max-results=35'>2008</a>
<span class='post-count' dir='ltr'>(35)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(1)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2008/12/mother-of-all-monads.html'>The Mother of all Monads</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(3)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2008/11/approach-to-algorithm-parallelisation.html'>An Approach to Algorithm Parallelisation</a></li>
<li><a href='http://blog.sigfpe.com/2008/11/some-thoughts-on-reasoning-and-monads.html'>Some thoughts on reasoning and monads</a></li>
<li><a href='http://blog.sigfpe.com/2008/11/from-monoids-to-monads.html'>From Monoids to Monads</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(3)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2008/10/operads-and-their-monads.html'>Operads and their Monads</a></li>
<li><a href='http://blog.sigfpe.com/2008/10/whats-use-of-transfinite-ordinal.html'>What&#39;s the use of a transfinite ordinal?</a></li>
<li><a href='http://blog.sigfpe.com/2008/10/untangling-with-continued-fractions.html'>Untangling with Continued Fractions: part 5</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
<ul class='posts'>
<li><a href='http://blog.sigfpe.com/2008/09/on-writing-python-one-liners.html'>On writing Python one-liners.</a></li>
<li><a href='http://blog.sigfpe.com/2008/09/untangling-with-continued-fractions.html'>Untangling with Continued Fractions: Part 4</a></li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2008_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/search?updated-min=2007-01-01T00%3A00%3A00-08%3A00&updated-max=2008-01-01T00%3A00%3A00-08%3A00&max-results=37'>2007</a>
<span class='post-count' dir='ltr'>(37)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(5)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(2)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(1)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2007_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/search?updated-min=2006-01-01T00%3A00%3A00-08%3A00&updated-max=2007-01-01T00%3A00%3A00-08%3A00&max-results=50'>2006</a>
<span class='post-count' dir='ltr'>(92)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_04_01_archive.html'>April</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_03_01_archive.html'>March</a>
<span class='post-count' dir='ltr'>(20)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_02_01_archive.html'>February</a>
<span class='post-count' dir='ltr'>(9)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2006_01_01_archive.html'>January</a>
<span class='post-count' dir='ltr'>(8)</span>
</li>
</ul>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/search?updated-min=2005-01-01T00%3A00%3A00-08%3A00&updated-max=2006-01-01T00%3A00%3A00-08%3A00&max-results=50'>2005</a>
<span class='post-count' dir='ltr'>(53)</span>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2005_12_01_archive.html'>December</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2005_11_01_archive.html'>November</a>
<span class='post-count' dir='ltr'>(3)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2005_10_01_archive.html'>October</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2005_09_01_archive.html'>September</a>
<span class='post-count' dir='ltr'>(7)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2005_08_01_archive.html'>August</a>
<span class='post-count' dir='ltr'>(11)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2005_07_01_archive.html'>July</a>
<span class='post-count' dir='ltr'>(15)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2005_06_01_archive.html'>June</a>
<span class='post-count' dir='ltr'>(4)</span>
</li>
</ul>
<ul class='hierarchy'>
<li class='archivedate collapsed'>
<a class='toggle' href='javascript:void(0)'>
<span class='zippy'>

          &#9658;&#160;
        
</span>
</a>
<a class='post-count-link' href='http://blog.sigfpe.com/2005_05_01_archive.html'>May</a>
<span class='post-count' dir='ltr'>(6)</span>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=11295132&widgetType=BlogArchive&widgetId=BlogArchive1&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("BlogArchive1"));' target='configBlogArchive1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget LinkList' id='LinkList1'>
<h2>Some Links</h2>
<div class='widget-content'>
<ul>
<li><a href='http://comonad.com/reader/'>The Comonad.Reader</a></li>
<li><a href='http://www.rubrication.net/'>Rubrication</a></li>
<li><a href='http://borcherds.wordpress.com/'>Richard Borcherds: Mathematics and physics</a></li>
<li><a href='http://golem.ph.utexas.edu/category/'>The n-Category Cafe</a></li>
<li><a href='http://www.arsmathematica.net/'>Ars Mathematica</a></li>
</ul>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=11295132&widgetType=LinkList&widgetId=LinkList1&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("LinkList1"));' target='configLinkList1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div><div class='widget Profile' id='Profile1'>
<h2>About Me</h2>
<div class='widget-content'>
<a href='http://www.blogger.com/profile/08096190433222340957'><img alt='My Photo' class='profile-img' height='60' src='http://homepage.mac.com/sigfpe/.Pictures/Photo%20Album%20Pictures/2002-12-07%2014.53.40%20-0800/ImageDSC01397_1.jpg' width='80'/></a>
<dl class='profile-datablock'>
<dt class='profile-data'>sigfpe</dt>
</dl>
<a class='profile-link' href='http://www.blogger.com/profile/08096190433222340957'>View my complete profile</a>
<div class='clear'></div>
<span class='widget-item-control'>
<span class='item-control blog-admin'>
<a class='quickedit' href='http://www.blogger.com/rearrange?blogID=11295132&widgetType=Profile&widgetId=Profile1&action=editWidget' onclick='return _WidgetManager._PopupConfig(document.getElementById("Profile1"));' target='configProfile1' title='Edit'>
<img alt='' height='18' src='http://img1.blogblog.com/img/icon18_wrench_allbkg.png' width='18'/>
</a>
</span>
</span>
<div class='clear'></div>
</div>
</div></div>
</div>
<script type='text/javascript'>
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type='text/javascript'>
var pageTracker = _gat._getTracker("UA-325930-1");
pageTracker._trackPageview();
</script>
<script src='http://tex.yourequations.com/' type='text/javascript'></script>
<script type="text/javascript">
if (window.jstiming) window.jstiming.load.tick('widgetJsBefore');
</script><script type="text/javascript" src="http://www.blogger.com/static/v1/widgets/512629240-widgets.js"></script>
<script type='text/javascript'>
if (typeof(BLOG_attachCsiOnload) != 'undefined' && BLOG_attachCsiOnload != null) { window['blogger_templates_experiment_id'] = "templatesV1";window['blogger_blog_id'] = '11295132';BLOG_attachCsiOnload('item_'); }_WidgetManager._Init('http://www.blogger.com/rearrange?blogID=11295132','http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html','11295132');
_WidgetManager._SetPageActionUrl('http://www.blogger.com/display?blogID=11295132','XiSVzW4bKQvsgu6AsFZtTvjiRvA:1293265507858','AOuZoY4HP4d07-8qpbbFTw4Fo-lGzp6FnA:1293265507858');
_WidgetManager._SetDataContext([{'name': 'blog', 'data': {'title': 'A Neighborhood of Infinity', 'pageType': 'item', 'url': 'http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html', 'canonicalUrl': 'http://blog.sigfpe.com/2009/01/haskell-monoids-and-their-uses.html', 'homepageUrl': 'http://blog.sigfpe.com/', 'enabledCommentProfileImages': true, 'searchLabel': '', 'searchQuery': '', 'pageName': 'Haskell Monoids and their Uses', 'pageTitle': 'A Neighborhood of Infinity: Haskell Monoids and their Uses', 'encoding': 'UTF-8', 'locale': 'en-US', 'isPrivate': false, 'isMobile': false, 'mobileClass': '', 'languageDirection': 'ltr', 'feedLinks': '\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42A Neighborhood of Infinity - Atom\42 href\75\42http://blog.sigfpe.com/feeds/posts/default\42 /\76\n\74link rel\75\42alternate\42 type\75\42application/rss+xml\42 title\75\42A Neighborhood of Infinity - RSS\42 href\75\42http://blog.sigfpe.com/feeds/posts/default?alt\75rss\42 /\76\n\74link rel\75\42service.post\42 type\75\42application/atom+xml\42 title\75\42A Neighborhood of Infinity - Atom\42 href\75\42http://www.blogger.com/feeds/11295132/posts/default\42 /\76\n\74link rel\75\42EditURI\42 type\75\42application/rsd+xml\42 title\75\42RSD\42 href\75\42http://www.blogger.com/rsd.g?blogID\07511295132\42 /\76\n\74link rel\75\42alternate\42 type\75\42application/atom+xml\42 title\75\42A Neighborhood of Infinity - Atom\42 href\75\42http://blog.sigfpe.com/feeds/7531218329312814569/comments/default\42 /\76\n', 'meTag': '', 'openIdOpTag': '', 'imageSrcTag': '', 'latencyHeadScript': '\74script type\75\42text/javascript\42\76(function() { var a\75window;function c(b){this.t\75{};this.tick\75function(d,i,e){e\75e?e:(new Date).getTime();this.t[d]\75[e,i]};this.tick(\42start\42,null,b)}var f\75new c;a.jstiming\75{Timer:c,load:f};try{var g\75null;if(a.chrome\46\46a.chrome.csi)g\75Math.floor(a.chrome.csi().pageT);if(g\75\75null)if(a.gtbExternal)g\75a.gtbExternal.pageT();if(g\75\75null)if(a.external)g\75a.external.pageT;if(g)a.jstiming.pt\75g}catch(h){};a.tickAboveFold\75function(b){b\75b;var d\0750;if(b.offsetParent){do d+\75b.offsetTop;while(b\75b.offsetParent)}b\75d;b\74\075750\46\46a.jstiming.load.tick(\42aft\42)};var j\75false;function k(){if(!j){j\75true;a.jstiming.load.tick(\42firstScrollTime\42)}}a.addEventListener?a.addEventListener(\42scroll\42,k,false):a.attachEvent(\42onscroll\42,k);\n })();\74/script\076', 'mobileHeadScript': ''}}]);
_WidgetManager._RegisterWidget('_NavbarView', new _WidgetInfo('Navbar1', 'navbar'));
_WidgetManager._RegisterWidget('_HeaderView', new _WidgetInfo('Header1', 'main'));
_WidgetManager._RegisterWidget('_BlogView', new _WidgetInfo('Blog1', 'main', null, document.getElementById('Blog1'), {'cmtInteractionsEnabled': false, 'commentInteractionIframeUrl': 'http://www.blogger.com/comment-interaction-iframe.g?blogId\07511295132', 'showBacklinks': true, 'postId': '7531218329312814569', 'mobile': false}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_BlogArchiveView', new _WidgetInfo('BlogArchive1', 'main', null, document.getElementById('BlogArchive1'), {'languageDirection': 'ltr'}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_LinkListView', new _WidgetInfo('LinkList1', 'main', null, document.getElementById('LinkList1'), {}, 'displayModeFull'));
_WidgetManager._RegisterWidget('_ProfileView', new _WidgetInfo('Profile1', 'main', null, document.getElementById('Profile1'), {}, 'displayModeFull'));
</script>
</body>
</html>