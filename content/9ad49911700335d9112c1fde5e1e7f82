<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd">
<html xmlns:og="http://opengraphprotocol.org/schema/" xmlns:hx="http://purl.org/NET/hinclude" xmlns:fb="http://developers.facebook.com/schema/" xml:lang="en" xmlns:dc="http://purl.org/dc/terms/" xmlns:media="http://search.yahoo.com/searchmonkey/media/" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" /><link href="http://public.slidesharecdn.com/v3/styles/combined.css?1293198789" rel="stylesheet" type="text/css" media="all" />
<!--[if lte IE 6]><link rel="stylesheet" type="text/css" media="screen" href="http://public.slidesharecdn.com/v3/styles/slideview_ie6.css?1293198789" /><![endif]-->
<!--[if IE 7]><link rel="stylesheet" type="text/css" media="screen" href="http://public.slidesharecdn.com/v3/styles/slideview_ie7.css?1293198789" /><![endif]-->
<script id="page-json" type="text/javascript"><!--
var slideshare_object = {"version_no":"1245700182","doc":"sqlantipatternsstrikeback-090421005946-phpapp01","gam_cat_name":"technology","contests":[],"stats":{"url":"http://www.slideshare.net/~/slideshow/stats/1319559.json"},"sharing_more":{"url":"http://www.slideshare.net/~/slideshow/sharing_more/1319559.html"},"user":{"loggedin":null,"can_remove_contact":null,"pro":null,"organization":null,"user_group":null,"member_type":"non-member","commenter":false,"occupation":null,"photo_url":"http://public.slidesharecdn.com/images/userImage_SMALL.gif","owner":false,"name":null,"su":null,"email":"guest","id":null,"login":"guest"},"default_tab":".svMoreAuthor","dev":false,"downloads":{"allow":true,"sp_isdwnl":true},"_auth_token_name":"authenticity_token","kissmetrics_api_key":"f38a86f22083188a0a69d64d1487a4078b65db16","totalSlides":250,"embeds_count":23,"comments":{"spam_url":"http://www.slideshare.net/comment/mark_spam","unsubscribe_url":"http://www.slideshare.net/comment/unsubscribe/1319559","captcha_url":"http://s3.amazonaws.com/ss-captchas/","total_count":6,"ajaxurl":"http://www.slideshare.net/~/slideshow/comments/1319559.json","create_url":"http://www.slideshare.net/comment/create","destroy_url":"http://www.slideshare.net/comment/destroy","template":"\u003Cli class=\"vcard\"\u003E\n                  \u003Ca href=\"#\" class=\"userimage-link h-author-photo url\" title=\"Full Name\" rel=\"nofollow\"\u003E\n                    \u003Cimg class=\"nickname\" src=\"/images/userImage_SMALL.gif\" alt=\"username\" /\u003E\n                    \u003Cspan class=\"h-username fn\"\u003Eusername\u003C/span\u003E\n                  \u003C/a\u003E \n                  \u003Ca href=\"#\" class=\"proBadge_link_slideview h-pb-sv h-pb-sv-c\"\u003E\u003Cimg class=\"h-pb-sv-img proBadge_comment\" src=\"http://public.slidesharecdn.com/images/pro_account_mini_badge.png\" height=\"8\" alt=\"Pro Account\" width=\"27\" /\u003E\u003C/a\u003E\u003Cspan class=\"h-occupation\"\u003E, occupation, \u003C/span\u003E\u003Cspan class=\"org h-organization\"\u003Eorganization\u003C/span\u003E\n                  \u003Cspan class=\"quiet when-comment-value\"\u003E3 months ago\u003C/span\u003E\n                  \u003Cspan class=\"floatRight h-comment-actions hide\"\u003E\n                    \u003Ca href=\"#\" class=\"ilink action-edit\" rel=\"nofollow\"\u003Eedit\u003C/a\u003E\n                    \u003Ca href=\"#\" class=\"ilink action-delete\" rel=\"nofollow\"\u003Edelete\u003C/a\u003E\n                    \u003Ca href=\"#\" class=\"ilink action-spam loggedin-only\" rel=\"nofollow\"\u003Espam\u003C/a\u003E\n                  \u003C/span\u003E\n                  \u003Cblockquote class=\"comment-item-value\"\u003E\n                    \u003Cp\u003EThis is a comment!\u003C/p\u003E\n                  \u003C/blockquote\u003E\n                  \n                \u003C/li\u003E","update_url":"http://www.slideshare.net/comment/update"},"activities":{"community":{"count":0,"total":0,"url":"http://www.slideshare.net/~/slideshow/community_list/1319559.json"},"favorites":{"count":10,"total":82,"url":"http://www.slideshare.net/~/slideshow/favorites_list/1319559.json"}},"key":false,"_auth_token":"PAbDQFXSiUs2kx1YAEo8I1gMfn+VIsw1CDS2q9ttUkI=","voting_widget_host":"/","contacts":{"create_url":"http://www.slideshare.net/contact/create?contactee=CONTACTEE\u0026frm_source=slidepage","delete_url":"http://www.slideshare.net/contact/delete?contactee=19147030\u0026frm_source=slidepage"},"stripped_title":"sql-antipatterns-strike-back","startSlide":1,"useHttp":1,"groups":{"post_url":"http://www.slideshare.net/community/send_to_community"},"preview":"no","slideshow":{"type":"presentation","user_name":"Karwin Software Solutions LLC","show_related_content":"1","is_audio":false,"fullscreen_bg_color":"White","title":"Sql Antipatterns Strike Back","form_is_blocking":false,"user_login":"billkarwin","form_after_slide_number":null,"id":"1319559"},"topnav":{"get_url":"/top_nav","update_url":"http://www.slideshare.net/language/update_language"},"zeitgeist":[],"facebook_app_id":2490221586,"category":{"featured":2},"presentationId":1319559,"pvt":0,"player":{"height":481,"color":"#FFFFFF","version":9,"url":"http://static.slidesharecdn.com/swf/ssplayer2.swf","width":598},"flagging":{"flagged_value":null,"update_url":"http://www.slideshare.net/main/flag?slideshow_id=1319559"},"meeting_start_status":-1,"inContest":0,"favorites":{"tag_href":"/tag/TAGNAME","create_url":"http://www.slideshare.net/favorite/create","delete_url":"http://www.slideshare.net/favorite/delete","update_url":"http://www.slideshare.net/favorite/update/FAVID"}};
//--></script><script src="http://public.slidesharecdn.com/v3/scripts/combined.js?1293198789"></script>
<script id="page-load" type="text/javascript">
// <![CDATA[
var timer = (new Date()).getTime();
// ]]>
</script>
<script id="ga-init" type="text/javascript">
// <![CDATA[
window._gaq = [];
// ]]>
</script>
<script id="rails_environment" type="text/javascript">
// <![CDATA[
slideshare_object.deploy_environment = 'production';
// ]]>
</script>





































<title>Sql Antipatterns Strike Back</title>
<link href="http://public.slidesharecdn.com/images/favicon.ico" rel="Shortcut Icon" />
<meta name="title" property="media:title" content="Sql Antipatterns Strike Back" />
<meta name="description" property="dc:description" content="Common blunders of SQL database design, queries, and software development.  Presented as a tutorial at the MySQL Confere" />
<meta name="og_title" property="og:title" content="Sql Antipatterns Strike Back" />
<meta name="og_type" property="og:type" content="article" />
<meta name="og_url" property="og:url" content="http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back" />
<meta name="og_image" property="og:image" content="http://cdn.slidesharecdn.com/sqlantipatternsstrikeback-090421005946-phpapp01-thumbnail-2?1245700182" />
<meta name="og_site_name" property="og:site_name" content="SlideShare" />

<meta name="fb_app_id" property="fb:app_id" content="2490221586" />
<link href="http://cdn.slidesharecdn.com/sqlantipatternsstrikeback-090421005946-phpapp01-thumbnail?1245700182" rel="image_src" />
<link href="http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back" rel="canonical" />
<link href="/rss/latest" title="RSS" rel="alternate" type="application/rss+xml" />
<link href="/search/opensearch.xml" title="SlideShare Search" rel="search" type="application/opensearchdescription+xml" />
<link href="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sqlantipatternsstrikeback-090421005946-phpapp01&amp;stripped_title=sql-antipatterns-strike-back" name="media_presentation" rel="media:presentation" />
<link href="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sqlantipatternsstrikeback-090421005946-phpapp01&amp;stripped_title=sql-antipatterns-strike-back&amp;hostedIn=fb_feed" name="video_src" rel="video_src" />
<link href="http://www.slideshare.net/api/oembed/1?format=json&amp;url=http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back" title="Slideshow oEmbed Profile" rel="alternate" type="application/json+oembed" />
<link href="http://www.slideshare.net/api/oembed/1?format=xml&amp;url=http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back" title="Slideshow oEmbed Profile" rel="alternate" type="text/xml+oembed" />
<meta name="media_width" property="media:width" content="425" />
<meta name="media_height" property="media:height" content="355" />
<meta name="video_width" content="425" />
<meta name="video_height" content="355" />
<meta name="video_type" content="application/x-shockwave-flash" />
<meta href="http://cdn.slidesharecdn.com/sqlantipatternsstrikeback-090421005946-phpapp01-thumbnail?1245700182" name="media_thumbnail" rel="media:thumbnail" />
<meta name="dc_creator" property="dc:creator" content="Karwin Software Solutions LLC" />

</head>
<body>
<div id="fb-root"></div>
<script>
window.fbAsyncInit = function() {
FB.init({
appId  : slideshare_object.facebook_app_id,
status : true, // check login status
cookie : true, // enable cookies to allow the server to access the session
xfbml  : true  // parse XFBML
});
};
(function() {
var e = document.createElement('script');
e.src = document.location.protocol + '//connect.facebook.net/en_US/all.js';
e.async = true;
document.getElementById('fb-root').appendChild(e);
}());
</script>
<div class="admanager-section">
<script type="text/javascript" src="http://partner.googleadservices.com/gampad/google_service.js"></script>
<script type="text/javascript">
GS_googleAddAdSenseService("ca-pub-5203428669823392");
GS_googleEnableAllServices();
</script>
<script type="text/javascript">
GA_googleAddAttr("cat", "technology");
GA_googleAddAttr("ztag", "programming");
GA_googleAddAttr("ztag", "languages");
GA_googleAddAttr("ztag", "database");
GA_googleAddAttr("ztag", "sql");
GA_googleAddAttr("ztag", "select");
GA_googleAddAttr("ztag", "group-by");
GA_googleAddAttr("ztag", "data-definition-language");
GA_googleAddAttr("ztag", "query-application-antipatterns-antipatte");
GA_googleAddAttr("contest", "none");
GA_googleAddAttr('misc','presentation');
</script>

<script type="text/javascript">
GA_googleAddSlot("ca-pub-5203428669823392", "slideview_top_728_90");
</script>


<script type="text/javascript">
  GA_googleAddSlot("ca-pub-5203428669823392", "slideview_sponsorship"); 
</script>

<!--<script type="text/javascript">
GA_googleAddSlot("ca-pub-5203428669823392", "slideview_bottom_300_250");
</script>-->
<!--
<script type="text/javascript">
  GA_googleAddSlot("ca-pub-5203428669823392", "slideview_link");
</script>
-->
<script type="text/javascript">
  GA_googleAddSlot("ca-pub-5203428669823392", "slideview_right_1");
</script>
<script type="text/javascript">
  GA_googleAddSlot("ca-pub-5203428669823392", "slideview_bottom2"); 
</script>
<script type='text/javascript'>
GA_googleAddSlot("ca-pub-5203428669823392", "slideview_below_transcript");
</script>
<script type="text/javascript">
  GA_googleAddSlot("ca-pub-5203428669823392", "footer");
</script>

<!--
<script type='text/javascript'>
GA_googleAddSlot("ca-pub-5203428669823392", "pixel_tracker");
</script>
-->
<script type="text/javascript">
  GA_googleAddSlot("ca-pub-5203428669823392", "slideview_mid_468x60");
</script>
<script type="text/javascript">
 GA_googleUseSyncSRARendering();
  GA_googleFetchAds();
</script>


<!--
<script type="text/javascript">  
var google_adnum = 0;
var random_number = Math.random();
if (random_number < 0.55){ 
GA_googleAddAttr("ztag", "Web-1");
 } else { GA_googleAddAttr("ztag", "Go-1"); } 
</script>
-->
</div>
<div class="container">
<div class="clearfix header-09">
<a href="/" class="logo" title="Go to SlideShare's homepage" rel="nofollow">SlideShare. Present yourself.</a>
<ul class="mainNav">
<li class="nav_home"><a href="/" title="SlideShare homepage">Home</a></li>
<li class="nav_business"><a href="/business/premium/plans?cmp_src=main_nav" title="Upgrade to Slideshare Pro Accounts for Premium Features.">Go Pro</a></li>
<li class="nav_channels"><a href="/pro_accounts" title="Channels on SlideShare">Channels</a></li>
<li class="nav_community"><a href="/events" title="Connect and interact with the SlideShare community">Events</a></li>
<li class="nav_upload"><strong><a href="/login?from=upload&from_source=/upload" title="Upload your presentations and documents in PowerPoint, OpenOffice, Keynote or PDF format">Upload</a></strong></li>
</ul>
<form class="headerSearch" method="get" action="/search/slideshow">
<fieldset>
<span class="suggestionContainer">
<input name="q" class="text" id="search_query_top" type="text" value="" autocomplete="off" />
</span>
<input class="ctaStrong" type="submit" value="Search" />
</fieldset>
</form>
<div class="userNav"><ul>


  <li>
    <img id="j-fb-topnav-indicator" width="20" height="20" class="loading hide" alt="Processing&hellip;" src="http://public.slidesharecdn.com/images/loading.gif" />
    <a id="fb-login-topnav" class="fb_button fb_button_small" href="/newsfeed?from_source=/newsfeed"><span class="fb_button_text">Login</span></a>
  </li>
  <li><a href="/login" class="void_fancybox" rel="nofollow">Login</a></li>
  <li><strong><a href="/signup" class="void_fancybox" title="Signup now for a SlideShare account" rel="nofollow">Signup</a></strong></li>
  <li><a href="http://pro.slideshare.net/advertise" rel="nofollow">Advertise</a></li>

</ul>




  
  <script src="http://public.slidesharecdn.com/javascripts/ajax_signup.js?1293198774" type="text/javascript"></script>
  

</div>
</div>
<div class="leaderboard banner ad_top lostchild" style="height:90px;margin:0 0 .75em;text-align:center;width:728px"><div class="leaderboardContent"><script type="text/javascript">  
GA_googleFillSlot("slideview_top_728_90");
</script></div></div>





<!-- disable_ad_section_start(weight=1.0) -->
<div class="mainTitle">
<h1 class="h-slideshow-title">Sql Antipatterns Strike Back</h1>
<span class="quieter when-uploaded-value">2 years ago</span>

</div>
<!-- disable_ad_section_end() -->
<div class="column1">
<ul class="slideviewActions h-tools">
<li class="last" style="float:right;margin:0;text-align:right;"><span class="h-sponsorshiptool lostchild">
<script type="text/javascript">
  GA_googleFillSlot("slideview_sponsorship");
</script>
</span></li>
<li class="action-share public-only"><a href="#" title="Email this presentation to your contacts" class="iconShare j-tooltip" rel="nofollow">Email</a> </li>
<li class="action-addfav public-only"><a href="/signup?from=favorite&from_source=http%3A%2F%2Fwww.slideshare.net%2Fbillkarwin%2Fsql-antipatterns-strike-back%3Fsrc%3Dembed" title="Save to favorites" class="iconFavOff j-tooltip" rel="nofollow">Favorite</a> </li>
<li class="action-fav public-only" style="display:none">
<a href="#" title="Saved to your favorites" class="iconFavOn j-tooltip" rel="nofollow">Favorited</a> <a href="#" title="Remove from favorites" class="ilink delete j-tooltip" rel="nofollow">&times;</a>
</li>

<li class="action-download" style=""><a href="/signup?from=download&from_source=http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back/download&download_id=1319559-7b7ab46c8928ca35b9f4073121a0c5d0abdae345-slideshow" title="Download this presentation" class="iconDownload j-tooltip" rel="nofollow">Download</a> </li>
<li class="action-embed"><a href="#" title="Embed this presentation" class="iconEmbed j-tooltip" rel="nofollow">Embed</a> </li>

<li class="action-addgrp public-only last"><a href="/signup?from=AddToCommunity&from_source=http%3A%2F%2Fwww.slideshare.net%2Fbillkarwin%2Fsql-antipatterns-strike-back%3Fsrc%3Dembed" title="Add this presentation to a Group or Event" class="j-tooltip" rel="nofollow">More&hellip;</a></li>


<li class="expanded action-embed-code embedPanel" style="display:none">


<span class="clearfix h-embed-allow">
<label class="h-embed-label" for="embed-code">Embed this presentation</label>
<span class="hint">Copy the code below and paste it into your website.</span>
<input class="text quiet h-embed-code" readonly="readonly" id="embed-code" type="text" value="" />
<a href="#" title="Customize embed code" class="customizeLink h-action-customize ilink" rel="nofollow">Customize</a>
</span>
<span class="customizeEmbed h-embed-allow" id="h-customize-embed-section" style="display:none">
<label for="embed-code">Without related content</label>
<input name="embed-code" class="text quiet h-norel-embedcode" readonly="readonly" id="embedCodeWithoutRelated" type="text" value="" />
<label for="embed-code">For WordPress.com blogs</label>
<input name="embed-code" class="text quiet h-wpembedcode" readonly="readonly" id="embedCodeWP" type="text" value="" />
<span class="h-post-write-embed">    <script>
      document.getElementById('embed-code').value = "\u003Cdiv style=\"width:425px\" id=\"__ss_1319559\"\u003E\u003Cstrong style=\"display:block;margin:12px 0 4px\"\u003E\u003Ca href=\"http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back\" title=\"Sql Antipatterns Strike Back\"\u003ESql Antipatterns Strike Back\u003C/a\u003E\u003C/strong\u003E\u003Cobject id=\"__sse1319559\" width=\"425\" height=\"355\"\u003E\u003Cparam name=\"movie\" value=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sqlantipatternsstrikeback-090421005946-phpapp01\u0026stripped_title=sql-antipatterns-strike-back\u0026userName=billkarwin\" /\u003E\u003Cparam name=\"allowFullScreen\" value=\"true\"/\u003E\u003Cparam name=\"allowScriptAccess\" value=\"always\"/\u003E\u003Cembed name=\"__sse1319559\" src=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sqlantipatternsstrikeback-090421005946-phpapp01\u0026stripped_title=sql-antipatterns-strike-back\u0026userName=billkarwin\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"355\"\u003E\u003C/embed\u003E\u003C/object\u003E\u003Cdiv style=\"padding:5px 0 12px\"\u003EView more \u003Ca href=\"http://www.slideshare.net/\"\u003Epresentations\u003C/a\u003E from \u003Ca href=\"http://www.slideshare.net/billkarwin\"\u003EKarwin Software Solutions LLC\u003C/a\u003E.\u003C/div\u003E\u003C/div\u003E";
      document.getElementById('embedCodeWP').value = '[slideshare id=1319559&doc=sqlantipatternsstrikeback-090421005946-phpapp01]';
      document.getElementById('embedCodeWithoutRelated').value = "\u003Cdiv style=\"width:425px\" id=\"__ss_1319559\"\u003E\u003Cstrong style=\"display:block;margin:12px 0 4px\"\u003E\u003Ca href=\"http://www.slideshare.net/billkarwin/sql-antipatterns-strike-back\" title=\"Sql Antipatterns Strike Back\"\u003ESql Antipatterns Strike Back\u003C/a\u003E\u003C/strong\u003E\u003Cobject id=\"__sse1319559\" width=\"425\" height=\"355\"\u003E\u003Cparam name=\"movie\" value=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sqlantipatternsstrikeback-090421005946-phpapp01\u0026rel=0\u0026stripped_title=sql-antipatterns-strike-back\u0026userName=billkarwin\" /\u003E\u003Cparam name=\"allowFullScreen\" value=\"true\"/\u003E\u003Cparam name=\"allowScriptAccess\" value=\"always\"/\u003E\u003Cembed name=\"__sse1319559\" src=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=sqlantipatternsstrikeback-090421005946-phpapp01\u0026rel=0\u0026stripped_title=sql-antipatterns-strike-back\u0026userName=billkarwin\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"425\" height=\"355\"\u003E\u003C/embed\u003E\u003C/object\u003E\u003Cdiv style=\"padding:5px 0 12px\"\u003EView more \u003Ca href=\"http://www.slideshare.net/\"\u003Epresentations\u003C/a\u003E from \u003Ca href=\"http://www.slideshare.net/billkarwin\"\u003EKarwin Software Solutions LLC\u003C/a\u003E.\u003C/div\u003E\u003C/div\u003E";
    </script>
</span>
</span>
<a href="#" class="ilink cancel" rel="nofollow">Close</a>
</li>


<li class="expanded action-unverified-download public-only" style="display:none">
<p>
We have emailed the verification/download link to <strong>"<span class="user-email"></span>"</strong>.
<br />
Login to your email and click the link to download the file directly.
</p>
<form class="changeEmail change-unverified-email">
<fieldset>
<legend>To request the link at a different email address, update it here.</legend>
<input name="unverified-email" class="text unverified-email" value="" />
<input class="submit" type="submit" value="Update" />
<a href="#" class="ilink cancel" rel="nofollow">Close</a><br />
<span class="change-unverified-email-validate" style="display:none">Validation messages.</span>
<span class="change-unverified-email-win" style="display:none;color:#0A0">Success message.</span>
<span class="change-unverified-email-fail" style="display:none;color:#A00">Fail message.</span>
</fieldset>
</form>
<p style="margin:0"><span class="hint">Check your bulk/spam folders if you can't find our mail.</span></p>
</li>
</ul>

<div class="playerWrapper">
<div class="player" id="svPlayerId">
<p id="placeholder">
Loading&hellip;
</p>
<p id="noflash">
Flash Player 9 (or above) is needed to view presentations. <br />We have detected that you do not have it on your computer. To install it, go <a href="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash" title="Install Adobe Flash Player" rel="nofollow">here</a>.
</p>
</div>
<div class="playerAd h-player-banner lostchild noAdForLead" style="display:none;">
<a href="#" class="closeThis">&times;</a>
<div class="h-mid-banner-content"><script type="text/javascript"> 
GA_googleFillSlot("slideview_mid_468x60"); 
</script></div>
</div>
</div>
<script type="text/javascript">
// <![CDATA[
(function(ele) {
var sessionid = null;
if (document.cookie) try {
sessionid = encodeURIComponent(document.cookie.match(/_cookie_id=([^;]*)/)[1]);
} catch (e) {
//
}
var flashversion=deconcept.SWFObjectUtil.getPlayerVersion().major;
if (flashversion<9) {
document.getElementById('placeholder').style.display = 'none';
document.getElementById('noflash').style.display = 'block';
} else {
if(slideshare_object.player.url.match(/^http:\/\/s3.amazonaws.com\/ppt-download\//)){
html = '<embed width="598" height="481" quality="high" bgcolor="#FFFFFF" name="player" id="player"\
src="'+slideshare_object.player.url+'" type="application/pdf"/>';
if (jQuery.browser.msie && ((jQuery.browser.version * 1) < 7)) {
jQuery('#noflash').hide();
jQuery('#svPlayerId').css('background', 'url(http://public.slidesharecdn.com/images/loading.gif) no-repeat center');
jQuery(document).ready(function() { $(ele).html(html); });
} else {
$(ele).html(html);
}
} else {
var so = new SWFObject(slideshare_object.player.url, "player", slideshare_object.player.width, slideshare_object.player.height, slideshare_object.player.version, slideshare_object.player.color, slideshare_object.player.no_type_info);
so.addVariable('sessid', sessionid);
so.addVariable('pvt', slideshare_object.pvt);
if (slideshare_object.key) so.addVariable('key', slideshare_object.key);
so.addVariable('doc', slideshare_object.doc);
so.addVariable('version_no', slideshare_object.version_no);
so.addVariable('presentationId', slideshare_object.presentationId);
so.addVariable('totalSlides', slideshare_object.totalSlides);
so.addVariable('startSlide', slideshare_object.startSlide);
so.addVariable('inContest', slideshare_object.inContest);
so.addVariable('totalSlides', slideshare_object.totalSlides);
so.addVariable('startSlide', slideshare_object.startSlide);
so.addVariable('presentationId', slideshare_object.presentationId);
so.addVariable('preview', slideshare_object.preview);
so.addVariable('fullscreen_bg_color' , slideshare_object.slideshow.fullscreen_bg_color);
so.addVariable('stitle', slideshare_object.stripped_title);  // for secret preso's
so.addVariable('userName', slideshare_object.slideshow.user_login);
so.addVariable('has_form', (slideshare_object.slideshow.form_after_slide_number && 1));
so.addVariable('form_after_slide_number', slideshare_object.slideshow.form_after_slide_number);
so.addVariable('form_is_blocking', slideshare_object.slideshow.form_is_blocking);
so.addVariable('hostedIn' , 'slideshare');
so.addVariable('page' , 'slideview');
so.addVariable('useHttp', '1');
so.addVariable('rel', slideshare_object.slideshow.show_related_content);
so.addVariable('autoplay', '1');
so.addVariable('isAudio', slideshare_object.slideshow.is_audio ? '1' : '0');
so.addParam("allowScriptAccess", 'always');
so.addParam("wmode", 'transparent');
so.addParam("allowFullScreen", 'true');
if (jQuery.browser.msie && ((jQuery.browser.version * 1) < 7)) {
jQuery('#noflash').hide();
jQuery('#svPlayerId').css('background', 'url(http://public.slidesharecdn.com/images/loading.gif) no-repeat center');
jQuery(document).ready(function() { so.write(ele); });
} else {
so.write(ele);
}
}
ele.style.height = slideshare_object.player.height + 'px';
ele.style.width  = slideshare_object.player.width  + 'px';
$(ele).parent().height(slideshare_object.player.height + 'px')
$(ele).parent().width(slideshare_object.player.width  + 'px');
if(slideshare_object.player.url.match(/^http:\/\/s3.amazonaws.com\/ppt-download\//)){
$(ele).prepend("<div style='margin-left:10px; margin-right: 10px; padding-top:5px;'>This presentation is best viewed in Safari on Apple computers. Due to the file size, please be patient while it loads.<br />This is an Adobe&reg; Acrobat&reg; 9 PDF Portfolio. If you are unable to view this, please download Adobe Acrobat 9 Reader here <a href='http://ad.doubleclick.net/clk;216811595;39562291;o?http://get.adobe.com/reader/?sdid=EVMYF' >http://get.adobe.com/reader</a></div>");
window.setInterval("$('#svPlayerId div').remove()",20000);
}
}
})(document.getElementById('svPlayerId'));
// ]]>
</script>


<div class="clearfix FBlike">
<h2>Like this presentation?</h2>
<iframe scrolling="no" class="h-fb-like" allowtransparency="true" src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fwww.slideshare.net%2Fbillkarwin%2Fsql-antipatterns-strike-back&amp;layout=standard&amp;show_faces=false&amp;width=340&amp;action=like&amp;colorscheme=light" frameborder="0" style="border:0;float:left;height:25px;margin:0;overflow:hidden;width:390px"></iframe>
</div>
<div class="tabsContainer tabbox horzTabs" id="commentsNotes">
<div class="commentsTab tab selected comments-tab h-comments-tab">
<h2 class="comment-value"><a href="#commentsList" rel="nofollow"><span class="comments-total">6 comments</span></a></h2>
<div class="tabContent" id="commentsList">
<p class="commentsPagination h-comments-pagination">
<span class="commentsPaginationGroup h-comments-pagination-group">
<span>Comments</span> <span class="comments-start">1</span> - <span class="comments-end">6</span> of <span class="comments-total">6 comments</span>
<a href="#" class="ilink previous-link" rel="nofollow">previous</a> <a href="#" class="ilink next-link" rel="nofollow">next</a>
</span>
<a href="#postComment" class="ilink postCommentLink h-action-postcomment" rel="nofollow">Post a comment</a>
</p>
<ul class="comments h-comments-list">
<li class="comment author-28485389" id="comment-850788">
<a href="/yurykrikun" title="yurykrikun" class="userimage-link h-author-photo url" rel="nofollow">
<img class="nickname" src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="yurykrikun" />
<span class=".h-username fn ">yurykrikun</span>
</a>
<span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet when-comment-value">2 weeks ago</span>
<span class="floatRight h-comment-actions hide">



</span>
<blockquote class="comment-item-value">Great presentation! Many thanks to author.</blockquote>
</li>

<li class="comment author-19147030" id="comment-469784">
<a href="/billkarwin" title="billkarwin" class="userimage-link h-author-photo url" rel="nofollow">
<img class="nickname" src="http://cdn.slidesharecdn.com/profile-photo-billkarwin?1237248760" alt="billkarwin" />
<span class=".h-username fn org">Karwin Software Solutions LLC</span>
</a>
<span class="h-occupation">, Software Consultant </span><span class="org h-organization"> at Karwin Software Solutions LLC, </span>
<span class="quiet when-comment-value">2 years ago</span>
<span class="floatRight h-comment-actions hide">



</span>
<blockquote class="comment-item-value">Scott Fraser: thanks, you&rsquo;re right about the corrections to the tree slides.  I&rsquo;ll upload the edits soon. <br />  <br /> You&rsquo;re right about CONNECT BY syntax in Oracle.  There&rsquo;s also a SQL-2003 syntax for 'common table expressions' that allows you to run recursive queries for Adjacency List tree designs (among other uses).  As far as I know, Microsoft SQL Server, IBM DB2, and the recently released PostgreSQL 8.4 support this syntax (see http://wiki.postgresql.org/wiki/CTEReadme).</blockquote>
</li>

<li class="comment author-10546420" id="comment-469589">
<a href="/nine_k" title="nine_k" class="userimage-link h-author-photo url" rel="nofollow">
<img class="nickname" src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="nine_k" />
<span class=".h-username fn ">nine_k</span>
</a>
<span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet when-comment-value">2 years ago</span>
<span class="floatRight h-comment-actions hide">



</span>
<blockquote class="comment-item-value">Just awesome. More DB developers should view this :)</blockquote>
</li>

<li class="comment author-22452766" id="comment-466286">
<a href="/guest570f05a" title="guest570f05a" class="userimage-link h-author-photo url" rel="nofollow">
<img class="nickname" src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="guest570f05a" />
<span class=".h-username fn ">Scott Fraser</span>
</a>
<span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet when-comment-value">2 years ago</span>
<span class="floatRight h-comment-actions hide">



</span>
<blockquote class="comment-item-value">Hi, very nice deck. <br />  <br /> I think I found some typos: Slide 58, Nested Sets - I think you have the definition of comment left/right flipped around. Right number is GREATER than, and left number is LESS than descendants, no? <br />  <br /> Slide 61and 63 have a SQL error: I think 'descendent.left' should be 'descendent.nsleft'. <br />  <br /> Not sure if it&rsquo;s worth adding, but of course some of the commercial RDBMS out there have addressed some of the challenges you mentioned. For example, Oracle has the CONNECT BY clause, which might be employed to address some of the Naive Tree examples. But then... you have to pay a lot of $$$ for Oracle!   :) <br />  <br /> thanks again</blockquote>
</li>

<li class="comment author-21571186" id="comment-419913">
<a href="/guest0e11d7" title="guest0e11d7" class="userimage-link h-author-photo url" rel="nofollow">
<img class="nickname" src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="guest0e11d7" />
<span class=".h-username fn ">guest0e11d7</span>
</a>
<span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet when-comment-value">2 years ago</span>
<span class="floatRight h-comment-actions hide">



</span>
<blockquote class="comment-item-value">Awsome presentation!</blockquote>
</li>

<li class="comment author-10954887" id="comment-419588">
<a href="/jamesfm" title="jamesfm" class="userimage-link h-author-photo url" rel="nofollow">
<img class="nickname" src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="jamesfm" />
<span class=".h-username fn ">James Munro</span>
</a>
<span class="h-occupation">, Developer </span><span class="org h-organization"> at Patient Opinion, </span>
<span class="quiet when-comment-value">2 years ago</span>
<span class="floatRight h-comment-actions hide">



</span>
<blockquote class="comment-item-value">Wow - great presentation. I&rsquo;m learning a lot, and having to go slowly...</blockquote>
</li>
</ul>


<form class="postComment h-comment-post" method="post" action="#" id="postComment" accept-charset="utf-8">
<fieldset>
<div id="loginOptions">
<div id="my_identity"></div>
</div>
<textarea class="h-post-comment-textarea j-post-comment-textarea" rows="4" cols="40"></textarea>
<div class="h-non-user-message">
<div>
<a href="#" title="Just include the embed code in the comment. We support embeds from Youtube, Google Videos, BlipTV, Metacafe, Viddler, Yahoo Videos and several other approved sites only." class="ilink floatLeft j-tooltip" rel="nofollow">Embed Video</a>
<span class="floatRight">
<label class="comments-subscribe" for="followupComments">
<input name="" id="followupComments" type="checkbox" value="" />
Subscribe to comments
</label>
</span>
</div>
<a href="/signup?from=comments&from_source=http%3A%2F%2Fwww.slideshare.net%2Fbillkarwin%2Fsql-antipatterns-strike-back%3Fsrc%3Dembed" class="ctaNormal floatRight" rel="nofollow" id="login-provider-slideshare">Post Comment</a>
</div>

</fieldset>
</form>
<div class="captchaSection captcha anon-only" id="simple_captcha" style="display:none">
</div>
<form class="updateComment update-form" method="post" action="#" accept-charset="utf-8">
<fieldset>
<legend>Edit your comment</legend>
<textarea rows="4" cols="40"></textarea>
<input class="bold floatRight action-update" type="submit" value="Update" />
<a href="#" class="ilink floatRight action-cancel" rel="nofollow">Cancel</a>
</fieldset>
</form>
</div>
</div>
<div class="notesTab tab notes-tab">
<h2><a href="#notesList" rel="nofollow">Speaker Notes on slide <span class="which-slide-value">1</span></a></h2>
<div class="tabContent h-notes" id="notesList"></div>
</div>
</div>
<div class="clearfix medRecBottom2">
<div class="slideview_bottom2_fill"><script type="text/javascript">
 GA_googleFillSlot("slideview_bottom2"); 
</script></div>

</div><!-- .medRecBottom2 -->
<div class="tabsContainer tabbox horzTabs" id="favsGroupsEvents">
<div class="favsTab selected tab">
<h2><a href="#favsList" class="h-favorites-title" rel="nofollow">82 Favorites</a></h2>
<div class="tabContent" id="favsList">
<ul class="favsGroups h-favorites-list">
<li>
<strong><a href="/AjayMehta1" title="AjayMehta1" class="nickname url userimage-link" rel="nofollow"><img src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="AjayMehta1" /><span class="h-username">AjayMehta1</span></a></strong><span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet h-summary"><span class='when-fav-value'>1 week ago</span></span>
<div class="h-tags"></div>
</li>

<li>
<strong><a href="/zenMonkey" title="zenMonkey" class="nickname url userimage-link" rel="nofollow"><img src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="zenMonkey" /><span class="h-username">zenMonkey</span></a></strong><span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet h-summary"><span class='when-fav-value'>2 weeks ago</span></span>
<div class="h-tags">Tags <strong><a href='/tag/design-patterns' rel='nofollow'>design-patterns</a></strong> <strong><a href='/tag/sql' rel='nofollow'>sql</a></strong></div>
</li>

<li>
<strong><a href="/yurykrikun" title="yurykrikun" class="nickname url userimage-link" rel="nofollow"><img src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="yurykrikun" /><span class="h-username">yurykrikun</span></a></strong><span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet h-summary"><span class='when-fav-value'>2 weeks ago</span></span>
<div class="h-tags">Tags <strong><a href='/tag/sql' rel='nofollow'>sql</a></strong></div>
</li>

<li>
<strong><a href="/raveux" title="raveux" class="nickname url userimage-link" rel="nofollow"><img src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="raveux" /><span class="h-username">raveux</span></a></strong><span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet h-summary"><span class='when-fav-value'>3 weeks ago</span></span>
<div class="h-tags"></div>
</li>

<li>
<strong><a href="/molodchik" title="molodchik" class="fn url userimage-link" rel="nofollow"><img src="http://cdn.slidesharecdn.com/profile-photo-molodchik?1292604907" alt="molodchik" /><span class="h-username">Константин Мякшин</span></a></strong><span class="h-occupation">, Software Developer </span><span class="org h-organization"> at home, </span>
<span class="quiet h-summary"><span class='when-fav-value'>3 weeks ago</span></span>
<div class="h-tags"></div>
</li>

<li>
<strong><a href="/cs278" title="cs278" class="fn url userimage-link" rel="nofollow"><img src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="cs278" /><span class="h-username">Chris Smith</span></a></strong><span class="h-occupation">, Software Developer </span><span class="org h-organization"> at KiddiVouchers Ltd. / phpBB, </span>
<span class="quiet h-summary"><span class='when-fav-value'>1 month ago</span></span>
<div class="h-tags">Tags <strong><a href='/tag/rdbms' rel='nofollow'>rdbms</a></strong> <strong><a href='/tag/sql' rel='nofollow'>sql</a></strong></div>
</li>

<li>
<strong><a href="/grell" title="grell" class="fn url userimage-link" rel="nofollow"><img src="http://cdn.slidesharecdn.com/profile-photo-grell?1267720162" alt="grell" /><span class="h-username">Angus Li</span></a></strong><span class="h-occupation">, Software Engineer </span><span class="org h-organization"> at Augmentum Inc., </span>
<span class="quiet h-summary"><span class='when-fav-value'>1 month ago</span></span>
<div class="h-tags">Tags <strong><a href='/tag/mysql' rel='nofollow'>mysql</a></strong> <strong><a href='/tag/arch' rel='nofollow'>arch</a></strong></div>
</li>

<li>
<strong><a href="/YinHuai" title="YinHuai" class="fn url userimage-link" rel="nofollow"><img src="http://cdn.slidesharecdn.com/profile-photo-YinHuai?1290186824" alt="YinHuai" /><span class="h-username">Yin Huai</span></a></strong><span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet h-summary"><span class='when-fav-value'>1 month ago</span></span>
<div class="h-tags">Tags <strong><a href='/tag/sql' rel='nofollow'>sql</a></strong></div>
</li>

<li>
<strong><a href="/infojunkie71" title="infojunkie71" class="fn url userimage-link" rel="nofollow"><img src="http://cdn.slidesharecdn.com/profile-photo-infojunkie71?1286128108" alt="infojunkie71" /><span class="h-username">Karim Ratib</span></a></strong><span class="h-occupation">, Freelance Drupal consultant </span><span class="org h-organization"> at the internets, </span>
<span class="quiet h-summary"><span class='when-fav-value'>3 months ago</span></span>
<div class="h-tags"></div>
</li>

<li>
<strong><a href="/chryss" title="chryss" class="nickname url userimage-link" rel="nofollow"><img src="http://public.slidesharecdn.com/images/userImage_SMALL.gif" alt="chryss" /><span class="h-username">chryss</span></a></strong><span class="h-occupation"></span><span class="org h-organization"></span>
<span class="quiet h-summary"><span class='when-fav-value'>4 months ago</span></span>
<div class="h-tags">Tags <strong><a href='/tag/sql-antipatterns' rel='nofollow'>sql antipatterns</a></strong></div>
</li>
</ul>
<div class="viewMore action-morefavs" style="display:none"><a href="#" class="ilink" rel="nofollow">more</a></div>
</div>
</div>

<!-- downloader list starts here -->

<!-- downloader list ends here -->
</div>
<div class="slideshow-transcript">
<a rel="nofollow" id="text-version"></a>
<h2 class="h-slideshow-title">Sql Antipatterns Strike Back - Presentation Transcript</h2>
<!-- disable_ad_section_start(weight=0.5) -->
<ol class="transcripts h-transcripts"><li>SQL Antipatterns
                           Strike Back
                             Bill Karwin

                                  1
Monday, April 20, 2009                      1
 </li><li>Antipattern Categories
                          Database Design                 Database Creation
                           Antipatterns                     Antipatterns
                                                          CREATE TABLE BugsProducts (
                                                             bug_id INTEGER REFERENCES Bugs,
                                                             product VARCHAR(100) REFERENCES Products,
                                                             PRIMARY KEY (bug_id, product)
                                                          );




                                 Query                           Application
                               Antipatterns                      Antipatterns
                         SELECT b.product, COUNT(*)       $dbHandle = new PDO(‘mysql:dbname=test’);
                         FROM BugsProducts AS b           $stmt = $dbHandle-&gt;prepare($sql);
                         GROUP BY b.product;              $result = $stmt-&gt;fetchAll();




                                                      2
Monday, April 20, 2009                                                                                   2
 </li><li>Antipattern Categories
                                                          Database Creation
                          Database Design
                                                            Antipatterns
                           Antipatterns
                                                          CREATE TABLE BugsProducts (
                                                             bug_id INTEGER REFERENCES Bugs,
                                                             product VARCHAR(100) REFERENCES Products,
                                                             PRIMARY KEY (bug_id, product)
                                                          );




                                                                 Application
                                 Query
                                                                 Antipatterns
                               Antipatterns
                         SELECT b.product, COUNT(*)       $dbHandle = new PDO(‘mysql:dbname=test’);
                         FROM BugsProducts AS b           $stmt = $dbHandle-&gt;prepare($sql);
                         GROUP BY b.product;              $result = $stmt-&gt;fetchAll();




                                                      3
Monday, April 20, 2009                                                                                   3
 </li><li>Database Design Antipatterns


                     1. Metadata Tribbles
                     2. Entity-Attribute-Value
                     3. Polymorphic Associations
                     4. Naive Trees



                                         4
Monday, April 20, 2009                              4
 </li><li>Metadata Tribbles
                         I want these things off the ship. I don’t care if it takes
                            every last man we’ve got, I want them off the ship.
                                                               — James T. Kirk



                                                     5
Monday, April 20, 2009                                                                5
 </li><li>Metadata Tribbles



                     • Objective:       improve performance
                         of a very large table.




                                           6
Monday, April 20, 2009                                        6
 </li><li>Metadata Tribbles


                     • Antipattern:        separate into many tables
                         with similar structure
                         •   Separate tables per distinct value in attribute

                         •   e.g., per year, per month, per user,
                             per postal code, etc.




                                                  7
Monday, April 20, 2009                                                         7
 </li><li>Metadata Tribbles

                     • Must create a new table for each new value
                         CREATE TABLE Bugs_2005 ( . . . );
                         CREATE TABLE Bugs_2006 ( . . . );
                         CREATE TABLE Bugs_2007 ( . . . );
                         CREATE TABLE Bugs_2008 ( . . . );
                                                              mixing data
                         ...
                                                             with metadata




                                                 8
Monday, April 20, 2009                                                       8
 </li><li>Metadata Tribbles

                     • Automatic primary keys cause conﬂicts:
                         CREATE TABLE Bugs_2005 (bug_id SERIAL . . . );
                         CREATE TABLE Bugs_2006 (bug_id SERIAL . . . );
                         CREATE TABLE Bugs_2007 (bug_id SERIAL . . . );
                         CREATE TABLE Bugs_2008 (bug_id SERIAL . . . );
                         ...
                                          same values allocated
                                            in multiple tables



                                                    9
Monday, April 20, 2009                                                    9
 </li><li>Metadata Tribbles

                     • Difﬁcult to query across tables
                         SELECT b.status, COUNT(*) AS count_per_status
                         FROM (
                            SELECT * FROM Bugs_2009
                             UNION
                            SELECT * FROM Bugs_2008
                             UNION
                            SELECT * FROM Bugs_2007
                             UNION
                            SELECT * FROM Bugs_2006 ) AS b
                         GROUP BY b.status;



                                               10
Monday, April 20, 2009                                                   10
 </li><li>Metadata Tribbles


                     • Table structures are not kept in sync
                             ALTER TABLE Bugs_2009
                              ADD COLUMN hours NUMERIC;

                         •   Prior tables don’t contain new column

                         •   Dissimilar tables can’t be combined with UNION




                                                 11
Monday, April 20, 2009                                                        11
 </li><li>Metadata Tribbles
                     • Solution #1:            use horizontal partitioning
                         •   Physically split, while logically whole

                         •   MySQL 5.1 supports partitioning

                                                                BUGS
                                                                 (2007)


                                                                       BUGS
                             BUGS                                      (2008)


                                                                           BUGS
                                                                            (2009)


                                                   12
Monday, April 20, 2009                                                               12
 </li><li>Metadata Tribbles
                     • Solution #2:         use vertical partitioning
                         •   Move bulky and seldom-used columns to a
                             second table in one-to-one relationship

                                            ( 1 .. 1 )
                         PRODUCTS                          INSTALLERS




                                                13
Monday, April 20, 2009                                                  13
 </li><li>Metadata Tribbles


                     • Columns can also be tribbles:
                         CREATE TABLE Bugs (
                            bug_id  SERIAL PRIMARY KEY,
                            ...
                            product_id1 BIGINT,
                            product_id2 BIGINT,
                            product_id3 BIGINT
                         );




                                             14
Monday, April 20, 2009                                        14
 </li><li>Metadata Tribbles
                     • Solution #3:       add a dependent table
                         CREATE TABLE BugsProducts (
                            bug_id  BIGINT REFERENCES bugs,
                            product_id BIGINT REFERENCES products,
                            PRIMARY KEY (bug_id, product_id)
                         );



                                           (1 .. *)     BUGS
                                 BUGS                 PRODUCTS




                                              15
Monday, April 20, 2009                                                 15
 </li><li>Entity-Attribute-Value
                                  If you try and take a cat apart to see how it works,
                         the ﬁrst thing you have on your hands is a non-working cat.
                                                                — Richard Dawkins



                                                   16
Monday, April 20, 2009                                                                   16
 </li><li>Entity-Attribute-Value
                     • Objective: make a table with a variable
                           set of attributes
                  bug_id      bug_type   priority   description     severity       sponsor

                                                    crashes when      loss of
                    1234        BUG        high
                                                        saving     functionality


                    3456      FEATURE      low      support XML                    Acme Corp.




                                                     17
Monday, April 20, 2009                                                                          17
 </li><li>Entity-Attribute-Value

                • Antipattern: store all attributes in a
                         second table, one attribute per row
                         CREATE TABLE eav (
                          bug_id  BIGINT NOT NULL,
                          attr_name VARCHAR(20) NOT NULL,
                          attr_value VARCHAR(100),
                          PRIMARY KEY (bug_id, attr_name),
                          FOREIGN KEY (bug_id) REFERENCES Bugs(bug_id)
                         );
                                            mixing data
                                           with metadata



                                                18
Monday, April 20, 2009                                                    18
 </li><li>Entity-Attribute-Value


                         bug_id   attr_name           attr_value
                          1234     priority                high
                          1234    description      crashes when saving
                          1234     severity        loss of functionality
                          3456     priority                low
                          3456    description         support XML
                          3456     sponsor            Acme Corp.



                                              19
Monday, April 20, 2009                                                     19
 </li><li>Entity-Attribute-Value
                     • Difﬁcult to rely on attribute names

                         bug_id   attr_name        attr_value
                          1234      created        2008-04-01
                          3456    created_date     2008-04-01




                                              20
Monday, April 20, 2009                                          20
 </li><li>Entity-Attribute-Value
                     • Difﬁcult to enforce data type integrity

                         bug_id   attr_name        attr_value
                          1234    created_date      2008-02-31
                          3456    created_date        banana




                                            21
Monday, April 20, 2009                                           21
 </li><li>Entity-Attribute-Value

                     • Difﬁcult to enforce mandatory attributes
                         (i.e. NOT NULL)
                         •   SQL constraints apply to columns, not rows

                         •   No way to declare that a row must exist with a
                             certain attr_name value (‘created_date’)

                         •   Maybe create a trigger on INSERT for bugs?



                                                22
Monday, April 20, 2009                                                        22
 </li><li>Entity-Attribute-Value
                     • Difﬁcult to enforce referential integrity for
                         attribute values
                         bug_id        attr_name           attr_value
                             1234         priority             new
                             3456         priority             ﬁxed
                             5678         priority            banana


                         •    Constraints apply to all rows in the column, not
                              selected rows depending on value in attr_name


                                                     23
Monday, April 20, 2009                                                           23
 </li><li>Entity-Attribute-Value
                • Difﬁcult to reconstruct a row of attributes:
                         SELECT b.bug_id,                                            need one JOIN
                            e1.attr_value AS created_date,                           per attribute
                            e2.attr_value AS priority,
                            e3.attr_value AS description,
                            e4.attr_value AS status,
                            e5.attr_value AS reported_by
                         FROM Bugs b
                         LEFT JOIN eav e1 ON (b.bug_id = e1.bug_id AND e1.attr_name = ‘created_date’)
                         LEFT JOIN eav e2 ON (b.bug_id = e2.bug_id AND e2.attr_name = ‘priority’)
                         LEFT JOIN eav e3 ON (b.bug_id = e3.bug_id AND e3.attr_name = ‘description’)
                         LEFT JOIN eav e4 ON (b.bug_id = e4.bug_id AND e4.attr_name = ‘status’)
                         LEFT JOIN eav e5 ON (b.bug_id = e5.bug_id AND e5.attr_name = ‘reported_by’);


                          bug_id created_date priority       description         status   reported_by
                           1234     2008-04-01    high    Crashes when I save.   NEW          Bill




                                                             24
Monday, April 20, 2009                                                                                  24
 </li><li>Entity-Attribute-Value


                     • Solution:         use metadata for metadata
                         •   Deﬁne attributes in columns

                         •   ALTER TABLE to add attribute columns

                         •   Deﬁne related tables for related types




                                                 25
Monday, April 20, 2009                                                25
 </li><li>Entity-Attribute-Value
                     • Solution #1:                Single Table Inheritance
                         •   One table with many columns

                         •   Columns are NULL when inapplicable
                         CREATE TABLE Issues (
                             issue_id        SERIAL PRIMARY KEY,
                             created_date     DATE NOT NULL,
                             priority        VARCHAR(20),
                             description      TEXT,
                             issue_type       CHAR(1) CHECK (issue_type IN (‘B’, ‘F’)),
                             bug_severity     VARCHAR(20),
                             feature_sponsor   VARCHAR(100)
                         );




                                                        26
Monday, April 20, 2009                                                                       26
 </li><li>Entity-Attribute-Value
                     • Solution #2:           Concrete Table Inheritance
                         •   Deﬁne similar tables for similar types

                         •   Duplicate common columns in each table

           CREATE TABLE Bugs (                        CREATE TABLE Features (
             bug_id     SERIAL PRIMARY KEY,          bug_id     SERIAL PRIMARY KEY,
             created_dateDATE NOT NULL,               created_dateDATE NOT NULL,
             priority   VARCHAR(20),                 priority   VARCHAR(20),
             description TEXT,                        description TEXT,
             severity   VARCHAR(20)                  sponsor    VARCHAR(100)
           );                                         );




                                                 27
Monday, April 20, 2009                                                                      27
 </li><li>Entity-Attribute-Value
                     • Solution #2:         Concrete Table Inheritance
                         •   Use UNION to search both tables:
                             SELECT * FROM (
                              SELECT issue_id, description FROM Bugs
                              UNION ALL
                              SELECT issue_id, description FROM Features
                             ) uniﬁed_table
                             WHERE description LIKE ...




                                               28
Monday, April 20, 2009                                                      28
 </li><li>Entity-Attribute-Value
                     • Solution #3:              Class Table Inheritance
                         •   Common columns in base table
                         •   Subtype-speciﬁc columns in subtype tables
             CREATE TABLE Bugs (                         CREATE TABLE Features (
               issue_id BIGINT PRIMARY KEY,              issue_id BIGINT PRIMARY KEY,
               severity VARCHAR(20),                     sponsor VARCHAR(100),
               FOREIGN KEY (issue_id)                     FOREIGN KEY (issue_id)
                 REFERENCES Issues (issue_id)               REFERENCES Issues (issue_id)
             );                                          );

                                   CREATE TABLE Issues (
                                     issue_id   SERIAL PRIMARY KEY,
                                     created_dateDATE NOT NULL
                                     priority   VARCHAR(20),
                                     description TEXT
                                   );
                                                    29
Monday, April 20, 2009                                                                       29
 </li><li>Entity-Attribute-Value
                     • Solution #3:          Class Table Inheritance
                         •   Easy to query common columns:
                             SELECT * FROM Issues
                             WHERE description LIKE ...

                         •   Easy to query one subtype at a time:
                             SELECT * FROM Issues
                             JOIN Bugs USING (issue_id);




                                                30
Monday, April 20, 2009                                                 30
 </li><li>Entity-Attribute-Value

                     • Appropriate usage of EAV:
                         •   If attributes must be fully ﬂexible and dynamic

                         •   You must enforce constraints in application code

                         •   Don’t try to fetch one object in a single row

                         •   Consider non-relational solutions
                             for semi-structured data, e.g. RDF/XML



                                                 31
Monday, April 20, 2009                                                          31
 </li><li>Polymorphic Associations
                         Of course, some people do go both ways.
                                             — The Scarecrow




                                           32
Monday, April 20, 2009                                             32
 </li><li>Polymorphic Assocations
                • Objective: reference multiple parents
                                                  BUGS


                         COMMENTS


                                                FEATURES


                                     33
Monday, April 20, 2009                                     33
 </li><li>Polymorphic Assocations
                • Can’t make a FOREIGN KEY constraint
                         reference two tables:
                         CREATE TABLE Comments (
                          comment_id SERIAL PRIMARY KEY,
                          comment  TEXT NOT NULL,
                          issue_type VARCHAR(15) CHECK
                                     
                           (issue_type IN (‘Bugs’, ‘Features’)),
                          issue_id  BIGINT NOT NULL,
                          FOREIGN KEY issue_id REFERENCES
                         );
                                           you need this to be
                                            Bugs or Features



                                                       34
Monday, April 20, 2009                                               34
 </li><li>Polymorphic Assocations
                • Instead, you have to deﬁne table with no
                         FOREIGN KEY or referential integrity:
                         CREATE TABLE Comments (
                          comment_id SERIAL PRIMARY KEY,
                          comment  TEXT NOT NULL,
                          issue_type VARCHAR(15) CHECK
                                     
                           (issue_type IN (‘Bugs’, ‘Features’)),
                          issue_id  BIGINT NOT NULL
                         );




                                                   35
Monday, April 20, 2009                                               35
 </li><li>Polymorphic Assocations
                                comment
                                        comment issue_type issue_id
                                   id
             issue_id                                                                     issue_id
                                  6789        “It crashes”       Bugs       1234
                   ...                                                                         ...
                                  9876        “Great idea!”     Features    2345
                 1234                                                                       2345
                                                   Comments
                Bugs                                                                     Features



                                                  Query result:
                                                                    c.         b.          f.
                   comment_id comment issue_type
                                                                 issue_id   issue_id   issue_id
                         6789     “It crashes”       Bug           1234      1234       NULL
                                    “Great
                         9876                      Feature         2345      NULL       2345
                                     idea!”


                                                           36
Monday, April 20, 2009                                                                               36
 </li><li>Polymorphic Assocations
                • You can’t use a different table for each row.
                         You must name all tables explicitly.
                         SELECT * FROM Comments
                         JOIN    USING (issue_id);

                                                    you need this to be
                                                     Bugs or Features




                                               37
Monday, April 20, 2009                                                    37
 </li><li>Polymorphic Assocations
                • Instead, join to each parent table:
                         SELECT *
                         FROM Comments c
                         LEFT JOIN Bugs b ON (c.issue_type = ‘Bugs’
                          AND c.issue_id = b.issue_id)
                         LEFT JOIN Features f ON (c.issue_type = ‘Features’
                          AND c.issue_id = f.issue_id);


                                                 you have to get
                                                these strings right




                                                    38
Monday, April 20, 2009                                                        38
 </li><li>Polymorphic Assocations
                • Solution #1:                 exclusive arcs
                         CREATE TABLE Comments (
                          comment_id SERIAL PRIMARY KEY,
                          comment  TEXT NOT NULL,
                          bug_id  BIGINT,                both columns are nullable;
                          feature_id BIGINT,             exactly one must be non-null
                          FOREIGN KEY bug_id
                           REFERENCES Bugs(bug_id)
                          FOREIGN KEY feature_id
                           REFERENCES Features(feature_id)
                         );




                                                    39
Monday, April 20, 2009                                                                     39
 </li><li>Polymorphic Assocations
                • Solution #1:             exclusive arcs
                         • Referential integrity is enforced
                         • But hard to make sure exactly one is non-null
                         • Queries are easier:
                           SELECT * FROM Comments c
                           LEFT JOIN Bugs b USING (bug_id)
                           LEFT JOIN Features f USING (feature_id);




                                                40
Monday, April 20, 2009                                                     40
 </li><li>Polymorphic Assocations
                • Solution #2:   reverse the relationship

                                 BUGS
                                                     BUGS
                               COMMENTS


                   COMMENTS



                                FEATURES
                                                    FEATURES
                               COMMENTS



                                     41
Monday, April 20, 2009                                         41
 </li><li>Polymorphic Assocations
                • Solution #2:                 reverse the relationship
                         CREATE TABLE BugsComments (
                           comment_id BIGINT NOT NULL,
                           bug_id    BIGINT NOT NULL,
                           PRIMARY KEY (comment_id),
                           FOREIGN KEY (comment_id) REFERENCES Comments(comment_id),
                           FOREIGN KEY (bug_id) REFERENCES Bugs(bug_id)
                         );

                         CREATE TABLE FeaturesComments (
                           comment_id BIGINT NOT NULL,
                           feature_id BIGINT NOT NULL,
                           PRIMARY KEY (comment_id),
                           FOREIGN KEY (comment_id) REFERENCES Comments(comment_id),
                           FOREIGN KEY (feature_id) REFERENCES Features(feature_id)
                         );



                                                     42
Monday, April 20, 2009                                                                  42
 </li><li>Polymorphic Assocations
                • Solution #2:                   reverse the relationship
                         •   Referential integrity is enforced
                         •   Query comments for a given bug:
                             SELECT * FROM BugsComments b
                             JOIN Comments c USING (comment_id)
                             WHERE b.bug_id = 1234;

                         •   Query bug/feature for a given comment:
                             SELECT * FROM Comments
                             LEFT JOIN (BugsComments JOIN Bugs USING (bug_id))
                              USING (comment_id)
                             LEFT JOIN (FeaturesComments JOIN Features USING (feature_id))
                              USING (comment_id)
                             WHERE comment_id = 9876;



                                                       43
Monday, April 20, 2009                                                                       43
 </li><li>Polymorphic Assocations
                • Solution #3:   use a base parent table

                     BUGS         ISSUES              FEATURES




                                 COMMENTS



                                     44
Monday, April 20, 2009                                           44
 </li><li>Polymorphic Assocations
                • Solution #3:                   use a base parent table
                         CREATE TABLE Issues (
                           issue_id   SERIAL PRIMARY KEY
                         );
                         CREATE TABLE Bugs (
                           issue_id  BIGINT PRIMARY KEY,
                           ...
                           FOREIGN KEY (issue_id) REFERENCES Issues(issue_id)
                         );
                         CREATE TABLE Comments (
                           comment_id SERIAL PRIMARY KEY,
                           comment    TEXT NOT NULL,
                           issue_id  BIGINT NOT NULL,
                           FOREIGN KEY (issue_id) REFRENCES Issues(issue_id)
                         );



                                                        45
Monday, April 20, 2009                                                           45
 </li><li>Polymorphic Assocations
                • Solution #3:              use a base parent table
                         • Referential integrity is enforced
                         • Queries are easier:
                            SELECT * FROM Comments
                            JOIN Issues USING (issue_id)
                            LEFT JOIN Bugs USING (issue_id)
                            LEFT JOIN Features USING (issue_id);




                                                 46
Monday, April 20, 2009                                                46
 </li><li>Polymorphic Assocations
                • Enforcing disjoint subtypes:
                         CREATE TABLE Issues (
                           issue_id   SERIAL PRIMARY KEY,
                           issue_type CHAR(1) NOT NULL CHECK (issue_type IN (‘B’, ‘F’)),
                           UNIQUE KEY (issue_id, issue_type)
                         );

                                                                            referential integrity
                         CREATE TABLE Bugs (
                           issue_id  BIGINT PRIMARY KEY,
                           issue_type CHAR(1) NOT NULL CHECK (issue_type = ‘B’),
                           ...
                           FOREIGN KEY (issue_id, issue_type)
                               REFERENCES Issues(issue_id, issue_type)
                         );



                                                        47
Monday, April 20, 2009                                                                              47
 </li><li>Naive Trees



                              48
Monday, April 20, 2009                 48
 </li><li>Naive Trees


                • Objective:               store/query hierarchical data
                         •   Categories/subcategories

                         •   Bill of materials

                         •   Threaded discussions




                                                 49
Monday, April 20, 2009                                                     49
 </li><li>Naive Trees
                                                       (1) Fran:
                                                    What’s the cause
                                                     of this bug?


                                                                      (4) Kukla:
                                         (2) Ollie:
                                                                     We need to
                                     I think it’s a null
                                                                   check valid input.
                                          pointer.


                              (3) Fran:                                               (6) Fran:
                                                               (5) Ollie:
                         No, I checked for                                       Yes, please add a
                                                           Yes, that’s a bug.
                                that.                                                  check.



                                                                                    (7) Kukla:
                                                                                   That ﬁxed it.



                                                            50
Monday, April 20, 2009                                                                               50
 </li><li>Naive Trees
                • Adjacency List
                         •   Naive solution nearly everyone uses
                         •   Each entry in the tree knows immediate parent
                         comment_id parent_id author            comment
                              1       NULL     Fran    What’s the cause of this bug?
                              2         1      Ollie     I think it’s a null pointer.
                              3         2      Fran       No, I checked for that.
                              4         1      Kukla   We need to check valid input.
                              5         4      Ollie         Yes, that’s a bug.
                              6         4      Fran       Yes, please add a check
                              7         6      Kukla           That ﬁxed it.


                                                  51
Monday, April 20, 2009                                                                  51
 </li><li>Naive Trees
                • Adjacency List
                         •   Easy to inserting a new comment:
                             INSERT INTO Comments (parent_id, author, comment)
                              VALUES (7, ‘Kukla’, ‘Thanks!’);

                         •   Easy to move a subtree to a new position:
                             UPDATE Comments SET parent_id = 3
                             WHERE comment_id = 6;




                                                 52
Monday, April 20, 2009                                                           52
 </li><li>Naive Trees
                • Adjacency List
                         •   Querying a node’s immediate children is easy:
                             SELECT * FROM Comments c1
                             LEFT JOIN Comments c2
                              ON (c2.parent_id = c1.comment_id);

                         •   Querying a node’s immediate parent is easy:
                             SELECT * FROM Comments c1
                             JOIN Comments c2
                              ON (c1.parent_id = c2.comment_id);


                                                 53
Monday, April 20, 2009                                                       53
 </li><li>Naive Trees
                • Adjacency List
                         •   Hard to query all descendants in a deep tree:
                             SELECT * FROM Comments c1
                             LEFT JOIN Comments c2 ON (c2.parent_id = c1.comment_id)
                             LEFT JOIN Comments c3 ON (c3.parent_id = c2.comment_id)
                             LEFT JOIN Comments c4 ON (c4.parent_id = c3.comment_id)
                             LEFT JOIN Comments c5 ON (c5.parent_id = c4.comment_id)
                             LEFT JOIN Comments c6 ON (c6.parent_id = c5.comment_id)
                             LEFT JOIN Comments c7 ON (c7.parent_id = c6.comment_id)
                             LEFT JOIN Comments c8 ON (c8.parent_id = c7.comment_id)
                             LEFT JOIN Comments c9 ON (c9.parent_id = c8.comment_id)
                             LEFT JOIN Comments c10 ON (c10.parent_id = c9.comment_id)
                             ...
                                              it still doesn’t support
                                                  unlimited depth!


                                                        54
Monday, April 20, 2009                                                                   54
 </li><li>Naive Trees
                • Solution #1:                   Path Enumeration
                         •   Store chain of ancestors as a string in each node
                         •   Good for breadcrumbs, or sorting by hierarchy

                         comment_id    path       author            comment
                              1       1/           Fran    What’s the cause of this bug?
                              2       1/2/         Ollie     I think it’s a null pointer.
                              3       1/2/3/       Fran       No, I checked for that.
                              4       1/4/         Kukla   We need to check valid input.
                              5       1/4/5/       Ollie         Yes, that’s a bug.
                              6       1/4/6/       Fran       Yes, please add a check
                              7       1/4/6/7/     Kukla           That ﬁxed it.


                                                      55
Monday, April 20, 2009                                                                      55
 </li><li>Naive Trees
                • Solution #1:               Path Enumeration
                         •   Easy to query all ancestors of comment #7:
                             SELECT * FROM Comments
                             WHERE ‘1/4/6/7/’ LIKE path || ‘%’;

                         •   Easy to query all descendants of comment #4:
                             SELECT * FROM Comments
                             WHERE path LIKE ‘1/4/%’;




                                                  56
Monday, April 20, 2009                                                      56
 </li><li>Naive Trees
                • Solution #1:                Path Enumeration
                         •   Easy to add child of comment 7:
                             INSERT INTO Comments (author, comment)
                             VALUES (‘Ollie’, ‘Good job!’);
                             SELECT path FROM Comments
                             WHERE comment_id = 7;
                             UPDATE Comments
                             SET path = $parent_path || LAST_INSERT_ID() || ‘/’
                             WHERE comment_id = LAST_INSERT_ID();



                                                   57
Monday, April 20, 2009                                                            57
 </li><li>Naive Trees
                • Solution #2:               Nested Sets
                         •   Each comment encodes its descendants
                             using two numbers:

                         •   A comment’s right number is less than all the
                             numbers used by the comment’s descendants.

                         •   A comment’s left number is greater than all the
                             numbers used by the comment’s descendants.




                                                  58
Monday, April 20, 2009                                                         58
 </li><li>Naive Trees
                • Solution #2:                          Nested Sets
                                                                (1) Fran:
                                                             What’s the cause
                                                              of this bug?
                                                         1                       14
                                               (2) Ollie:                         (4) Kukla:
                                           I think it’s a null                 We need to check
                                                pointer.                         valid input.
                                       2                         5         6                    13

                                 (3) Fran:                                                          (6) Fran:
                                                                         (5) Ollie:
                             No, I checked for                                                 Yes, please add a
                                                                     Yes, that’s a bug.
                                    that.                                                            check.
                         3                       4               7                    8    9                       12

                                                                                                 (7) Kukla:
                                                                                                That ﬁxed it.

                                                                                          10                       11


                                                                      59
Monday, April 20, 2009                                                                                                  59
 </li><li>Naive Trees
                • Solution #2:                 Nested Sets

             comment_id      nsleft        nsright    author               comment
                         1     1              14          Fran    What’s the cause of this bug?
                         2     2               5          Ollie     I think it’s a null pointer.
                         3     3               4          Fran       No, I checked for that.
                         4     6              13          Kukla   We need to check valid input.
                         5     7               8          Ollie         Yes, that’s a bug.
                         6     9              12          Fran       Yes, please add a check
                         7    10              11          Kukla           That ﬁxed it.

                                   these are not
                                    foreign keys

                                                     60
Monday, April 20, 2009                                                                             60
 </li><li>Naive Trees
                • Solution #2:               Nested Sets
                         •   Easy to query all ancestors of comment #7:
                             SELECT * FROM Comments child
                             JOIN Comments ancestor
                              ON (child.left BETWEEN ancestor.nsleft
                                   AND ancestor.nsright)
                             WHERE child.comment_id = 7;




                                                  61
Monday, April 20, 2009                                                    61
 </li><li>Naive Trees
                • Solution #2:                          Nested Sets
                                                                                                                ancestors
                                                                (1) Fran:
                                                             What’s the cause
                                                              of this bug?
                                                         1                       14
                                               (2) Ollie:                         (4) Kukla:
                                           I think it’s a null                 We need to check
                                                pointer.                         valid input.
                                                                                                                            child
                                       2                         5         6                    13

                                 (3) Fran:                                                          (6) Fran:
                                                                         (5) Ollie:
                             No, I checked for                                                 Yes, please add a
                                                                     Yes, that’s a bug.
                                    that.                                                            check.
                         3                       4               7                    8    9                       12

                                                                                                 (7) Kukla:
                                                                                                That ﬁxed it.

                                                                                          10                       11


                                                                      62
Monday, April 20, 2009                                                                                                              62
 </li><li>Naive Trees
                • Solution #2:              Nested Sets
                         •   Easy to query all descendants of comment #4:
                             SELECT * FROM Comments parent
                             JOIN Comments descendant
                              ON (descendant.left BETWEEN parent.nsleft
                                     AND parent.nsright)
                             WHERE parent.comment_id = 4;




                                                 63
Monday, April 20, 2009                                                      63
 </li><li>Naive Trees
                • Solution #2:                          Nested Sets
                                                                                                                parent
                                                                (1) Fran:
                                                             What’s the cause
                                                              of this bug?
                                                         1                       14
                                                                                                                         descendants
                                               (2) Ollie:                         (4) Kukla:
                                           I think it’s a null                 We need to check
                                                pointer.                         valid input.
                                       2                         5         6                    13

                                 (3) Fran:                                                          (6) Fran:
                                                                         (5) Ollie:
                             No, I checked for                                                 Yes, please add a
                                                                     Yes, that’s a bug.
                                    that.                                                            check.
                         3                       4               7                    8    9                       12

                                                                                                 (7) Kukla:
                                                                                                That ﬁxed it.

                                                                                          10                       11


                                                                      64
Monday, April 20, 2009                                                                                                                 64
 </li><li>Naive Trees
                • Solution #2:                     Nested Sets
                         •   Hard to insert a new child of comment #5:
                             UPDATE Comment
                             SET nsleft = CASE WHEN nsleft &gt;= 8 THEN nsleft+2 ELSE nsleft END,
                                 nsright = nsright+2
                             WHERE nsright &gt;= 7;

                             INSERT INTO Comment (nsleft, nsright, author, comment)
                              VALUES (8, 9, 'Fran', 'I agree!');

                         •   Recalculate left values for all nodes to the right of
                             the new child. Recalculate right values for all
                             nodes above and to the right.


                                                          65
Monday, April 20, 2009                                                                            65
 </li><li>Naive Trees
                • Solution #2:                          Nested Sets
                                                                (1) Fran:
                                                             What’s the cause
                                                              of this bug?
                                                         1                         16
                                                                                   14
                                               (2) Ollie:                           (4) Kukla:
                                           I think it’s a null                   We need to check
                                                pointer.                           valid input.
                                       2                         5           6                  15
                                                                                                13

                                 (3) Fran:                                                          (6) Fran:
                                                                         (5) Ollie:
                             No, I checked for                                                 Yes, please add a
                                                                     Yes, that’s a bug.
                                    that.                                                            check.
                         3                       4               7                       89
                                                                                        10 11                      14
                                                                                                                   12

                                                                           (8) Fran:             (7) Kukla:
                                                                            I agree!            That ﬁxed it.

                                                                 8                      9 10
                                                                                          12                       13
                                                                                                                   11


                                                                      66
Monday, April 20, 2009                                                                                                  66
 </li><li>Naive Trees
                • Solution #2:                    Nested Sets
                         •   Hard to query the parent of comment #6:
                             SELECT parent.* FROM Comments AS c
                             JOIN Comments AS parent
                              ON (c.nsleft BETWEEN parent.nsleft AND parent.nsright)
                             LEFT OUTER JOIN Comments AS in_between
                              ON (c.nsleft BETWEEN in_between.nsleft AND in_between.nsright
                               AND in_between.nsleft BETWEEN parent.nsleft AND parent.nsright)
                             WHERE c.comment_id = 6 AND in_between.comment_id IS NULL;

                         •   Parent of #6 is an ancestor who has no
                             descendant who is also an ancestor of #6.

                         •   Querying a child is a similar problem.

                                                         67
Monday, April 20, 2009                                                                           67
 </li><li>Naive Trees
                • Solution #3:                  Closure Table
                         •   Store every path from ancestors to descendants

                         •   Requires an additional table:
                             CREATE TABLE TreePaths (
                               ancestor   BIGINT NOT NULL,
                               descendant BIGINT NOT NULL,
                               PRIMARY KEY (ancestor, descendant),
                               FOREIGN KEY(ancestor) REFERENCES Comments(comment_id),
                               FOREIGN KEY(descendant) REFERENCES Comments(comment_id),
                             );




                                                      68
Monday, April 20, 2009                                                                     68
 </li><li>Naive Trees
                • Solution #3:                      Closure Table
                                                           (1) Fran:
                                                        What’s the cause
                                                         of this bug?



                                           (2) Ollie:                     (4) Kukla:
                                       I think it’s a null             We need to check
                                            pointer.                     valid input.



                             (3) Fran:                                                    (6) Fran:
                                                                  (5) Ollie:
                         No, I checked for                                           Yes, please add a
                                                              Yes, that’s a bug.
                                that.                                                      check.




                                                                                       (7) Kukla:
                                                                                      That ﬁxed it.




                                                               69
Monday, April 20, 2009                                                                                   69
 </li><li>Naive Trees
                • Solution #3:
                                                                              ancestor descendant
                                                       Closure Table             1         1
                                                                                 1         2
                         comment_id author            comment
                                                                                 1         3
                             1       Fran    What’s the cause of this bug?
                                                                                 1         4
                             2       Ollie     I think it’s a null pointer.
                                                                                 1         5
                             3       Fran       No, I checked for that.
                                                                                 1         6
                             4       Kukla   We need to check valid input.
                                                                                 1         7
                             5       Ollie         Yes, that’s a bug.
                                                                                 2         2
                             6       Fran       Yes, please add a check
                                                                                 2         3
                             7       Kukla           That ﬁxed it.
                                                                                 3         3
                                                                                 4         4
                                       requires O(n²)                            4         5
                                        rows at most                             4         6
                                                                                 4         7
                                        but far fewer
                                                                                 5         5
                                         in practice
                                                                                 6         6
                                                                                 6         7
                                                                                 7         7
                                                                   70
Monday, April 20, 2009                                                                              70
 </li><li>Naive Trees
                • Solution #3:             Closure Table
                         •   Easy to query descendants of comment #4:
                             SELECT c.* FROM Comments c
                             JOIN TreePaths t
                              ON (c.comment_id = t.descendant)
                             WHERE t.ancestor = 4;




                                                71
Monday, April 20, 2009                                                  71
 </li><li>Naive Trees
                • Solution #3:             Closure Table
                         •   Easy to query ancestors of comment #6:
                             SELECT c.* FROM Comments c
                             JOIN TreePaths t
                              ON (c.comment_id = t.ancestor)
                             WHERE t.descendant = 6;




                                                72
Monday, April 20, 2009                                                72
 </li><li>Naive Trees
                • Solution #3:              Closure Table
                         •   Easy to insert a new child of comment #5:
                                                                   generates comment #8
                             INSERT INTO Comments ...
                             INSERT INTO TreePaths (ancestor, descendant)
                              VALUES (8, 8);
                             INSERT INTO TreePaths (ancestor, descendant)
                              SELECT ancestor, 8 FROM TreePaths
                              WHERE descendant = 5;



                                                 73
Monday, April 20, 2009                                                                    73
 </li><li>Naive Trees
                • Solution #3:              Closure Table
                         •   Easy to delete a child comment #7:
                             DELETE FROM TreePaths
                             WHERE descendant = 7;

                         •   Even easier with ON DELETE CASCADE




                                                 74
Monday, April 20, 2009                                            74
 </li><li>Naive Trees
                • Solution #3:              Closure Table
                         •   Easy to delete the subtree under comment #4:
                             DELETE FROM TreePaths WHERE descendant IN
                              (SELECT descendant FROM TreePaths
                              WHERE ancestor = 4);

                         •   For MySQL, use multi-table DELETE:
                             DELETE p FROM TreePaths p
                             JOIN TreePaths a USING (descendant)
                             WHERE a.ancestor = 4;


                                                75
Monday, April 20, 2009                                                      75
 </li><li>Naive Trees
                • Solution #3:
                                                                ancestor descendant   depth
                                            Closure Table          1         1          0
                                                                   1         2          1

                         •   Add a depth column to make it         1         3          2

                             easier to query immediate parent      1         4          1
                                                                   1         5          2
                             or child:                             1         6          2
                                                                   1         7          3
                         SELECT c.* FROM Comments c                2         2          0

                         JOIN TreePaths t                          2         3          1

                          ON (c.comment_id = t.descendant)         3         3          0
                                                                   4         4          0
                         WHERE t.ancestor = 4                      4         5          1

                          AND t.depth = 1;                         4         6          1
                                                                   4         7          2
                                                                   5         5          0
                                                                   6         6          0
                                                                   6         7          1
                                                                   7         7          0
                                                 76
Monday, April 20, 2009                                                                        76
 </li><li>Naive Trees
                • Summary of Designs:
                          Number of    Query         Query    Modify   Referential
              Design
                           Tables      Child        Subtree    Tree     Integrity
         Adjacency List       1         Easy         Hard      Easy        Yes
             Path
                              1         Easy         Easy      Hard        No
          Enumeration

           Nested Sets        1        Hard          Easy      Hard        No

          Closure Table       2         Easy         Easy      Easy        Yes




                                               77
Monday, April 20, 2009                                                               77
 </li><li>Antipattern Categories
                         Database Design                   Database Creation
                          Antipatterns                       Antipatterns
                                                           CREATE TABLE BugsProducts (
                                                              bug_id INTEGER REFERENCES Bugs,
                                                              product VARCHAR(100) REFERENCES Products,
                                                              PRIMARY KEY (bug_id, product)
                                                           );




                                 Query                            Application
                               Antipatterns                       Antipatterns
                         SELECT b.product, COUNT(*)        $dbHandle = new PDO(‘mysql:dbname=test’);
                         FROM BugsProducts AS b            $stmt = $dbHandle-&gt;prepare($sql);
                         GROUP BY b.product;               $result = $stmt-&gt;fetchAll();




                                                      78
Monday, April 20, 2009                                                                                    78
 </li><li>Database Creation Antipatterns


                     5. ENUM Antipattern
                     6. Rounding Errors
                     7. Indexes Are Magical




                                          79
Monday, April 20, 2009                            79
 </li><li>ENUM Antipattern



                                80
Monday, April 20, 2009                      80
 </li><li>ENUM Antipattern


                     • Objective:      restrict a column
                         to a ﬁxed set of values
                                                     OK
                         INSERT INTO bugs (status)
                            VALUES (‘new’)
                         INSERT INTO bugs (status)
                            VALUES (‘banana’)
                                                     FAIL



                                               81
Monday, April 20, 2009                                      81
 </li><li>ENUM Antipattern


                     • Antipattern:       use ENUM data type,
                         when the set of values may change
                         CREATE TABLE Bugs (
                           ...
                           status  ENUM(‘new’, ‘open’, ‘ﬁxed’)
                         );




                                                82
Monday, April 20, 2009                                              82
 </li><li>ENUM Antipattern


                     • Changing the set of values is a metadata
                         alteration
                     • You must know the current set of values
                         ALTER TABLE Bugs MODIFY COLUMN
                            status ENUM(‘new’, ‘open’, ‘ﬁxed’, ‘duplicate’);




                                                   83
Monday, April 20, 2009                                                          83
 </li><li>ENUM Antipattern

                     • Difﬁcult to get a list of possible values
                         SELECT column_type
                         FROM information_schema.columns
                         WHERE table_schema = ‘bugtracker_schema’
                          AND table_name = ‘Bugs’
                          AND column_name = ‘status’;

                     • Returns a LONGTEXT you must parse:
                         “ENUM(‘new’, ‘open’, ‘ﬁxed’)”



                                                  84
Monday, April 20, 2009                                              84
 </li><li>ENUM Antipattern


                     • Solution:        use ENUM only if values are
                         set in stone
                         CREATE TABLE Bugs (
                           ...
                           bug_type  ENUM(‘defect’, ‘feature’)
                         );




                                               85
Monday, April 20, 2009                                                85
 </li><li>ENUM Antipattern
                     • Use a lookup table if values may change
                         CREATE TABLE BugStatus (
                           status VARCHAR(10) PRIMARY KEY
                         );
                         INSERT INTO BugStatus (status)
                          VALUES (‘NEW’), (‘OPEN’), (‘FIXED’);


                                       BUGS           BUGSTATUS




                                                86
Monday, April 20, 2009                                            86
 </li><li>ENUM Antipattern


                     • Adding/removing a value is a data
                         operation, not a metadata operation
                     • You don’t need to know the current values
                         INSERT INTO BugStatus (status)
                          VALUES (‘DUPLICATE’);




                                                87
Monday, April 20, 2009                                             87
 </li><li>ENUM Antipattern

                     • Use an attribute to retire values, not
                         DELETE
                         CREATE TABLE BugStatus (
                            status  VARCHAR(10) PRIMARY KEY,
                            active  TINYINT NOT NULL DEFAULT 1
                         );
                         UPDATE BugStatus
                         SET active = 0
                         WHERE status = ‘DUPLICATE’;



                                              88
Monday, April 20, 2009                                              88
 </li><li>Rounding Errors
                          10.0 times 0.1 is hardly ever 1.0.
                                      — Brian Kernighan




                                          89
Monday, April 20, 2009                                         89
 </li><li>Rounding Errors



                     • Objective:         store real numbers exactly
                         •   Especially money

                         •   Work estimate hours




                                                90
Monday, April 20, 2009                                                 90
 </li><li>Rounding Errors


                     • Antipattern:          use FLOAT data type
                         ALTER TABLE Bugs
                          ADD COLUMN hours FLOAT;
                         INSERT INTO Bugs (bug_id, hours)
                          VALUES (1234, 3.3);




                                               91
Monday, April 20, 2009                                             91
 </li><li>Rounding Errors

                     • FLOAT is inexact
                         SELECT hours FROM Bugs
                         WHERE bug_id = 1234;

                         ‣ 3.3
                         SELECT hours * 1000000000 FROM Bugs
                         WHERE bug_id = 1234;

                         ‣ 3299999952.3163


                                              92
Monday, April 20, 2009                                         92
 </li><li>Rounding Errors



                     • Inexact decimals                      assuming inﬁnite precision
                         •   1/3 + 1/3 + 1/3 = 1.0

                         •   0.333 + 0.333 + 0.333 = 0.999            ﬁnite precision




                                                     93
Monday, April 20, 2009                                                                    93
 </li><li>Rounding Errors


                     • IEEE 754 standard for representing
                         ﬂoating-point numbers in base-2
                         •   Some numbers round off, aren’t stored exactly

                         •   Comparisons to original value fail
                             SELECT * FROM Bugs
                             WHERE hours = 3.3;       comparison
                                                         fails




                                                94
Monday, April 20, 2009                                                       94
 </li><li>Rounding Errors

                     • Solution: use NUMERIC data type
                         ALTER TABLE Bugs
                          ADD COLUMN hours NUMERIC(9,2)
                         INSERT INTO bugs (bug_id, hours)
                          VALUES (1234, 3.3);
                         SELECT * FROM Bugs             comparison
                         WHERE hours = 3.3;              succeeds




                                                95
Monday, April 20, 2009                                               95
 </li><li>Indexes are Magical
                            Whenever any result is sought, the question will then
                         arise — by what course of calculation can these results
                               be arrived at by the machine in the shortest time?
                                                           — Charles Babbage

                                                    96
Monday, April 20, 2009                                                              96
 </li><li>Indexes are Magical



                • Objective: execute queries with optimal
                         performance




                                       97
Monday, April 20, 2009                                      97
 </li><li>Indexes are Magical


                • Antipatterns:
                         •   Creating indexes blindly

                         •   Executing non-indexable queries

                         •   Rejecting indexes because of their overhead




                                                  98
Monday, April 20, 2009                                                     98
 </li><li>Indexes are Magical
                • Creating indexes blindly:
                         CREATE TABLE Bugs (
                          bug_id  SERIAL PRIMARY KEY,
                          date_reported DATE NOT NULL,
                          summary  VARCHAR(80) NOT NULL,
                          status   VARCHAR(10) NOT NULL, redundant index
                          hours   NUMERIC(9,2),
                                                                    bulky index
                          INDEX (bug_id),
                          INDEX (summary),                      unnecessary index
                          INDEX (hours),                           unnecessary
                          INDEX (bug_id, date_reported, status)   covering index
                         );


                                                   99
Monday, April 20, 2009                                                               99
 </li><li>Indexes are Magical
                • Executing non-indexable queries:
                         •   SELECT * FROM Bugs
                             WHERE description LIKE ‘%crash%’;
                                                                    non-leftmost

                         •                                          string match
                             SELECT * FROM Bugs
                             WHERE MONTH(date_reported) = 4;          function applied
                                                                         to column

                         •   SELECT * FROM Bugs
                             WHERE last_name = “...” OR ﬁrst_name = “...”;

                         •
                                                                  no index spans
                             SELECT * FROM Accounts                   all rows
                             ORDER BY ﬁrst_name, last_name;
                                                                    non-leftmost
                                                                 composite key match

                                                100
Monday, April 20, 2009                                                                   100
 </li><li>Indexes are Magical
                • Telephone book analogy
                         •   Easy to search for Dean Thomas:     uses index
                                                                  to match
                             SELECT * FROM TelephoneBook
                             WHERE full_name LIKE ‘Thomas, %’;

                         •   Hard to search for Thomas Riddle:   requires full
                                                                  table scan
                             SELECT * FROM TelephoneBook
                             WHERE full_name LIKE ‘%, Thomas’;




                                                 101
Monday, April 20, 2009                                                           101
 </li><li>Indexes are Magical
                • Rejecting indexes because of their overhead:
                                                                     Query w/ Index: O(log n)
                   80
                                                                     Update Index: O(log n)
                                                                     Query w/o Index: O(n)
                   60


                                                                           the beneﬁt quickly
                   40
                                                                         justiﬁes the overhead

                   20


                     0
                         0 100 200 300 400 500 600 700 800 9001000



                                                       102
Monday, April 20, 2009                                                                           102
 </li><li>Indexes are Magical
                • Solution: “MENTOR” your indexes
                         Measure
                         Explain
                         Nominate
                         Test
                         Optimize
                         Repair

                                     103
Monday, April 20, 2009                              103
 </li><li>Indexes are Magical
                • Solution: “MENTOR” your indexes
                                      • Proﬁle your application.
                         Measure
                                      • Focus on the most costly
                         Explain       SQL queries:
                         Nominate      • Longest-running.
                                       • Most frequently run.
                         Test
                                       • Blockers, lockers, and
                         Optimize          deadlocks.

                         Repair

                                     104
Monday, April 20, 2009                                             104
 </li><li>Indexes are Magical
                • Solution: “MENTOR” your indexes
                                      • Analyze the optimization
                         Measure
                                        plan of costly queries,
                         Explain        e.g. MySQL’s EXPLAIN
                                      • Identify tables that aren’t
                         Nominate
                                        using indexes:
                         Test          • Temporary table
                         Optimize      • Filesort
                         Repair

                                     105
Monday, April 20, 2009                                                105
 </li><li>Indexes are Magical
                • Solution: “MENTOR” your indexes
                                     • Could an index improve
                         Measure
                                      access to these tables?
                         Explain      • ORDER BY criteria
                         Nominate     • MIN() / MAX()
                                      • WHERE conditions
                         Test
                                     • Which column(s) need
                         Optimize     indexes?
                         Repair

                                    106
Monday, April 20, 2009                                          106
 </li><li>Indexes are Magical
                • Solution: “MENTOR” your indexes
                                      • After creating index,
                         Measure
                                        measure again.
                         Explain      • Conﬁrm the new index
                         Nominate       made a difference.
                                      • Impress your boss!
                         Test
                                       “The new index gave a 27%
                         Optimize      performance improvement!”

                         Repair

                                     107
Monday, April 20, 2009                                             107
 </li><li>Indexes are Magical
                • Solution: “MENTOR” your indexes
                                     • Indexes are compact,
                         Measure
                                       frequently-used data.
                         Explain     • Try to cache indexes in
                         Nominate      memory:
                                      • MyISAM: key_buffer_size,
                         Test             LOAD INDEX INTO CACHE
                                      • InnoDB: innodb_buffer_pool_size
                         Optimize
                         Repair

                                    108
Monday, April 20, 2009                                                    108
 </li><li>Indexes are Magical
                • Solution: “MENTOR” your indexes
                                      • Indexes require periodic
                         Measure
                                        maintenance.
                         Explain      • Like a ﬁlesystem requires
                         Nominate       periodic defragmentation.
                                      • Analyze or rebuild
                         Test           indexes, e.g. in MySQL:
                         Optimize      • ANALYZE TABLE
                                       • OPTIMIZE TABLE
                         Repair

                                     109
Monday, April 20, 2009                                              109
 </li><li>Indexes are Magical
                • Solution: “MENTOR” your indexes
                         • Sounds like the name                    BY THE AUTHOR OF THE BESTSELLER
                                                            WHY DOESN’T MY CACHE GET ANY HITS?

                           of a “self-help” book!         William K. Karwin
                                                          MENTOR
                                                            YOUR
                                                          INDEXES
                                                            How to Break the
                                just kidding!             Bad Performance Habits
                              please don’t ask                  That Make
                            when it’s coming out!
                                                              You Miserable



                                                    110
Monday, April 20, 2009                                                                               110
 </li><li>Antipattern Categories
                          Database Design                   Database Creation
                           Antipatterns                       Antipatterns
                                                            CREATE TABLE BugsProducts (
                                                               bug_id INTEGER REFERENCES Bugs,
                                                               product VARCHAR(100) REFERENCES Products,
                                                               PRIMARY KEY (bug_id, product)
                                                            );




                                                                   Application
                                 Query
                                                                   Antipatterns
                               Antipatterns
                         SELECT b.product, COUNT(*)         $dbHandle = new PDO(‘mysql:dbname=test’);
                         FROM BugsProducts AS b             $stmt = $dbHandle-&gt;prepare($sql);
                         GROUP BY b.product;                $result = $stmt-&gt;fetchAll();




                                                      111
Monday, April 20, 2009                                                                                     111
 </li><li>Query Antipatterns

                     8. NULL antipatterns
                     9. Ambiguous Groups
                     10. Random Order
                     11. JOIN antipattern
                     12. Goldberg Machine



                                            112
Monday, April 20, 2009                            112
 </li><li>NULL Antipatterns
                    As we know, there are known knowns; there are things we know
                  we know. We also know there are known unknowns; that is to say
                 we know there are some things we do not know. But there are also
                     unknown unknowns — the ones we don't know we don't know.
                                                         — Donald Rumsfeld

                                               113
Monday, April 20, 2009                                                              113
 </li><li>NULL Antipatterns



                • Objective: handle “missing” values,
                         store them as missing, and support them in
                         queries.




                                             114
Monday, April 20, 2009                                                114
 </li><li>NULL Antipatterns



                • Antipatterns:
                         •   Use NULL as an ordinary value

                         •   Use an ordinary value as NULL




                                                115
Monday, April 20, 2009                                       115
 </li><li>NULL Antipatterns


                • Using NULL in most expressions results in
                         an unknown value.
                                                           NULL is not zero
                         SELECT NULL + 10;
                         SELECT ‘Bill’ || NULL;         NULL is not an empty string


                         SELECT FALSE OR NULL;            NULL is not FALSE




                                                  116
Monday, April 20, 2009                                                                116
 </li><li>NULL Antipatterns


                • The opposite of unknown is still unknown.
                         SELECT * FROM Bugs
                                                      which query returns bugs
                         WHERE assigned_to = 123;     that are not yet assigned?
                                                          neither query!
                         SELECT * FROM Bugs
                         WHERE NOT (assigned_to = 123);




                                             117
Monday, April 20, 2009                                                             117
 </li><li>NULL Antipatterns



                • Choosing an ordinary value in lieu of NULL:
                         UPDATE Bugs SET assigned_to = -1
                         WHERE assigned_to IS NULL;
                                                            assigned_to is a foreign key
                                                             so this value doesn’t work




                                              118
Monday, April 20, 2009                                                                     118
 </li><li>NULL Antipatterns


                • Choosing an ordinary value in lieu of NULL:
                         UPDATE Bugs SET hours = -1
                         WHERE hours IS NULL;              this makes SUM()
                                                                inaccurate
                         SELECT SUM(hours)
                         FROM Bugs                       special-case code
                         WHERE status = ‘OPEN’        you were trying to avoid
                         AND hours &lt;&gt; -1;               by prohibiting NULL




                                             119
Monday, April 20, 2009                                                           119
 </li><li>NULL Antipatterns


                • Choosing an ordinary value in lieu of NULL:
                         •   Any given value may be signiﬁcant in a column

                         •   Every column needs a different value

                         •   You need to remember or document the value
                             used for “missing” on a case-by-case basis




                                                 120
Monday, April 20, 2009                                                       120
 </li><li>NULL Antipatterns


                • Solution: use NULL appropriately
                         •   NULL signiﬁes “missing” or “inapplicable”

                         •   Works for every data type

                         •   Already standard and well-understood




                                                 121
Monday, April 20, 2009                                                   121
 </li><li>NULL Antipatterns
                • Understanding NULL in expressions
                           Expression         Expected     Actual
                             NULL = 0               TRUE   Unknown
                           NULL = 12345         FALSE      Unknown
                          NULL &lt;&gt; 12345             TRUE   Unknown
                           NULL + 12345         12345      Unknown
                           NULL || ‘string’     string’    Unknown
                           NULL = NULL              TRUE   Unknown
                          NULL &lt;&gt; NULL          FALSE      Unknown




                                              122
Monday, April 20, 2009                                               122
 </li><li>NULL Antipatterns
                • Understanding NULL in boolean expressions
                           Expression      Expected     Actual
                          NULL AND TRUE      FALSE      Unknown
                          NULL AND FALSE     FALSE       FALSE
                          NULL OR FALSE      FALSE      Unknown
                          NULL OR TRUE           TRUE    TRUE
                           NOT (NULL)            TRUE   Unknown




                                           123
Monday, April 20, 2009                                            123
 </li><li>NULL Antipatterns
                • SQL supports IS NULL predicate that
                         returns true or false, never unknown:
                         SELECT * FROM Bugs
                         WHERE assigned_to IS NULL;
                         SELECT * FROM Bugs
                         WHERE assigned_to IS NOT NULL;




                                              124
Monday, April 20, 2009                                           124
 </li><li>NULL Antipatterns
                • SQL-99 supports IS DISTINCT FROM
                         predicate that returns true or false:
                         SELECT * FROM Bugs
                         WHERE assigned_to IS DISTINCT FROM 123;
                         SELECT * FROM Bugs
                         WHERE assigned_to IS NOT DISTINCT FROM 123;
                         SELECT * FROM Bugs                MySQL operator works like
                         WHERE assigned_to &lt;=&gt; 123;        IS NOT DISTINCT FROM




                                              125
Monday, April 20, 2009                                                                 125
 </li><li>NULL Antipatterns
                • Change NULL to ordinary value on demand
                         with COALESCE():
                           SELECT COALESCE(
                            ﬁrst_name || ‘ ’ || middle_initial || ‘ ’ || last_name,
                            ﬁrst_name || ‘ ’ || last_name) AS full_name
                           FROM Accounts;
                         • Also called NVL() or ISNULL()
                           in some database brands.




                                                  126
Monday, April 20, 2009                                                                126
 </li><li>Ambiguous Groups
                         Please accept my resignation. I don’t want to belong
                                to any club that will accept me as a member.
                                                           — Groucho Marx



                                                 127
Monday, April 20, 2009                                                          127
 </li><li>Ambiguous Groups


                • Objective: perform grouping queries, and
                         include some attributes in the result
                         SELECT product_name, bug_id,
                          MAX(date_reported) AS latest
                         FROM Bugs
                         GROUP BY product_name;




                                              128
Monday, April 20, 2009                                           128
 </li><li>Ambiguous Groups
                     • Antipattern:       bug_id isn’t that of the
                         latest per product
               product_name bug_id date_reported
                 Open RoundFile      1234   2007-12-19
                                                               product_name          bug_id    latest
                 Open RoundFile      2248   2008-04-01
                                                                Open RoundFile        1234    2008-04-01
               Visual TurboBuilder   3456   2008-02-16
                                                               Visual TurboBuilder    3456    2008-02-16
               Visual TurboBuilder   4077   2008-02-10
                                                                  ReConsider          5678    2008-01-01
                   ReConsider        5678   2008-01-01
                   ReConsider        8063   2007-11-09




                                                         129
Monday, April 20, 2009                                                                                     129
 </li><li>Ambiguous Groups



                         SELECT product_name, bug_id,
                          MAX(date_reported) AS latest
                         FROM Bugs
                         GROUP BY product_name;
                                                          assume bug_id from
                                                           the same row with
                                                          MAX(date_reported)




                                              130
Monday, April 20, 2009                                                         130
 </li><li>Ambiguous Groups


                                                          what if two bug_id
                                                           both match the
                         SELECT product_name, bug_id,        latest date?
                          MAX(date_reported) AS latest
                         FROM Bugs
                         GROUP BY product_name;




                                              131
Monday, April 20, 2009                                                         131
 </li><li>Ambiguous Groups


                                                                 what bug_id
                         SELECT product_name, bug_id,        has both the earliest
                                                             and the latest date?
                          MIN(date_reported) AS earliest,
                          MAX(date_reported) AS latest
                         FROM Bugs
                         GROUP BY product_name;




                                               132
Monday, April 20, 2009                                                               132
 </li><li>Ambiguous Groups


                                                        what if no bug_id
                                                        matches this date?
                         SELECT product_name, bug_id,
                          AVG(date_reported) AS mean
                         FROM Bugs
                         GROUP BY product_name;




                                             133
Monday, April 20, 2009                                                       133
 </li><li>Ambiguous Groups

                     • The Single-Value Rule: every column
                         in the select-list must be either:
                         • Part of an aggregate expression.
                         • In the GROUP BY clause.
                         • A functional dependency of a column
                            named in the GROUP BY clause.



                                             134
Monday, April 20, 2009                                           134
 </li><li>Ambiguous Groups
                • For a given product_name, there is a single
                         value in each functionally dependent attribute.

                                 product_name bug_id date_reported
                                 Open RoundFile       1234   2007-12-19
                                                                           multiple values per
                                                                            product name
                                 Open RoundFile       2248   2008-04-01
                                Visual TurboBuilder   3456   2008-02-16        bug_id is not
                                                                          functionally dependent
                                Visual TurboBuilder   4077   2008-02-10
                                   ReConsider         5678   2008-01-01
                                   ReConsider         8063   2007-11-09



                                                      135
Monday, April 20, 2009                                                                           135
 </li><li>Ambiguous Groups
                • Solution #1: use only functionally
                         dependent attributes:
                                                 ✘
                         SELECT product_name, bug_id,
                          MAX(date_reported) AS latest
                         FROM Bugs 
                         GROUP BY product_name;

                                       product_name          latest
                                       Open RoundFile       2008-04-01
                                      Visual TurboBuilder   2008-02-16
                                         ReConsider         2008-01-01




                                                      136
Monday, April 20, 2009                                                   136
 </li><li>Ambiguous Groups
                • Solution #2: use a derived table:
                         SELECT b.product_name, b.bug_id, m.latest
                         FROM Bugs b
                         JOIN (SELECT product_name, MAX(date_reported) AS latest
                            FROM Bugs GROUP BY product_name) m
                           ON (b.product_name = m.product_name
                          AND b.date_reported = m.latest);

                                   product_name         bug_id    latest
                                   Open RoundFile         2248   2008-04-01
                                  Visual TurboBuilder     3456   2008-02-16
                                     ReConsider           5678   2008-01-01




                                                        137
Monday, April 20, 2009                                                             137
 </li><li>Ambiguous Groups
                • Solution #3: use an outer JOIN:
                         SELECT b1.product_name, b1.bug_id,
                          b1.date_reported AS latest
                         FROM Bugs b1LEFT OUTER JOIN Bugs b2
                          ON (b1.product_name = b2.product_name
                           AND b1.date_reported &lt; b2.date_reported)
                         WHERE b2.bug_id IS NULL;

                                  product_name          bug_id    latest
                                   Open RoundFile         2248   2008-04-01
                                  Visual TurboBuilder     3456   2008-02-16
                                     ReConsider           5678   2008-01-01




                                                        138
Monday, April 20, 2009                                                        138
 </li><li>Ambiguous Groups
                • Solution #4: use another aggregate:
                         SELECT product_name, MAX(date_reported) AS latest,
                          MAX(bug_id) AS latest_bug_id
                         FROM Bugs
                         GROUP BY product_name;
                                                                         if bug_id increases
                                                                       in chronological order


                                   product_name         bug_id    latest
                                   Open RoundFile         2248   2008-04-01
                                  Visual TurboBuilder     3456   2008-02-16
                                     ReConsider           5678   2008-01-01




                                                        139
Monday, April 20, 2009                                                                          139
 </li><li>Ambiguous Groups
                • Solution #5: use GROUP_CONCAT():
                         SELECT product_name,
                          GROUP_CONCAT(bug_id) AS bug_id_list,
                          MAX(date_reported) AS latest
                         FROM Bugs
                         GROUP BY product_name;


                                 product_name          bug_id_list    latest
                                  Open RoundFile       1234, 2248    2008-04-01
                                 Visual TurboBuilder   3456, 4077    2008-02-16
                                    ReConsider         5678, 8063    2008-01-01




                                                        140
Monday, April 20, 2009                                                            140
 </li><li>Random Order
            I must complain the cards are ill shufﬂed till I have a good hand.
                                                             — Jonathan Swift




                                           141
Monday, April 20, 2009                                                           141
 </li><li>Random Order




                • Objective:   select a random row




                                    142
Monday, April 20, 2009                               142
 </li><li>Random Order


                • Antipattern:            sort by random expression,
                         then return top row(s)
                         SELECT * FROM Bugs           non-indexed sort
                                                    in a temporary table
                         ORDER BY RAND()
                         LIMIT 1;
                                                      sort entire table
                                                     just to discard it?




                                              143
Monday, April 20, 2009                                                     143
 </li><li>Random Order
                • Solution #1:              pick random primary key
                         from list of all values:
                           $bug_id_list = $pdo-&gt;query(
                            ‘SELECT bug_id FROM Bugs’ )-&gt;fetchAll();
                           $rand = random(count($bug_id_list));
                           $stmt = $pdo-&gt;prepare(
                            ‘SELECT * FROM Bugs WHERE bug_id = ?’);
                           $stmt-&gt;execute( $bug_id_list[$rand][0] );
                           $rand_bug = $stmt-&gt;fetch();




                                                 144
Monday, April 20, 2009                                                  144
 </li><li>Random Order
                • Solution #1:              pick random primary key
                         from list of all values:
                            $bug_id_list = $pdo-&gt;query(
                             ‘SELECT bug_id FROM Bugs’ )-&gt;fetchAll();

                         • $bug_id_list may grow to an impractical size:
                            Fatal error: Allowed memory size of 16777216 bytes exhausted




                                                     145
Monday, April 20, 2009                                                                     145
 </li><li>Random Order
                • Solution #2:          pick random value between
                         1...MAX(bug_id); use that bug_id:
                           SELECT b1.* FROM Bugs b1
                           JOIN (SELECT CEIL(RAND() *
                            (SELECT MAX(bug_id) FROM Bugs)) rand_id) b2
                            ON (b1.bug_id = b2.rand_id);




                                              146
Monday, April 20, 2009                                                     146
 </li><li>Random Order
                • Solution #2:          pick random value between
                         1...MAX(bug_id); use that bug_id:
                         • Assumes bug_id starts at 1
                            and values are contiguous.
                         • If there are gaps, a random
                            bug_id may not match an
                            existing bug.




                                                147
Monday, April 20, 2009                                              147
 </li><li>Random Order
                • Solution #3: pick random value between
                         1...MAX(bug_id); use next higher bug_id:
                           SELECT b1.* FROM Bugs b1
                           JOIN (SELECT CEIL(RAND() *
                            (SELECT MAX(bug_id) FROM Bugs)) AS bug_id) b2
                           WHERE b1.bug_id &gt;= b2.bug_id
                           ORDER BY b1.bug_id
                           LIMIT 1;




                                              148
Monday, April 20, 2009                                                       148
 </li><li>Random Order
                • Solution #3: pick random value between
                         1...MAX(bug_id); use next higher bug_id:
                         • bug_id values after gaps
                           are chosen more often.
                         • Random values are evenly
                           distributed, but bug_id values aren’t.




                                                149
Monday, April 20, 2009                                              149
 </li><li>Random Order
                • Solution #4:          pick random row from
                         0...COUNT, regardless of bug_id values:
                           $offset = $pdo-&gt;query(
                            ‘SELECT ROUND(RAND() *
                            (SELECT COUNT(*) FROM Bugs))’ )-&gt;fetch();
                           $sql = ‘SELECT * FROM Bugs LIMIT 1 OFFSET ?’;
                           $stmt = $pdo-&gt;prepare( $sql );
                           $stmt-&gt;execute( $offset );




                                                150
Monday, April 20, 2009                                                     150
 </li><li>JOIN Antipattern



                                151
Monday, April 20, 2009                      151
 </li><li>JOIN Antipattern




                • Objective:   Design optimal queries.




                                     152
Monday, April 20, 2009                                   152
 </li><li>JOIN Antipattern


                • Antipatterns:
                         •   Senseless avoidance of JOIN.

                         •   Overzealous JOIN decomposition.

                         •   “Joins are slow!”
                                                 compared
                                                  to what?




                                                    153
Monday, April 20, 2009                                         153
 </li><li>JOIN Antipattern

                • Reasons for JOIN decomposition:
                         •   Cache and reuse earlier results
                         •   Reduce locking across multiple tables
                         •   Distribute tables across servers
                         •   Leverage IN() optimization
                         •   Reduce redundant rows
                             (result sets are denormalized)
                                                                        borrowed
                • Notice these are exception cases!                  from this book




                                                      154
Monday, April 20, 2009                                                                154
 </li><li>JOIN Antipattern
                • Example from the web (2009-4-18):
                                                            how to apply
                                                         conditions to stores?
                SELECT *,
                 (SELECT name FROM stores WHERE id = p.store_id) AS store_name,
                 (SELECT username FROM stores WHERE id = p.store_id) AS store_username,
                 (SELECT region_id FROM stores WHERE id = p.store_id) AS region_id,
                 (SELECT city_id FROM stores WHERE id = p.store_id) AS city_id,
                 (SELECT name FROM categories_sub WHERE id=p.subcategory_id) subcat_name,
                 (SELECT name FROM categories WHERE id = p.category_id) AS category_name
                FROM products p
                WHERE p.date_start &lt;= DATE(NOW()) AND p.date_end &gt;= DATE(NOW());


                                              optimizer can’t
                    six correlated
                                              reorder JOINs
                     subqueries!

                                                   155
Monday, April 20, 2009                                                                      155
 </li><li>JOIN Antipattern
                • Example revised with JOINs:

                SELECT p.*, s.name AS store_name, s.username AS store_username,
                    s.region_id, s.city_id, cs.name AS subcategory_name,
                    c.name AS category_name
                                                                  easier to
                FROM products p
                                                                  optimize
                  JOIN stores s ON (s.id = p.store_id)
                  JOIN categories c ON (c.id = p.category_id)
                  JOIN categories_sub cs ON (cs.id = p.subcategory_id)
                WHERE p.date_start &lt;= DATE(NOW()) AND p.date_end &gt;= DATE(NOW())
                  AND s.store_category = ‘preferred’;


                                    easier to
                                 apply conditions


                                                    156
Monday, April 20, 2009                                                            156
 </li><li>JOIN Antipattern
                • Example: ﬁnd an entry with three tags:
                         HAVING COUNT solution:
                         SELECT b.*
                         FROM Bugs b
                          JOIN BugsProducts p ON (b.bug_id = p.bug_id)
                         WHERE p.product_id IN (1, 2, 3)
                         GROUP BY b.bug_id
                         HAVING COUNT(*) = 3;                      must match all
                                                                     three products




                                                        157
Monday, April 20, 2009                                                                157
 </li><li>JOIN Antipattern
                • Example: ﬁnd an entry with three tags::
                         multiple-JOIN solution:
                         SELECT DISTINCT b.*
                         FROM Bugs b
                          JOIN BugsProducts p1 ON ((p1.bug_id, p1.product_id) = (b.bug_id, 1))
                          JOIN BugsProducts p2 ON ((p2.bug_id, p2.product_id) = (b.bug_id, 2))
                          JOIN BugsProducts p3 ON ((p3.bug_id, p3.product_id) = (b.bug_id, 3));



                                three joins is slower              not if indexes
                                  than one, right?                 are used well




                                                        158
Monday, April 20, 2009                                                                            158
 </li><li>JOIN Antipattern
                • Solution:
                         • JOIN is to SQL as while() is to other languages.
                         • One-size-ﬁts-all rules (e.g. “joins are slow”)
                            don’t work.
                         • Measure twice, query once.
                         • Let the SQL optimizer work.
                         • Employ alternatives (e.g. JOIN decomposition)
                            as exception cases.


                                                  159
Monday, April 20, 2009                                                        159
 </li><li>Goldberg Machine
                            Enita non sunt multiplicanda praeter necessitatem
                         (“Entities are not to be multiplied beyond necessity”).
                                                        — William of Okham



                                                   160
Monday, April 20, 2009                                                             160
 </li><li>Goldberg Machine



                • Objective:            Generate a complex report as
                         efﬁciently as possible.




                                            161
Monday, April 20, 2009                                                 161
 </li><li>Goldberg Machine


                • Example: Calculate for each account:
                         •   Count of bugs reported by user.

                         •   Count of products the user has been assigned to.

                         •   Count of comments left by user.




                                                 162
Monday, April 20, 2009                                                          162
 </li><li>Goldberg Machine

                • Antipattern: Try to generate all the
                         information for the report in a single query:
                         SELECT a.account_name,                                        expected: 3
                             COUNT(br.bug_id) AS bugs_reported,
                                                                                       expected: 2
                             COUNT(bp.product_id) AS products_assigned,
                             COUNT(c.comment_id) AS comments
                                                                                       expected: 4
                         FROM Accounts a
                           LEFT JOIN Bugs br ON (a.account_id = br.reported_by)
                           LEFT JOIN (Bugs ba JOIN BugsProducts bp ON (ba.bug_id = bp.bug_id))
                             ON (a.account_id = ba.assigned_to)
                           LEFT JOIN Comments c ON (a.account_id = c.author)
                         GROUP BY a.account_id;




                                                          163
Monday, April 20, 2009                                                                               163
 </li><li>Goldberg Machine
                • Expected result versus actual result:
                                                          products
                     account name   bugs reported                     comments
                                                          assigned

                                            48                   48          48
                         Bill         3                    2           4

                                     FAIL                 FAIL        FAIL




                                                    164
Monday, April 20, 2009                                                            164
 </li><li>Goldberg Machine
                • Run query without GROUP BY:
                         SELECT a.account_name,
                             br.bug_id AS bug_reported,
                             ba.bug_id AS bug_assigned,
                             bp.product_id AS product_assigned
                             c.comment_id
                         FROM Accounts a
                           LEFT JOIN Bugs br ON (a.account_id = br.reported_by)
                           LEFT JOIN (Bugs ba JOIN BugsProducts bp ON (ba.bug_id = bp.bug_id))
                             ON (a.account_id = ba.assigned_to)
                           LEFT JOIN Comments c ON (a.account_id = c.author);




                                                          165
Monday, April 20, 2009                                                                           165
 </li><li>Goldberg Machine
                • Query result reveals a Cartesian Product:
                         account     bug        bug      product
                                                                    comment
                          name     reported   assigned   assigned
                           Bill      1234       1234        1         6789
                           Bill      1234       1234        1         9876
                           Bill      1234       1234        1         4365
                           Bill      1234       1234        1         7698
                           Bill      1234       1234        3         6789
                           Bill      1234       1234        3         9876
                           Bill      1234       1234        3         4365
                           Bill      1234       1234        3         7698



                                                166
Monday, April 20, 2009                                                        166
 </li><li>Goldberg Machine
                • Query result reveals a Cartesian Product:
                         account     bug        bug      product
                                                                    comment
                          name     reported   assigned   assigned
                           Bill      1234       5678        1         6789
                           Bill      1234       5678        1         9876
                           Bill      1234       5678        1         4365
                           Bill      1234       5678        1         7698
                           Bill      1234       5678        3         6789
                           Bill      1234       5678        3         9876
                           Bill      1234       5678        3         4365
                           Bill      1234       5678        3         7698



                                                167
Monday, April 20, 2009                                                        167
 </li><li>Goldberg Machine
                • Query result reveals a Cartesian Product:
                         account     bug        bug      product
                                                                    comment
                          name     reported   assigned   assigned
                           Bill      2345       1234        1         6789
                           Bill      2345       1234        1         9876
                           Bill      2345       1234        1         4365
                           Bill      2345       1234        1         7698
                           Bill      2345       1234        3         6789
                           Bill      2345       1234        3         9876
                           Bill      2345       1234        3         4365
                           Bill      2345       1234        3         7698



                                                168
Monday, April 20, 2009                                                        168
 </li><li>Goldberg Machine
                • Query result reveals a Cartesian Product:
                         account     bug        bug      product
                                                                    comment
                          name     reported   assigned   assigned
                           Bill      2345       5678        1         6789
                           Bill      2345       5678        1         9876
                           Bill      2345       5678        1         4365
                           Bill      2345       5678        1         7698
                           Bill      2345       5678        3         6789
                           Bill      2345       5678        3         9876
                           Bill      2345       5678        3         4365
                           Bill      2345       5678        3         7698



                                                169
Monday, April 20, 2009                                                        169
 </li><li>Goldberg Machine
                • Query result reveals a Cartesian Product:
                         account     bug        bug      product
                                                                    comment
                          name     reported   assigned   assigned
                           Bill      3456       1234        1         6789
                           Bill      3456       1234        1         9876
                           Bill      3456       1234        1         4365
                           Bill      3456       1234        1         7698
                           Bill      3456       1234        3         6789
                           Bill      3456       1234        3         9876
                           Bill      3456       1234        3         4365
                           Bill      3456       1234        3         7698



                                                170
Monday, April 20, 2009                                                        170
 </li><li>Goldberg Machine
                • Query result reveals a Cartesian Product:
                         account     bug        bug      product
                                                                    comment
                          name     reported   assigned   assigned
                           Bill      3456       5678        1         6789
                           Bill      3456       5678        1         9876
                           Bill      3456       5678        1         4365
                           Bill      3456       5678        1         7698
                           Bill      3456       5678        3         6789
                           Bill      3456       5678        3         9876
                           Bill      3456       5678        3         4365
                           Bill      3456       5678        3         7698



                                                171
Monday, April 20, 2009                                                        171
 </li><li>Goldberg Machine
                • Visualizing a Cartesian Product:
                                       bugs
                                                                           each assigned bug
                                                      Bugs
                                     reported
                                                                          applies to 2 products




                         Accounts                     Bugs                   BugsProducts
                                           bugs                products
                                         assigned              assigned




                                                                     3 × 4 × 4 = 48
                                                    Comments
                                     comments




                                                      172
Monday, April 20, 2009                                                                            172
 </li><li>Goldberg Machine

                • Solution: Write separate queries.                                        result: 3
                         SELECT a.account_name, COUNT(br.bug_id) AS bugs_reported
                         FROM Accounts a LEFT JOIN Bugs br ON (a.account_id = br.reported_by)
                         GROUP BY a.account_id;
                                                                                         result: 2
                         SELECT a.account_name,
                            COUNT(DISTINCT bp.product_id) AS products_assigned,
                         FROM Accounts a LEFT JOIN
                            (Bugs ba JOIN BugsProducts bp ON (ba.bug_id = bp.bug_id))
                            ON (a.account_id = ba.assigned_to)
                                                                                         result: 4
                         GROUP BY a.account_id;

                         SELECT a.account_name, COUNT(c.comment_id) AS comments
                         FROM Accounts a LEFT JOIN Comments c ON (a.account_id = c.author)
                         GROUP BY a.account_id;



                                                          173
Monday, April 20, 2009                                                                                 173
 </li><li>Antipattern Categories
                          Database Design                   Database Creation
                           Antipatterns                       Antipatterns
                                                            CREATE TABLE BugsProducts (
                                                               bug_id INTEGER REFERENCES Bugs,
                                                               product VARCHAR(100) REFERENCES Products,
                                                               PRIMARY KEY (bug_id, product)
                                                            );




                                 Query                             Application
                               Antipatterns                        Antipatterns
                         SELECT b.product, COUNT(*)         $dbHandle = new PDO(‘mysql:dbname=test’);
                         FROM BugsProducts AS b             $stmt = $dbHandle-&gt;prepare($sql);
                         GROUP BY b.product;                $result = $stmt-&gt;fetchAll();




                                                      174
Monday, April 20, 2009                                                                                     174
 </li><li>Application Antipatterns

                     13. Parameter Facade
                     14. Phantom Side Effects
                     15. See No Evil
                     16. Diplomatic Immunity
                     17. Magic Beans



                                            175
Monday, April 20, 2009                              175
 </li><li>Parameter Facade



                                176
Monday, April 20, 2009                      176
 </li><li>Parameter Facade



                • Objective:         include application variables in
                         SQL statements
                         SELECT * FROM Bugs
                         WHERE bug_id IN ( $id_list );




                                                  177
Monday, April 20, 2009                                                  177
 </li><li>Parameter Facade



                • Antipattern:           Trying to use parameters
                         for complex syntax




                                            178
Monday, April 20, 2009                                              178
 </li><li>Parameter Facade


                • Interpolation can modify syntax
                         $list = ‘1234, 3456, 5678’
                         SELECT * FROM Bugs                     three values
                         WHERE bug_id IN ( $list );         separated by commas

                         SELECT * FROM Bugs
                         WHERE bug_id IN ( 1234, 3456, 5678 );




                                                      179
Monday, April 20, 2009                                                            179
 </li><li>Parameter Facade

                     • A parameter is always a single value
                         $list = ‘1234, 3456, 5678’
                         SELECT * FROM Bugs
                         WHERE bug_id IN ( ? );
                                                            one string value
                         EXECUTE USING $list;
                         SELECT * FROM Bugs
                         WHERE bug_id IN ( ‘1234, 3456, 5678’ );




                                                      180
Monday, April 20, 2009                                                         180
 </li><li>Parameter Facade


                     • Interpolation can specify identiﬁers
                         $column = ‘bug_id’
                         SELECT * FROM Bugs
                         WHERE $column = 1234;
                                                      column identiﬁer
                         SELECT * FROM Bugs
                         WHERE bug_id = 1234;




                                                181
Monday, April 20, 2009                                                   181
 </li><li>Parameter Facade

                     • A parameter is always a single value
                         $column = ‘bug_id’;
                         SELECT * FROM Bugs
                         WHERE ? = 1234;
                         EXECUTE USING $column;
                                                        one string value
                         SELECT * FROM Bugs
                         WHERE ‘bug_id’ = 1234;




                                                  182
Monday, April 20, 2009                                                     182
 </li><li>Parameter Facade


                     • Interpolation risks SQL injection
                         $id = ‘1234 or 1=1’;
                         SELECT * FROM Bugs
                         WHERE bug_id = $id;             logical
                                                       expression
                         SELECT * FROM Bugs
                         WHERE bug_id = 1234 or 1=1;




                                                183
Monday, April 20, 2009                                              183
 </li><li>Parameter Facade

                     • A parameter is always a single value
                         $id = ‘1234 or 1=1’;
                         SELECT * FROM Bugs
                         WHERE bug_id = ?;
                                                         one string value
                         EXECUTE USING $id;
                         SELECT * FROM Bugs
                         WHERE bug_id = ‘1234 or 1=1’;




                                                184
Monday, April 20, 2009                                                      184
 </li><li>Parameter Facade


                     • Preparing a SQL statement:
                         •   Parses SQL syntax

                         •   Optimizes execution plan

                         •   Retains parameter placeholders




                                                 185
Monday, April 20, 2009                                        185
 </li><li>Parameter Facade
                         SELECT                         *
                                    expr-list



                                                       bugs
                 query   FROM     simple-table

                                                                bug_id

                         WHERE                                    =
                                                     equality
                                     expr


                                                                  ?

                                                 parameter
                                                 placeholder



                                          186
Monday, April 20, 2009                                                   186
 </li><li>Parameter Facade


                     • Executing a prepared statement
                         •   Combines a supplied value for each parameter

                         •   Doesn’t modify syntax, tables, or columns

                         •   Runs query
                                                      could invalidate
                                                     optimization plan



                                               187
Monday, April 20, 2009                                                      187
 </li><li>Parameter Facade
                         SELECT                       *
                                    expr-list



                                                    bugs
                 query   FROM     simple-table

                                                             bug_id

                         WHERE                                 =
                                                  equality
                                     expr


                                                             1234

                                                 supplied
                                                  value



                                          188
Monday, April 20, 2009                                                188
 </li><li>Parameter Facade
                         SELECT                       *
                                    expr-list



                                                    bugs
                 query   FROM     simple-table

                                                             bug_id

                         WHERE                                 =
                                                  equality
                                     expr

                                                              1234
                                                             or 1=1

                                                 supplied
                                                  value



                                          189
Monday, April 20, 2009                                                189
 </li><li>Parameter Facade



                     • Interpolating into a query string
                         •   Occurs in the application, before SQL is parsed

                         •   Database server can’t tell what part is dynamic




                                                190
Monday, April 20, 2009                                                         190
 </li><li>Parameter Facade
                         SELECT                       *
                                    expr-list



                                                    bugs
                 query   FROM     simple-table

                                                             bug_id

                         WHERE                                 =
                                                  equality
                                     expr

                                                             1234


                                                 intended
                                                   value



                                          191
Monday, April 20, 2009                                                191
 </li><li>Parameter Facade
                         SELECT                       *
                                        expr-list

                                                                       bug_id
                                                     bugs
                 query   FROM         simple-table
                                                                         =
                                                            equality

                                                                       1234
                         WHERE                       OR
                                          expr
                                                                         1

                                                                         =
                                                            equality

                                  SQL injection                          1




                                              192
Monday, April 20, 2009                                                          192
 </li><li>Parameter Facade


                     • The Bottom Line:
                         •   Interpolation may change the shape of the tree

                         •   Parameters cannot change the tree

                         •   Parameter nodes may only be values




                                               193
Monday, April 20, 2009                                                        193
 </li><li>Parameter Facade


                     • Example: IN predicate                   may supply
                                                              only one value
                         SELECT * FROM bugs
                         WHERE bug_id IN ( ? );
                         SELECT * FROM bugs
                         WHERE bug_id IN ( ?, ?, ?, ? );

                                               must supply
                                            exactly four values


                                                194
Monday, April 20, 2009                                                         194
 </li><li>Parameter Facade
                  Scenario          Value                Interpolation               Parameter
                              ‘1234’               SELECT * FROM bugs       SELECT * FROM bugs
            single value
                                                   WHERE bug_id = $id;      WHERE bug_id = ?;

                                                   SELECT * FROM bugs       SELECT * FROM bugs
            multiple values   ‘1234, 3456, 5678’
                                                   WHERE bug_id IN ($list); WHERE bug_id IN ( ?, ?, ? );

                              ‘bug_id’             SELECT * FROM bugs
            column name
                                                                                        NO
                                                   WHERE $column = 1234;

                              ‘bugs’               SELECT * FROM $table
            table name
                                                                                        NO
                                                   WHERE bug_id = 1234;

                              ‘bug_id = 1234’ SELECT * FROM bugs
            other syntax
                                                                                        NO
                                              WHERE $expr;



                                                            195
Monday, April 20, 2009                                                                                     195
 </li><li>Parameter Facade


                     • Solution:
                         •   Use parameters only for individual values

                         •   Use interpolation for dynamic SQL syntax

                         •   Be careful to prevent SQL injection




                                                196
Monday, April 20, 2009                                                   196
 </li><li>Phantom Side Effects
                     Every program attempts to expand until it can read mail.
                                                       — Jamie Zawinsky




                                               197
Monday, April 20, 2009                                                          197
 </li><li>Phantom Side Effects


                     • Objective:      execute application tasks
                         with database operations
                         INSERT INTO Bugs . . .
                         ...and send email to notify me




                                                  198
Monday, April 20, 2009                                             198
 </li><li>Phantom Side Effects



                     • Antipattern:        execute external effects in
                         database triggers, stored procedures, and
                         functions




                                            199
Monday, April 20, 2009                                                   199
 </li><li>Phantom Side Effects
                     • External effects don’t obey ROLLBACK
                         1. Start transaction and INSERT

                                bug_id   description


                                                               notify of
                                                             bug_id 1234


                            insert row
                         bug_id = 1234




                                                       200
Monday, April 20, 2009                                                     200
 </li><li>Phantom Side Effects
                     • External effects don’t obey ROLLBACK
                         2. ROLLBACK

                                   bug_id   description




                                                                I got email,
                                                                but no row
                         discard
                                                                  1234?
                          row




                                                          201
Monday, April 20, 2009                                                         201
 </li><li>Phantom Side Effects
                     • External effects don’t obey transaction
                          isolation
                         1. Start transaction and INSERT
                                bug_id   description


                                                               notify of
                                                             bug_id 1234


                            insert row
                         bug_id = 1234




                                                       202
Monday, April 20, 2009                                                     202
 </li><li>Phantom Side Effects
                     • External effects don’t obey transaction
                         isolation
                         2. Email is received before row is visible
                               bug_id   description




                                                            I got email,
                           row                              but no row
                         pending                              1234?
                         commit




                                                      203
Monday, April 20, 2009                                                     203
 </li><li>Phantom Side Effects


                     • External effects run as database server user
                         •   Possible security risk                 SQL injection

                             SELECT * FROM bugs
                             WHERE bug_id = 1234
                                OR send_email(‘Buy cheap Rolex watch!’);

                         •   Auditing/logging confusion




                                                 204
Monday, April 20, 2009                                                              204
 </li><li>Phantom Side Effects


                     • Functions may crash                    missing ﬁle
                                                           causes fatal error
                         SELECT pk_encrypt(description,
                            ‘/nonexistant/private.ppk’)
                         FROM Bugs
                         WHERE bug_id = 1234;




                                                205
Monday, April 20, 2009                                                          205
 </li><li>Phantom Side Effects

                     • Long-running functions delay query
                         •   Accessing remote resources

                         •   Unbounded execution time           unresponsive
                                                                  website
                             SELECT libcurl_post(description,
                                ‘http://myblog.org/ . . .’)
                             FROM Bugs
                             WHERE bug_id = 1234;




                                                 206
Monday, April 20, 2009                                                         206
 </li><li>Phantom Side Effects


                     • Solution:
                         •   Operate only on database in triggers, stored
                             procedures, database functions

                         •   Wait for transaction to commit

                         •   Perform external actions in application code




                                                207
Monday, April 20, 2009                                                      207
 </li><li>See No Evil
                   Everyone knows that debugging is twice as hard as writing
                    a program in the ﬁrst place. So if you’re as clever as you
                        can be when you write it, how will you ever debug it?
                                                         — Brian Kernighan

                                               208
Monday, April 20, 2009                                                           208
 </li><li>See No Evil




                • Objective:   Debug errors in queries.




                                     209
Monday, April 20, 2009                                    209
 </li><li>See No Evil



                • Antipatterns:
                         •   Ignore errors in return status or exceptions.

                         •   Troubleshoot code that builds queries.




                                                  210
Monday, April 20, 2009                                                       210
 </li><li>See No Evil
                • Ignoring errors in return status:
                         $sql = “SELECT * FROM Bugs”;
                         $result = $mysqli-&gt;query( $sql );
                         $rows = $result-&gt;fetch_all();

                                             OK




                                                  211
Monday, April 20, 2009                                       211
 </li><li>See No Evil
                • Ignoring errors in return status:
                         $sql = “SELECT * FROM Bugz”;        returns FALSE


                         $result = $mysqli-&gt;query( $sql );
                         $rows = $result-&gt;fetch_all();

                                            FAIL




                                                   212
Monday, April 20, 2009                                                       212
 </li><li>See No Evil
                • Ignoring exceptions:
                         $sql = “SELECT * FROM Bugz”;
                         $stmt = $pdo-&gt;query( $sql );
                         $rows = $stmt-&gt;fetchAll();     throws PDOException

                                    NOT
                                  REACHED




                                                213
Monday, April 20, 2009                                                        213
 </li><li>See No Evil
                • Solution:            check for error status.
                         $sql = “SELECT * FROM Bugz”;
                         $result = $mysqli-&gt;query( $sql );
                         if ($result === FALSE ) {
                          log($mysqli-&gt;error());
                          return FALSE;
                         }                              don’t let it go this far!


                         $rows = $result-&gt;fetchAll();



                                                214
Monday, April 20, 2009                                                              214
 </li><li>See No Evil
                • Solution:                handle exceptions.
                         $sql = “SELECT * FROM Bugz”;
                         try {
                          $stmt = $pdo-&gt;query( $sql );
                         } catch (PDOException $e) {
                          log($stmt-&gt;errorInfo());
                          return FALSE;
                         }                           don’t let it go this far!


                         $rows = $stmt-&gt;fetchAll();



                                                      215
Monday, April 20, 2009                                                           215
 </li><li>See No Evil
                • Troubleshooting code:
                                                                      who wants to
                         $sql = ‘SELECT * FROM Bugs                    read this!?
                          WHERE summary LIKE ’%’
                          . $mysqli-&gt;quote( $feature )
                          . ‘ doesn’t work 50% of the time!%’’;
                         $result = $mysqli-&gt;query( $sql );
                         $rows = $result-&gt;fetchAll();




                                                 216
Monday, April 20, 2009                                                               216
 </li><li>See No Evil
                • Solution:            Look at the SQL, not the code!
                         $sql = ‘SELECT * FROM Bugs
                          WHERE summary LIKE ’%’
                          . $mysqli-&gt;quote( $feature )
                          . ‘ doesn’t work 50% of the time!%’’;
                                                                         the error
                         $ﬁrephp = FirePHP::getInstance(true);        is now clear!

                         $ﬁrephp-&gt;log( $sql, ‘SQL’ );
                         $result = $mysqli-&gt;query( $sql );
                         $rows = $result-&gt;fetchAll();


                                                 217
Monday, April 20, 2009                                                                217
 </li><li>Diplomatic Immunity
                           Humans are allergic to change. They love to say,
                         “We’ve always done it this way.” I try to ﬁght that.
                                        — Adm. Grace Murray Hopper



                                                 218
Monday, April 20, 2009                                                          218
 </li><li>Diplomatic Immunity



                • Objective:           Employ software development
                         “best practices.”




                                           219
Monday, April 20, 2009                                               219
 </li><li>Diplomatic Immunity



                • Antipattern:           Belief that database
                         development is “different” — software
                         development best practices don’t apply.




                                             220
Monday, April 20, 2009                                             220
 </li><li>Diplomatic Immunity


                • Solution:          Employ best practices, just like
                         in conventional application coding.
                         •   Functional testing

                         •   Documentation

                         •   Source code control




                                                   221
Monday, April 20, 2009                                                  221
 </li><li>Diplomatic Immunity
                • Functional testing
                                                   • Verify presence of
                         Tables, Views,
                                                       tables and views.
                         Columns
                                                   •   Verify they contain
                         Constraints
                                                       columns you expect.
                         Triggers
                                                   •   Verify absence of
                         Stored Procedures             tables, views, or
                                                       columns that you
                         Bootstrap Data
                                                       dropped.
                         Queries
                         ORM Classes


                                             222
Monday, April 20, 2009                                                       222
 </li><li>Diplomatic Immunity
                • Functional testing
                                                   • Try to execute updates
                         Tables, Views,
                                                       that ought to be denied
                         Columns
                                                       by constraints.
                         Constraints
                                                   •   You can catch bugs
                         Triggers                      earlier by identifying
                                                       constraints that are
                         Stored Procedures
                                                       failing.
                         Bootstrap Data
                         Queries
                         ORM Classes


                                             223
Monday, April 20, 2009                                                           223
 </li><li>Diplomatic Immunity
                • Functional testing
                                                   • Triggers can enforce
                         Tables, Views,
                                                       constraints too.
                         Columns
                                                   •   Triggers can perform
                         Constraints
                                                       cascading effects,
                         Triggers                      transform values, log
                                                       changes, etc.
                         Stored Procedures
                                                   •   You should test these
                         Bootstrap Data
                                                       scenarios.
                         Queries
                         ORM Classes


                                             224
Monday, April 20, 2009                                                         224
 </li><li>Diplomatic Immunity
                • Functional testing
                                                   • Code is more easily
                         Tables, Views,
                                                       developed, debugged,
                         Columns
                                                       and maintained in the
                         Constraints                   application layer.
                         Triggers                  •   Nevertheless, stored
                                                       procedures are useful,
                         Stored Procedures
                                                       e.g. solving tough
                         Bootstrap Data                bottlenecks.
                         Queries                   •   You should test stored
                                                       procedure code.
                         ORM Classes


                                             225
Monday, April 20, 2009                                                          225
 </li><li>Diplomatic Immunity
                • Functional testing
                                                   • Lookup tables need to
                         Tables, Views,
                                                       be ﬁlled, even in an
                         Columns
                                                       “empty” database.
                         Constraints
                                                   •   Test that the required
                         Triggers                      data are present.
                         Stored Procedures         •   Other cases exist for
                                                       initial data.
                         Bootstrap Data
                         Queries
                         ORM Classes


                                             226
Monday, April 20, 2009                                                          226
 </li><li>Diplomatic Immunity
                • Functional testing
                                                   • Application code is
                         Tables, Views,
                                                       laced with SQL queries.
                         Columns
                                                   •   Test queries for result
                         Constraints
                                                       set metadata, e.g.
                         Triggers                      columns, data types.
                         Stored Procedures         •   Test performance; good
                                                       queries can become
                         Bootstrap Data
                                                       bottlenecks, as data and
                         Queries                       indexes grow.
                         ORM Classes


                                             227
Monday, April 20, 2009                                                            227
 </li><li>Diplomatic Immunity
                • Functional testing
                                                   • Like Triggers, ORM
                         Tables, Views,
                                                    classes contain logic:
                         Columns
                                                    • Validation.
                         Constraints
                                                    • Transformation.
                         Triggers
                                                    • Monitoring.
                         Stored Procedures
                                                   • You should test these
                         Bootstrap Data             classes as you would
                                                    any other code.
                         Queries
                         ORM Classes


                                             228
Monday, April 20, 2009                                                       228
 </li><li>Diplomatic Immunity
                • Documentation
                         Entity Relation-
                         ship Diagram
                         Tables, Columns
                         Relationships
                         Views, Triggers
                         Stored Procedures
                         SQL Privileges
                         Application Code


                                             229
Monday, April 20, 2009                              229
 </li><li>Diplomatic Immunity
                • Documentation
                                                     • Purpose of each table,
                         Entity-Relationship
                                                         each column.
                         Diagram
                                                     •   Constraints, rules that
                         Tables, Columns
                                                         apply to each.
                         Relationships
                                                     •   Sample data.
                         Views, Triggers
                                                     •   List the Views, Triggers,
                         Stored Procedures               Procs, Applications, and
                                                         Users that use each.
                         SQL Privileges
                         Application Code


                                               230
Monday, April 20, 2009                                                               230
 </li><li>Diplomatic Immunity
                • Documentation
                                                     • Describe in text the
                         Entity-Relationship
                                                         dependencies between
                         Diagram
                                                         tables.
                         Tables, Columns
                                                     •   Business rules aren’t
                         Relationships                   represented fully by
                                                         declarative constraints.
                         Views, Triggers
                         Stored Procedures
                         SQL Privileges
                         Application Code


                                               231
Monday, April 20, 2009                                                              231
 </li><li>Diplomatic Immunity
                • Documentation
                                                     • Purpose of Views;
                         Entity-Relationship
                                                         who uses them.
                         Diagram
                                                     •   Usage of updatable
                         Tables, Columns
                                                         Views.
                         Relationships
                                                     •   Business rules enforced
                         Views, Triggers                 by Triggers:
                                                         • Validation
                         Stored Procedures
                                                         • Transformation
                         SQL Privileges
                                                         • Logging
                         Application Code


                                               232
Monday, April 20, 2009                                                             232
 </li><li>Diplomatic Immunity
                • Documentation
                                                     • Document the Stored
                         Entity-Relationship
                                                         Procedures as an API.
                         Diagram
                                                     •   Especially side-effects.
                         Tables, Columns
                                                     •   What problem is the
                         Relationships
                                                         procedure solving?
                         Views, Triggers                 • Encapsulation
                         Stored Procedures               • Performance
                                                         • Privileged access
                         SQL Privileges
                         Application Code


                                               233
Monday, April 20, 2009                                                              233
 </li><li>Diplomatic Immunity
                • Documentation
                                                     • Logins with speciﬁc
                         Entity-Relationship
                                                         access purposes
                         Diagram
                                                         (e.g. backup, reports).
                         Tables, Columns
                                                     •   Sets of privileges
                         Relationships                   (roles) used for
                                                         different scenarios.
                         Views, Triggers
                                                     •   Security measures.
                         Stored Procedures
                         SQL Privileges
                         Application Code


                                               234
Monday, April 20, 2009                                                             234
 </li><li>Diplomatic Immunity
                • Documentation
                                                     • Data Access Layer:
                         Entity-Relationship
                         Diagram                      • Connection params.
                                                      • Client options.
                         Tables, Columns
                                                      • Driver versions.
                         Relationships
                                                     • Object-Relational
                         Views, Triggers              Mapping (ORM):
                         Stored Procedures            • Validations, Logging,
                                                        Transformations.
                         SQL Privileges
                                                      • Special ﬁnd() methods.
                         Application Code


                                               235
Monday, April 20, 2009                                                           235
 </li><li>Diplomatic Immunity
                • Source code control
                         •   Keep database in synch with application code.

                         •   Commit portable “.SQL” ﬁles, not binaries.

                         •   Create a separate database instance for each
                             working set (each branch or revision you test).

                         •   Also commit bootstrap data and test data
                             to source control.




                                                 236
Monday, April 20, 2009                                                         236
 </li><li>Diplomatic Immunity
                • Source code control: “Migrations.”
                         •   Migrations are like version-control for the
                             database instance.

                         •   Incremental scripts for each milestone.

                         •   “Upgrade” script to apply new changes
                             (e.g. CREATE new tables).

                         •   “Downgrade” script to revert changes
                             (e.g. DROP new tables).

                         •   Database instance includes a “revision” table.

                                                  237
Monday, April 20, 2009                                                        237
 </li><li>Magic Beans
                         Essentially, all models are wrong, but some are useful.
                                                           — George E. P. Box




                                                   238
Monday, April 20, 2009                                                             238
 </li><li>Magic Beans



                • Objective:         simplify application
                         development using Object-Relational
                         Mapping (ORM) technology.




                                            239
Monday, April 20, 2009                                         239
 </li><li>Magic Beans
                • Antipattern:            equating “Model” in MVC
                         architecture with the Active Record pattern.
                         •   The Golden Hammer of data access.

                         •   “Model” used inaccurately in MVC frameworks:




                                                240
Monday, April 20, 2009                                                      240
 </li><li>Magic Beans
                • Antipattern:           Model is-a Active Record.

                                          Active
                                          Record
                                                                       inheritance (IS-A)


                            Products       Bugs             Comments




                         Controller                             View
                                          aggregation (HAS-A)

                                             241
Monday, April 20, 2009                                                                      241
 </li><li>Magic Beans
                • Bad object-oriented design:
                         •   “Model”      Active Record        inheritance (IS-A)


                         •   Models tied to database structure.                inappropriate
                                                                                  coupling

                         •   Can a Product associate to a Bug,
                             or does a Bug associate to a Product?      unclear assignment
                                                                         of responsibilities
                         •   Models expose general-purpose
                             Active Record interface,              poor encapsulation
                             not model-speciﬁc interface.



                                                 242
Monday, April 20, 2009                                                                         242
 </li><li>Magic Beans
                • Bad Model-View-Controller design                                      “T.M.I.” !!


                         •   Controller needs to know database structure.

                         •   Database changes cause code changes.                         not “DRY”


                         •   “Anemic Domain Model,” contrary to OO design.
                             http://www.martinfowler.com/bliki/AnemicDomainModel.html


                         •   Pushing Domain-layer code into Application-layer,
                             contrary to Domain-Driven Design.
                             http://domaindrivendesign.org/




                                                              243
Monday, April 20, 2009                                                                                243
 </li><li>Magic Beans
                • Bad testability design
                         •   Model coupled to Active Record;                  tests are
                                                                                slow
                             harder to test Model without database.

                         •   Database “ﬁxtures” become necessary.              tests are
                                                                              even slower
                         •   Business logic pushed to Controller;
                             harder to test Controller code.
                                                                    mocking HTTP Request,
                                                                    scraping HTML output




                                                 244
Monday, April 20, 2009                                                                      244
 </li><li>Magic Beans
                • Solution:           Model has-a Active Record(s).

                                            Active
                                            Record
                                                                              inheritance (IS-A)


                            Products         Bugs             Comments

                                                                             composition (HAS-A)

                                          BugReport
                         Controller                                   View
                                           (Model)

                                                    aggregation (HAS-A)
                                              245
Monday, April 20, 2009                                                                             245
 </li><li>Magic Beans
                • Solution:             Model has-a Active Record(s).

                         •   Models expose only domain-speciﬁc interface.

                         •   Models encapsulate complex business logic.

                         •   Models abstract the persistence implementation.

                         •   Controllers and Views are unaware of database.




                                                 246
Monday, April 20, 2009                                                         246
 </li><li>Magic Beans
                • Solution:              Model has-a Active Record(s).

                         •   Models are decoupled from Active Record.

                             •   Supports mock objects.

                             •   Supports dependency injection.

                         •   Unit-testing Models in isolation is easier &amp; faster.

                         •   Unit-testing thinner Controllers is easier.



                                                   247
Monday, April 20, 2009                                                              247
 </li><li>Magic Beans
                • Solution:            Model has-a Active Record(s).

                         •   It’s possible to follow this design,
                             even in MVC frameworks that assume
                             that Model is-a Active Record.




                                                248
Monday, April 20, 2009                                                 248
 </li><li>Antipattern Categories
                          Database Design                   Database Creation
                           Antipatterns                       Antipatterns
                                                            CREATE TABLE BugsProducts (
                                                               bug_id INTEGER REFERENCES Bugs,
                                                               product VARCHAR(100) REFERENCES Products,
                                                               PRIMARY KEY (bug_id, product)
                                                            );




                                 Query                             Application
                               Antipatterns                        Antipatterns
                         SELECT b.product, COUNT(*)         $dbHandle = new PDO(‘mysql:dbname=test’);
                         FROM BugsProducts AS b             $stmt = $dbHandle-&gt;prepare($sql);
                         GROUP BY b.product;                $result = $stmt-&gt;fetchAll();




                                                      249
Monday, April 20, 2009                                                                                     249
 </li><li>Thank You
                                       Copyright 2008-2009 Bill Karwin
                                               www.karwin.com
                                       Released under a Creative Commons 3.0 License:
                                       http://creativecommons.org/licenses/by-nc-nd/3.0/

                                         You are free to share - to copy, distribute and
                                      transmit this work, under the following conditions:
                            Attribution.                Noncommercial.          No Derivative Works.
                         You must attribute this    You may not use this work       You may not alter,
                          work to Bill Karwin.       for commercial purposes.      transform, or build
                                                                                     upon this work.




Monday, April 20, 2009                                                                                   250
 </li></ol>
</div>
<!-- disable_ad_section_end() -->
</div>
<div class="column2">
<div class="clearfix details">
<p class="author no-zNominate-only no-lead">
<a href="/billkarwin" class="userimage-link j-tooltip-bottom" title="billkarwin | These are presentations I've given at software developer conferences.  Please take a look at my book, &quot;SQL Antipatterns: Avoiding the Pitfalls of Database Programming.&quot;"><img src="http://cdn.slidesharecdn.com/profile-photo-billkarwin?1237248760" alt="Karwin Software Solutions LLC" /><span class="h-username">Karwin Software Solutions LLC</span></a>

<span class="h-section-add-contact potential-contact user-19147030"><a href="/signup?from=addcontact&from_source=http%3A%2F%2Fwww.slideshare.net%2Fbillkarwin%2Fsql-antipatterns-strike-back%3Fsrc%3Dembed" title="Follow this user" class="followAuthor ctaNormal h-action-add-contact j-tooltip-bottom" rel="nofollow">+ Follow</a></span>
</p>


<p class="stats">
<span class="stats-text"><span class="h-view-count viewCount">25655 views</span><span class="h-other-count">, 82 favs, 23 embeds</span></span> <a href="#" class="ilink h-toggle-description" rel="nofollow">more</a> 
</p>
<!-- disable_ad_section_start(weight=0.5) -->
<div class="description h-not-truncated" style="display:none">
<p>Common blunders of SQL database design, queries, and software development.  Presented as a tutorial at the MySQL Conference &amp; Expo 2009.</p>
</div>
<!-- disable_ad_section_end() -->
</div>
<div class="ad_300x25 lostchild slideview_link1_fill" style="border:0;margin:0;padding:0;width:300px"><!--
<script type="text/javascript">
  GA_googleFillSlot("slideview_link");
</script>
--></div>
<script type="text/javascript">
// <![CDATA[
if (window.slideshare_object && slideshare_object.remove_if_blank) { slideshare_object.remove_if_blank('.slideview_link1_fill'); }
// ]]>
</script>

<div class="column2Sidebar">
<div class="tabsContainer tabbox horzTabs" id="moreRelated">
<div class="tab selected related-tab h-related-tab">
<h2><a href="#relatedList" rel="nofollow">Related</a></h2>
<div class="tabContent" id="relatedList">
<ul class="clearfix moreRelated h-related-slideshows">
<li>
<a href="/billkarwin/models-for-hierarchical-data" title="Models for hierarchical data">

<span class="no-docThumbOverlay">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/modelsforhierarchicaldata-100520123959-phpapp02-thumbnail-2?1274377287" height="69" alt="Models for hierarchical data" width="92" />
</span>
<span class="h-title">Models for hierarchical data</span></a>
<span class="quiet h-stat">4076 views</span>
</li>

<li>
<a href="/billkarwin/sql-injection-myths-and-fallacies" title="Sql Injection Myths and Fallacies">

<span class="no-docThumbOverlay">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/sqlinjectionmyths-100414230731-phpapp01-thumbnail-2?1289515009" height="69" alt="Sql Injection Myths and Fallacies" width="92" />
</span>
<span class="h-title">Sql Injection Myths and Fallacies</span></a>
<span class="quiet h-stat">9069 views</span>
</li>

<li>
<a href="/datacharmer/introduction-to-mysql-3789585" title="Introduction to MySQL">

<span class="no-docThumbOverlay">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/introductiontomysql-100420092731-phpapp01-thumbnail-2?1271774416" height="69" alt="Introduction to MySQL" width="92" />
</span>
<span class="h-title">Introduction to MySQL</span></a>
<span class="quiet h-stat">740 views</span>
</li>

<li>
<a href="/techdude/mysql-connectorodbc-3696677" title="MySQL Connector/ODBC">
<img class="ieFixOverlay" src="http://public.slidesharecdn.com/images/transparent.gif?1293198789" height="69" alt="" width="92" />
<span class="docThumbOverlay">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/mysql-connectorodbc3051-thumbnail-2?1271072899" height="69" alt="MySQL Connector/ODBC" width="92" />
</span>
<span class="h-title">MySQL Connector/ODBC</span></a>
<span class="quiet h-stat">226 views</span>
</li>

<li>
<a href="/techdude/mysql-connectorodbc" title="MySQL Connector/ODBC">
<img class="ieFixOverlay" src="http://public.slidesharecdn.com/images/transparent.gif?1293198789" height="69" alt="" width="92" />
<span class="docThumbOverlay">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/mysql-connectorodbc951-thumbnail-2?1271072890" height="69" alt="MySQL Connector/ODBC" width="92" />
</span>
<span class="h-title">MySQL Connector/ODBC</span></a>
<span class="quiet h-stat">368 views</span>
</li>

<li>
<a href="/morgo/diagnosing-and-fixing-mysql-performance-problems" title="Diagnosing and Fixing MySQL Performance Problems">

<span class="no-docThumbOverlay">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/diagnosing-fixing-mysql-performance-100412151709-phpapp01-thumbnail-2?1271103517" height="69" alt="Diagnosing and Fixing MySQL Performance Problems" width="92" />
</span>
<span class="h-title">Diagnosing and Fixing MySQL Performance Problems</span></a>
<span class="quiet h-stat">1742 views</span>
</li>

<li>
<a href="/justatheory/unit-test-your-database" title="Unit Test Your Database">

<span class="no-docThumbOverlay">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/unittestyourdatabase-090521150424-phpapp02-thumbnail-2?1242937202" height="69" alt="Unit Test Your Database" width="92" />
</span>
<span class="h-title">Unit Test Your Database</span></a>
<span class="quiet h-stat">5836 views</span>
</li>

<li>
<a href="/golak/copy-of-mysql-datadictionary" title="Copy Of Mysql Datadictionary">

<span class="no-docThumbOverlay">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/copy-of-mysql-datadictionary-119847680557-2-thumbnail-2?1198469606" height="69" alt="Copy Of Mysql Datadictionary" width="92" />
</span>
<span class="h-title">Copy Of Mysql Datadictionary</span></a>
<span class="quiet h-stat">955 views</span>
</li>

<li>
<a href="/rootuser/mysql-datadictionary" title="Mysql Datadictionary">

<span class="no-docThumbOverlay">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/mysql-datadictionary-1201782507980326-3-thumbnail-2?1201775308" height="69" alt="Mysql Datadictionary" width="92" />
</span>
<span class="h-title">Mysql Datadictionary</span></a>
<span class="quiet h-stat">457 views</span>
</li>
</ul>
</div>
</div>
<div class="tab more-tab">
<h2><a href="#moreList" rel="nofollow">More by user</a></h2>
<div class="tabContent" id="moreList">
<ul class="clearfix moreRelated h-author-slideshows">
<li>
<a href="/billkarwin/requirements-the-last-bottleneck" title="Requirements the Last Bottleneck">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/requirementsthelastbottleneck-101104113343-phpapp02-thumbnail-2?1288888516" height="69" alt="Requirements the Last Bottleneck" width="92" />
<span class="h-title">Requirements the Last Bottleneck</span></a>
<span class="quiet h-stat">738 views</span>
</li>

<li>
<a href="/billkarwin/mentor-your-indexes" title="Mentor Your Indexes">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/mentoryourindexes-100921135033-phpapp01-thumbnail-2?1285095104" height="69" alt="Mentor Your Indexes" width="92" />
<span class="h-title">Mentor Your Indexes</span></a>
<span class="quiet h-stat">522 views</span>
</li>

<li>
<a href="/billkarwin/models-for-hierarchical-data" title="Models for hierarchical data">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/modelsforhierarchicaldata-100520123959-phpapp02-thumbnail-2?1274377287" height="69" alt="Models for hierarchical data" width="92" />
<span class="h-title">Models for hierarchical data</span></a>
<span class="quiet h-stat">4076 views</span>
</li>

<li>
<a href="/billkarwin/sql-injection-myths-and-fallacies" title="Sql Injection Myths and Fallacies">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/sqlinjectionmyths-100414230731-phpapp01-thumbnail-2?1289515009" height="69" alt="Sql Injection Myths and Fallacies" width="92" />
<span class="h-title">Sql Injection Myths and Fallacies</span></a>
<span class="quiet h-stat">9069 views</span>
</li>

<li>
<a href="/billkarwin/practical-full-text-search-with-my-sql" title="Practical Full Text Search in MySQL">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/practicalfulltextsearchwithmysql-091203105901-phpapp01-thumbnail-2?1259860760" height="69" alt="Practical Full Text Search in MySQL" width="92" />
<span class="h-title">Practical Full Text Search in MySQL</span></a>
<span class="quiet h-stat">7930 views</span>
</li>

<li>
<a href="/billkarwin/full-text-search-in-postgresql" title="Full Text Search In PostgreSQL">
<img class="h-thumbnail" src="http://cdn.slidesharecdn.com/fulltextsearchinpostgresql-091103175457-phpapp02-thumbnail-2?1257350979" height="69" alt="Full Text Search In PostgreSQL" width="92" />
<span class="h-title">Full Text Search In PostgreSQL</span></a>
<span class="quiet h-stat">7260 views</span>
</li>
</ul>
<a href="/billkarwin/slideshows" title="View all presentations from this user" class="viewAll h-all-by-author">View all presentations from this user</a>
</div>
</div>


</div>
<!-- 300x250 ad begins here-->
<div class="ad_300x250 adbox-outer lostchild ad_right_1"><script type="text/javascript"> 
GA_googleFillSlot("slideview_right_1"); 
</script>

<!--
<script type="text/javascript"> 
if (random_number < .5) { GA_googleFillSlot("slideview_right_1"); } 
else {  GA_googleFillSlot("slideview_right_1_exp"); } 
</script>
--></div>

<!-- 300x250 ad ends here-->

<!-- More info begins here-->
<div class="moreInfo">
<h2>About this <span class="type-string-down">presentation</span></h2>

<h3>Usage Rights</h3>
<p class="license"><a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/2.5/" title="CC Attribution-NonCommercial-NoDerivs License"><img src="http://public.slidesharecdn.com/images/CC_AttributionFinal.png?2"  title="CC Attribution-NonCommercial-NoDerivs License" alt="CC Attribution-NonCommercial-NoDerivs License" /><img src="http://public.slidesharecdn.com/images/CC_NonCommFinal.png?2"  title="CC Attribution-NonCommercial-NoDerivs License" alt="CC Attribution-NonCommercial-NoDerivs License" /><img src="http://public.slidesharecdn.com/images/CC_NoDerivesFinal.png?2"  title="CC Attribution-NonCommercial-NoDerivs License" alt="CC Attribution-NonCommercial-NoDerivs License" /></a></p>
<h3>Stats</h3>
<ul class="clearfix detailedStats stats-bottom" id="stats-bottom">
<li class="stats-favorites-count"><span class="favorites">82</span> <strong>Favorites</strong></li>
<li class="stats-comments-count"><span class="comments">6</span> <strong>Comments</strong></li>
<li class="stats-downloads-count"><span class="downloads">919</span> <strong>Downloads</strong></li>
<li class="h-stats-on-site-count"><span class="on-site">23,806</span> <strong>Views on <br />SlideShare</strong></li>
<li class="h-stats-from-embed-count"><span class="from-embed">1,849</span> <strong>Views on <br />Embeds</strong></li>
<li class="h-stats-views-count"><span class="views">25,655</span> <strong>Total Views</strong></li>
</ul>

<div id="h-top-embeds">
<h3>Embed views</h3>
<ul class="embedsList h-embeds-list-top">
<li><span class="views">824 views</span> on <em><span class="h-referer" rel="nofollow">http://jdobbie.blogspot.com</span></em></li>

<li><span class="views">451 views</span> on <em><span class="h-referer" rel="nofollow">http://www.it4business.ru</span></em></li>

<li><span class="views">144 views</span> on <em><span class="h-referer" rel="nofollow">http://www.slideshare.net</span></em></li>

<li><span class="views">139 views</span> on <em><span class="h-referer" rel="nofollow">http://www.coderholic.com</span></em></li>

<li><span class="views">66 views</span> on <em><span class="h-referer" rel="nofollow">http://moskalyuk.name</span></em></li>
</ul>
<p><a href="#" class="ilink action-moreembeds" rel="nofollow">more</a></p>
</div>
<div id="h-all-embeds">
<h3>Embed views</h3>
<ul class="embedsList h-embeds-list-all">
<li><span class="views">824 views</span> on <em><span class="h-referer" rel="nofollow">http://jdobbie.blogspot.com</span></em></li>

<li><span class="views">451 views</span> on <em><span class="h-referer" rel="nofollow">http://www.it4business.ru</span></em></li>

<li><span class="views">144 views</span> on <em><span class="h-referer" rel="nofollow">http://www.slideshare.net</span></em></li>

<li><span class="views">139 views</span> on <em><span class="h-referer" rel="nofollow">http://www.coderholic.com</span></em></li>

<li><span class="views">66 views</span> on <em><span class="h-referer" rel="nofollow">http://moskalyuk.name</span></em></li>

<li><span class="views">40 views</span> on <em><span class="h-referer" rel="nofollow">http://it4business.ru</span></em></li>

<li><span class="views">29 views</span> on <em><span class="h-referer" rel="nofollow">http://www.stetsenko.net</span></em></li>

<li><span class="views">27 views</span> on <em><span class="h-referer" rel="nofollow">http://www.blinkoftheday.com</span></em></li>

<li><span class="views">27 views</span> on <em><span class="h-referer" rel="nofollow">http://blog.meta.ua</span></em></li>

<li><span class="views">21 views</span> on <em><span class="h-referer" rel="nofollow">http://jayant7k.blogspot.com</span></em></li>

<li><span class="views">17 views</span> on <em><span class="h-referer" rel="nofollow">http://rubyrailsandwindows.blogspot.com</span></em></li>

<li><span class="views">16 views</span> on <em><span class="h-referer" rel="nofollow">http://www.kupreev.com</span></em></li>

<li><span class="views">15 views</span> on <em><span class="h-referer" rel="nofollow">http://pwfisher.com</span></em></li>

<li><span class="views">13 views</span> on <em><span class="h-referer" rel="nofollow">http://kupreev.com</span></em></li>

<li><span class="views">7 views</span> on <em><span class="h-referer" rel="nofollow">http://oo-programming.blogspot.com</span></em></li>

<li><span class="views">4 views</span> on <em><span class="h-referer" rel="nofollow">http://xss.yandex.net</span></em></li>

<li><span class="views">3 views</span> on <em><span class="h-referer" rel="nofollow">http://localhost</span></em></li>

<li><span class="views">1 views</span> on <em><span class="h-referer" rel="nofollow">http://feeds.feedburner.com</span></em></li>

<li><span class="views">1 views</span> on <em><span class="h-referer" rel="nofollow">http://209.85.229.132</span></em></li>

<li><span class="views">1 views</span> on <em><span class="h-referer" rel="nofollow">http://eddieawad.com</span></em></li>

<li><span class="views">1 views</span> on <em><span class="h-referer" rel="nofollow">http://russomi.blogspot.com</span></em></li>

<li><span class="views">1 views</span> on <em><span class="h-referer" rel="nofollow">http://web</span></em></li>

<li><span class="views">1 views</span> on <em><span class="h-referer" rel="nofollow">http://lj-toys.com</span></em></li>
</ul>
<p><a href="#" class="ilink action-lessembeds" rel="nofollow">less</a></p>
</div>
<h3>Accessibility</h3>
<p class="text-version-link">View <a href="#text-version" rel="nofollow">text version</a></p>
<h3>Additional Details</h3>
<ul>
<li class="owner-linkedin" id="slideview_on_linkedin">
Also on <a href="http://www.linkedin.com/opensocialInstallation/preview?_ch_panel_id=1&amp;_applicationId=1200&amp;trk=p_slideshare" rel="nofollow">LinkedIn</a>
</li>
<li class="h-no-api-credit">
Uploaded via <a href="/" rel="nofollow">SlideShare</a>
</li>

<li class="h-uploaded-as" style="">
Uploaded as <a href="/" class="uploaded-as-text">Adobe PDF</a>
</li>
</ul>
<!-- Flag begins here-->
<div class="flag flag-inappropriate">
<a href="/signup?from=flagss&from_source=http%3A%2F%2Fwww.slideshare.net%2Fbillkarwin%2Fsql-antipatterns-strike-back%3Fsrc%3Dembed" class="action-flag" rel="nofollow">
<span title="This presentation has been flagged" class="flagged">Flagged as inappropriate</span>
<span title="Flag this presentation as inappropriate" class="flag">Flag as inappropriate</span>
</a>
<form method="post" action="#" accept-charset="utf-8" style="display:none">
<fieldset>
<legend>Flag as inappropriate</legend>
<p>Select your reason for flagging this <span class="type-string-down">presentation</span> as inappropriate. If needed, use the <a href="/feedback" title="FeedBack" rel="nofollow">feedback</a> form to let us know more details.</p>
<select name="ia_value">
<option value="0">None</option>
<option value="1">Pornographic</option>
<option value="3">Defamatory</option>
<option value="4">Illegal/Unlawful</option>
<option value="6">Spam</option>
<option value="5">Other Terms Of Service Violation</option>





</select>
<input class="action-submit" type="submit" value="Flag" />
<a href="#" class="ilink action-cancel" rel="nofollow">Cancel</a>
</fieldset>
</form>
</div><!-- Flag ends here-->
<!-- Other issues similar to flagging begins here -->
<div>
<a href="http://www.slideshare.net/terms#dmca" rel="nofollow">File a copyright complaint</a>
</div>
<!-- End other issues -->
<!-- SuperUser actions being here-->
<!-- SuperUser actions end here-->
</div><!-- More info, part 2 ends here-->
<div class="sidebarPanel">
<div id="slideshow-categories">
<h2>Categories</h2>
<!-- disable_ad_section_start(weight=0.75) -->
<ul class="slideshow-categories">
<li class="su-category"><strong><a href="/category/entertainment">Entertainment</a></strong></li>
<li class="category"><strong><a href="/category/technology">Technology</a></strong></li>
</ul>
<!-- disable_ad_section_end() -->
</div>
<div class="slideshow-tags">
<h2>Tags</h2>
<!-- disable_ad_section_start(weight=1.0) -->
<ul class="tags">
<li><strong>
<a href="/tag/sql" rel="nofollow">sql</a>
</strong></li>

<li><strong>
<a href="/tag/mysql" rel="nofollow">mysql</a>
</strong></li>

<li><strong>
<a href="/tag/db" rel="nofollow">db</a>
</strong></li>

<li><strong>
<a href="/tag/database" rel="nofollow">database</a>
</strong></li>

<li><strong>
<a href="/tag/patterns" rel="nofollow">patterns</a>
</strong></li>

<li><strong>
<a href="/tag/antipatterns" rel="nofollow">antipatterns</a>
</strong></li>

<li><strong>
<a href="/tag/design" rel="nofollow">design</a>
</strong></li>

<li><strong>
<a href="/tag/sql-antipatterns" rel="nofollow">sql antipatterns</a>
</strong></li>

<li><strong>
<a href="/tag/performance" rel="nofollow">performance</a>
</strong></li>

<li><strong>
<a href="/tag/bill-karwin" rel="nofollow">bill karwin</a>
</strong></li>

<li><strong>
<a href="/tag/sql-antipatterns-bestpractices" rel="nofollow">sql antipatterns bestpractices</a>
</strong></li>

<li><strong>
<a href="/tag/databasedesign" rel="nofollow">databasedesign</a>
</strong></li>

<li><strong>
<a href="/tag/best" rel="nofollow">best</a>
</strong></li>

<li><strong>
<a href="/tag/rdbms" rel="nofollow">rdbms</a>
</strong></li>

<li><strong>
<a href="/tag/mysqlconf2009" rel="nofollow">mysqlconf2009</a>
</strong></li>

<li><strong>
<a href="/tag/design-patterns" rel="nofollow">design-patterns</a>
</strong></li>

<li><strong>
<a href="/tag/sql-anti-pattern" rel="nofollow">sql anti-pattern</a>
</strong></li>

<li><strong>
<a href="/tag/mysql-antipatterns" rel="nofollow">mysql antipatterns</a>
</strong></li>

<li><strong>
<a href="/tag/toread" rel="nofollow">toread</a>
</strong></li>

<li><strong>
<a href="/tag/sql-antipatterns-strikes-back" rel="nofollow">sql antipatterns strikes back</a>
</strong></li>

<li><strong>
<a href="/tag/programming" rel="nofollow">programming</a>
</strong></li>

<li><strong>
<a href="/tag/persistence" rel="nofollow">persistence</a>
</strong></li>

<li><strong>
<a href="/tag/practices" rel="nofollow">practices</a>
</strong></li>

<li><strong>
<a href="/tag/arch" rel="nofollow">arch</a>
</strong></li>

<li><strong>
<a href="/tag/sql-patterns" rel="nofollow">sql patterns</a>
</strong></li>
</ul>
<!-- disable_ad_section_end() -->
</div>


</div>
<div class="sidebarPanel">
<h2>Follow SlideShare</h2>
<ul class="socialProfiles">
<li><a href="http://twitter.com/slideshare" class="iconTwitter g-slideview" title="Follow SlideShare on Twitter" rel="nofollow">Twitter</a></li>
<li><a href="http://www.facebook.com/slideshare" class="iconFacebook g-slideview" title="Follow SlideShare on Facebook" rel="nofollow">Facebook</a></li>
<li><a href="http://blog.slideshare.net" class="iconRSS g-slideview" title="Follow SlideShare's Blog Updates">SlideShare Blog</a></li>
</ul>
</div>
<!-- right column bottom ad (block) start here  -->
<div class="ad bottom_horizontal_google_ad_banner adbox-outer lostchild no-contest-only"><!--<script type="text/javascript">
GA_googleFillSlot("slideview_bottom_300_250"); 
</script>-->

<!--
<script type="text/javascript">
if (random_number < .5){ GA_googleFillSlot("slideview_bottom_300_250"); } 
else { GA_googleFillSlot("slideview_bottom_exp");}
</script>
--></div>
<!-- right column bottom ad (block) end here  -->
</div>
</div> <!-- .column2Sidebar -->
<div class="viralShare">
<div class="clearfix viralShareItem">
<a href="http://www.slideshare.net/share/tweet/1319559/Check%20out%20this%20SlideShare%20presentation%20:%20Sql%20Antipatterns%20Strike%20Back" title="4 tweets. Tweet this to your followers on Twitter" class="tweet h-viral-tweet-button popup" rel="nofollow">
<span class="count viral-count-twitter">4</span> <span class="plurality">tweets</span>
</a>
</div>
<div class="clearfix viralShareItem">
<a href="http://www.slideshare.net/share/facebook/1319559/Check%20out%20this%20SlideShare%20presentation%20:%20Sql%20Antipatterns%20Strike%20Back" title="7 shares. Share this on Facebook" class="fbShare h-viral-facebook-button popup">
<span class="count viral-count-facebook">7</span> <span class="plurality">shares</span>
</a>
</div>
<div class="clearfix viralShareItem h-gBuzz-div">
<a href="http://www.slideshare.net/share/googlebuzz/1319559/Check%20out%20this%20SlideShare%20presentation%20:%20Sql%20Antipatterns%20Strike%20Back" title="6 shares. Share this on Google Buzz" class="gBuzz h-viral-buzz-button popup">
<span class="count viral-count-buzz">6</span> <span class="plurality">shares</span>
</a>
</div>
<div class="clearfix viralShareItem">
<a href="#fancybox-holder" title="Share this on WordPress" class="wpShare h-viral-wordpress-button fancybox inline">WordPress</a>
</div>
<div class="clearfix viralShareItem">
<a href="http://www.slideshare.net/share/blogspot/1319559" title="Share this on Blogger" class="bloggerShare h-viral-blogger-button popup">Blogger</a>
</div>
<div class="clearfix viralShareItem">
<a href="#fancybox-holder" title="More share options" class="moreLink h-viral-more-link fancybox">More <br />options</a>
</div>

</div>
<div id="fancybox-holder" style="display:none;">&nbsp;</div>
<div class="clear clearfix medRecBelowTranscript">

</div>
<div class="h-modal-signup" id="j-modal-signup" style="display:none">
<a href="/signup?from=contest&from_source=http%3A%2F%2Fwww.slideshare.net%2Fbillkarwin%2Fsql-antipatterns-strike-back%3Fsrc%3Dembed" title="trigger link for fancybox signup">modal signup</a>
</div>
<div class="clearfix footer-09">
<div class="clearfix">
<div class="sponsoredA">
<div class="sponsoredA1"><script type="text/javascript">
  GA_googleFillSlot("footer");
</script>

<!--
<script type='text/javascript'>
GA_googleFillSlot("pixel_tracker");
</script>
--></div>
</div>
<form class="headerSearch" method="get" action="/search/slideshow">
<fieldset>
<input name="searchfrom" type="hidden" value="footer" />
<span class="suggestionContainer">
<input name="q" class="text" id="search_query_bottom" type="text" value="" autocomplete="off" />
</span>
<input class="ctaStrong" type="submit" value="Search" />
</fieldset>
</form>
<div class="sponsoredB">
</div>
</div>
<div class="links">
<div class="fColumn fColumnSmall">
<ul class="linksList">
<li><strong>Learn About Us</strong></li>
<li><a href="/about" title="About us" rel="nofollow">About us</a></li>
<li><a href="/about/workatslideshare" title="Work with us" rel="nofollow">Work with us</a></li>
<li><a href="http://blog.slideshare.net" title="Our Blog">Our Blog</a></li>
<li><a href="/about/press" title="Press" rel="nofollow">Press</a></li>
<li><a href="/help" title="Get Help" rel="nofollow">GET HELP</a></li>
</ul>
</div>
<div class="fColumn fColumnMid">
<ul class="linksList">
<li><strong>Using SlideShare</strong></li>
<li><a href="/tour" title="Quick Tour" rel="nofollow">Quick Tour</a></li>
<li><a href="/terms" title="Terms of Use" rel="nofollow">Terms of Use</a></li>
<li><a href="/privacy" title="Privacy Policy" rel="nofollow">Privacy Policy</a></li>
<li><a href="/terms#dmca" title="Copyright &amp; DMCA" rel="nofollow">Copyright &amp; DMCA</a></li>
<li><a href="/community_guidelines" title="Community Guidelines" rel="nofollow">Community Guidelines</a></li>
</ul>
</div>
<div class="fColumn fColumnSmall">
<ul class="linksList">
<li><strong>SlideShare Outside</strong></li>
<li><a href="http://bit.ly/SlideshareOnFacebook" title="SlideShare for Facebook" rel="nofollow">Facebook App</a></li>
<li><a href="http://slidesha.re/SlideShareOnLinkedIn" title="SlideShare for LinkedIn" rel="nofollow">LinkedIn App</a></li>
<li><a href="/mobile" title="SlideShare Mobile" rel="nofollow">SlideShare Mobile</a></li>
</ul>
</div>
<div class="fColumn">
<ul class="linksList">
<li><strong>Pro &amp; more</strong></li>
<li><a href="/business/premium/plans?cmp_src=footer" title="Go Pro" rel="nofollow">Go Pro</a></li>
<li><a href="/business/leadshare" title="Capture Leads" rel="nofollow">Capture Leads</a></li>
<li><a href="http://premium.slideshare.net/advertise" title="Advertise with us" rel="nofollow">Advertise with us</a></li>
<li><a href="https://slideshare.wufoo.com/forms/want-to-get-featured-on-the-homepage/" title="Get featured on homepage" rel="nofollow">Get featured on homepage</a></li>
</ul>
</div>
<div class="fColumn last">
<ul class="linksList">
<li><strong>Developers &amp; API</strong></li>
<li><a href="/developers" title="Developers section" rel="nofollow">Developers section</a></li>
<li><a href="http://groups.google.com/group/slideshare-developers?lnk=srg" title="Developers Group" rel="nofollow">Developers Group</a></li>
<li><a href="/widgets/blogbadge" title="Widgets for your blog" rel="nofollow">Widgets for your blog</a></li>
</ul>
</div>
</div>
<p class="aboutSlideShare">
<span class="slideshareBoys">&nbsp;</span>
<strong>SlideShare is the world's largest community for sharing presentations.</strong> Upload and share on blogs, Twitter, Facebook or LinkedIn. 45 million people use SlideShare every month for research, sharing ideas, connecting with others, and generating business leads. SlideShare also supports documents, PDFs, and videos.
<strong><a href="/signup?footer" title="Sign up for SlideShare">Get an account</a>.</strong>
</p><!-- .aboutSlideShare -->
<p class="followSlideShare">
<a href="http://www.facebook.com/slideshare"><img src="http://public.slidesharecdn.com/images/facebook-slideshare.png?1293198789" height="33" alt="Like SlideShare on Facebook" width="110" /></a>
<a href="http://www.twitter.com/slideshare"><img src="http://public.slidesharecdn.com/images/twitter-slideshare.png?1293198789" height="27" alt="Follow SlideShare on Twitter" width="160" /></a>
</p>
<p class="copyright">&copy; <span class="h-copyright-year">2010</span> SlideShare Inc. All rights reserved.</p>
<li class="expanded action-addfav-new public-only" style="display:none">
<form method="post" action="/search/slideshow" accept-charset="utf-8">
<fieldset>
<legend>Favorited!</legend>
<label>You could add some tags too</label>
<input class="text hinted-inputfield favorite-tags j-hint-tooltip" title="separate tags by comma" type="text" value="separate tags by comma" /><br />
<label class="h-lcomments-in-fav-section">Have an opinion? Make a quick comment as well.</label>
<textarea class="comments-in-fav-section h-lcomments-in-fav-section" rows="3" cols="3"></textarea>
<input class="save submit h-fav-new-submit" type="submit" value="Post" />
<a href="#" class="ilink cancel" rel="nofollow">Cancel</a>
</fieldset>
</form>
</li><li class="expanded action-addfav-edit public-only" style="display:none">
<form method="post" action="/search/slideshow" accept-charset="utf-8">
<fieldset>
<legend>Edit your favorites</legend>
<input class="text hinted-inputfield favorite-tags j-hint-tooltip" title="separate tags by comma" type="text" value="" />
<br />
<input class="save submit" type="submit" value="Save" />
<a href="#" class="ilink cancel" rel="nofollow">Cancel</a>
</fieldset>
</form>
</li><li class="expanded action-addgrp-new public-only" style="display:none">
<form method="post" action="/search/slideshow" accept-charset="utf-8">
<fieldset>
<legend>Send to your Group / Event</legend>
<select>
<option selected="selected" value="0">Select Group / Event</option>
<optgroup label="Groups"></optgroup>
<optgroup label="Events"></optgroup>
</select>
<label>Add your message</label>
<textarea class="hinted-inputfield" rows="3" cols="7"></textarea>
<input class="save submit" type="submit" value="Send" />
<a href="#" class="ilink cancel" rel="nofollow">Cancel</a>
</fieldset>
</form>
</li></div>
</div>
<noscript>
<!-- Quantcast noscript tracking-->
<img src="http://pixel.quantserve.com/pixel/p-abU44ONrAuwk2.gif" height="1" alt="Quantcast" style="border:0;display:none" width="1" />
<!-- Comscore noscript tracking -->
<img src="http://b.scorecardresearch.com/p?c1=2&amp;c2=7400849&amp;c3=&amp;c4=&amp;c5=&amp;c6=&amp;c15=&amp;cj=1" height="1" alt=" " width="1" />
</noscript>
<script type="text/javascript">
// <![CDATA[
new Tabbox("moreRelated", { header: "h2", autosize: false, vertical: false, select: 0 });
new Tabbox("commentsNotes", { header: "h2", autosize: false, vertical: false, select: 0 });
new Tabbox("favsGroupsEvents", { header: "h2", autosize: false, vertical: false, select: 0 });
if(slideshare_object.user.owner == true && getUrlVar("show_download_info") == "true#favsGroupsEvents"){
$(".downloadsTab .downloadList-title").click();
}
(function() {
function copy(fieldname) {
var original = document.getElementById(fieldname);
var duplicate = document.getElementById(fieldname + '2');
if (original && duplicate) duplicate.value = original.value;
}
copy('embed-code');
copy('embedCodeWP');
copy('embedCodeWithoutRelated');
copy('secret-url');
})();
if (slideshare_object.ready) slideshare_object.ready();
// ]]>
</script>
<script type="text/javascript">
// <![CDATA[
slideshare_object.done = true;
// ]]>
</script>

<script id="page-load-loggedout" type="text/javascript" charset="utf-8">
// <![CDATA[
jQuery(window).load(function(){
window._gaq.push(['_trackEvent', "Pageload time", "slideview_pageload_logged_out", BrowserDetect.init(), (new Date()).getTime() - timer ]);
});
// ]]>
</script>


</body>
</html>