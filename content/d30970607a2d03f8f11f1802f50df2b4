<html>
<head>
 <title>Haskell hacking</title>
 <link rel="stylesheet" href="http://www.cse.unsw.edu.au/~dons/main.css" type="text/css" />
</head>
<body xml:lang="en" lang="en">

  <div id="nav">
      <a href="http://www.cse.unsw.edu.au/~dons/index.html"                    >home</a>
      .  <a href="http://www.cse.unsw.edu.au/~dons/contact.html"                  >contact</a>
      .  <a href="http://www.cse.unsw.edu.au/~dons/papers.html"                   >papers</a>
      .  <a href="http://www.cse.unsw.edu.au/~dons/code.html"                     >code</a>
    .  <a href="http://www.cse.unsw.edu.au/~pls" >pls</a>
    .  <a href="http://www.cse.unsw.edu.au/~dons/blog">blog</a>
    .  <a href="http://www.cse.unsw.edu.au/~dons/remains.html"                  >misc</a>
  </div>

  <div id="content">

      </ br>

      <h2><a href="http://www.cse.unsw.edu.au/~dons/blog">Haskell Hacking: a journal of Haskell programming</a></h2>

      </ br>
      <center>
      <strong>
          <a href="http://donsbot.wordpress.com/"><font
                  color="red">Haskell Hacking has moved => Go here.</font></a>
      </strong>
      </center>
      </ br>

      </ br>
      </ br>

      <center>
      <table width="90%">
          <tr valign="top">
          <td width="70%" valign="top">
<i>2007-11-26</i>
<a name="no-headaches">
<h1><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/11/26#no-headaches">No monadic headaches: multi-core concurrency is easy in Haskell</a></h1>


<p>
Over on <a href="http://scienceblogs.com/goodmath/2007/11/erlang_a_language_for_function.php">Good Math, Bad Math</a>, MarkCC writes about Erlang and Haskell:
</p>

<blockquote>
    Haskell systems don't, in general, parallelize well. They're particularly bad
    for the kind of very coarse thread-based concurrency that we need to program
    for on multi-core computers, or distributed systems.
</blockquote>

<p>
I suspect Mark hasn't written much multicore concurrent Haskell code, as he resorts
to the usual "monads are hard" argument, rather than offering example code.
However, here in the real world, concurrent programming in Haskell is pretty
much identical to Erlang, though with nicer syntax, in a more modern language.
</p>

<p>
Importantly, there are no monadic headaches involved (monads don't even enter
the picture).  And the results often <a
href="http://shootout.alioth.debian.org/gp4/benchmark.php?test=all&lang=ghc&lang2=hipe">out-perform
Erlang</a> (and most other languages), due to native code compilation with type
erasure, and better data structure support, provided by Haskell libraries
(particular for strings) simply not available in Erlang.
</p>

<p>
So let's look at the basic tools at our disposal here are:
</p>

<ul>
<li> GHC's <a href="http://www.haskell.org/ghc/dist/current/docs/users_guide/using-smp.html">SMP parallel runtime</a>
</li>
<li> <a href="http://www.haskell.org/ghc/dist/current/docs/libraries/base/Control-Concurrent.html">Control.Concurrent</a>, the basic concurrency mechanisms
</li>
</ul>

<p>
Starting first with a look at the Erlang code. Mark starts with an introduction to syntax:
</p>

<pre>
    -module(map).
    -export(map/2, two/1).

    map(F, []) -> [];
    map(F,[Car|Cdr]) ->
       NewCar = apply(F, [Car]),
       NewCdr = map(F,Cdr),
       [NewCar|NewCdr].

    two(X) -> 2*X.
</pre>

<p>
Which looks a bit like an antique Haskell, with funny numbers instead of a type
system (in the export list). Rewriting in Haskell:
</p>

<pre>    <span class='keyword'>module</span> <span class='conid'>Map</span> <span class='layout'>(</span><span class='varid'>map</span><span class='layout'>,</span> <span class='varid'>two</span><span class='layout'>)</span> <span class='keyword'>where</span>

    <span class='varid'>map</span> <span class='keyword'>_</span> <span class='conid'>[]</span>     <span class='keyglyph'>=</span> <span class='conid'>[]</span>
    <span class='varid'>map</span> <span class='varid'>f</span> <span class='layout'>(</span><span class='varid'>x</span><span class='conop'>:</span><span class='varid'>xs</span><span class='layout'>)</span> <span class='keyglyph'>=</span> <span class='varid'>f</span> <span class='varid'>x</span> <span class='conop'>:</span> <span class='varid'>map</span> <span class='varid'>f</span> <span class='varid'>xs</span>

    <span class='varid'>two</span> <span class='keyglyph'>=</span> <span class='layout'>(</span><span class='num'>2</span><span class='varop'>*</span><span class='layout'>)</span>
</pre>

<p>
Ok, so simpler and cleaner (I mean, really, using `apply' for function
application!?)
</p>

<p>
Now, let's look at the Erlang for forking a simple process, that receives
messages in a loop:
</p>

<pre>
    -module(echo).
    -export([start/0, loop/0]).

    start() ->
      spawn(echo, loop, []).

    loop() ->
       receive
          {From, Message} ->
             From ! Message,
             loop()
       end.
</pre>

<p>
This translates directly to Haskell's forkIO and MVars for communication:
We just launch the main thread here, which forks a second Haskell thread, which
in turn sits receiving messages and printing them:
</p>

<pre>    <span class='varid'>main</span> <span class='keyglyph'>=</span> <span class='keyword'>do</span>
        <span class='varid'>box</span> <span class='keyglyph'>&lt;-</span> <span class='varid'>newEmptyMVar</span>
        <span class='varid'>forkIO</span> <span class='layout'>(</span><span class='varid'>echo</span> <span class='varid'>box</span><span class='layout'>)</span>

    <span class='varid'>echo</span> <span class='varid'>c</span> <span class='keyglyph'>=</span> <span class='varid'>forever</span> <span class='varop'>$</span> <span class='keyword'>do</span>
        <span class='varid'>msg</span> <span class='keyglyph'>&lt;-</span> <span class='varid'>takeMVar</span> <span class='varid'>c</span>
        <span class='varid'>print</span> <span class='varid'>msg</span>
</pre>

<p>
'spawn' maps to 'forkIO', and Erlang's builtin message passing maps to a
communication mechanism of your choice in Haskell. We chose MVars here, but you
could also have gone with
</p>

<ul>
    <li> <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/stm-2.1.1.0/Control-Concurrent-STM-TMVar.html">Transactional memory</a>
    </li>
    <li>
    <a href="http://www.haskell.org/ghc/docs/latest/html/libraries/base-3.0.0.0/Control-Concurrent-Chan.html">Message passing channels</a>
    </li>
</ul>

<p>
To run such a threaded Haskell program across multiple cores (this coarse
gained, multicore concurrency Mark talks about), we need to nothing more than
compile in the SMP runtime:
</p>

<pre>
    $ ghc -threaded -O Concurrent.hs
</pre>

<p>
Now that's compiled to real native code, on an smp parallel runtime!  We can
run this over as many cores as we have, and GHC will schedule threads across
the cores:
</p>

<pre>
    $ ./a.out +RTS -N2
</pre>

<p>
There are no monadic headaches. Concurrent and parallel multicore programming
in Haskell is simple, efficient and easy!
</p>

<p>
Since its so easy, and has such little impact on the structure of your Haskell
programs, you can start speculatively supporting multicore hardware: your
Haskell program will utilise as many real cores as it needs, without needing to
recompile and modify the code. Just change the value of `N', and throw around
forkIO liberally, much as you would in Erlang.
</p>

<p>
So let's do something useful with this, how about a little program that
computes primes and fibonacci numbers? We'll just fork processes to compute
prime numbers and fibonacci numbers, and have the main thread lazily print
results as they're found:
</p>

<pre>    <span class='keyword'>import</span> <span class='conid'>Control</span><span class='varop'>.</span><span class='conid'>Concurrent</span><span class='varop'>.</span><span class='conid'>Chan</span>
    <span class='keyword'>import</span> <span class='conid'>Control</span><span class='varop'>.</span><span class='conid'>Concurrent</span>

    <span class='comment'>-- Fork some computation processes, print their results</span>
    <span class='varid'>main</span> <span class='keyglyph'>=</span> <span class='keyword'>do</span>
        <span class='varid'>primes</span> <span class='keyglyph'>&lt;-</span> <span class='varid'>run</span> <span class='varid'>primes</span>
        <span class='varid'>fibs</span>   <span class='keyglyph'>&lt;-</span> <span class='varid'>run</span> <span class='varid'>fibonacci</span>
        <span class='varid'>mapM_</span> <span class='varid'>print</span> <span class='varop'>$</span> <span class='varid'>zip</span> <span class='varid'>primes</span> <span class='varid'>fibs</span>

      <span class='comment'>-- fork a process, return any messages it produces as a list</span>
      <span class='keyword'>where</span>
        <span class='varid'>run</span> <span class='varid'>f</span> <span class='keyglyph'>=</span> <span class='keyword'>do</span>
            <span class='varid'>c</span> <span class='keyglyph'>&lt;-</span> <span class='varid'>newChan</span>
            <span class='varid'>l</span> <span class='keyglyph'>&lt;-</span> <span class='varid'>getChanContents</span> <span class='varid'>c</span>
            <span class='varid'>forkIO</span> <span class='layout'>(</span><span class='varid'>writeList2Chan</span> <span class='varid'>c</span> <span class='varid'>f</span><span class='layout'>)</span>
            <span class='varid'>return</span> <span class='varid'>l</span>

    <span class='comment'>-- A function to compute primes</span>
    <span class='varid'>primes</span> <span class='keyglyph'>=</span> <span class='varid'>sieve</span> <span class='keyglyph'>[</span><span class='num'>2</span><span class='keyglyph'>..</span><span class='keyglyph'>]</span>
        <span class='keyword'>where</span>
           <span class='varid'>sieve</span> <span class='layout'>(</span><span class='varid'>p</span> <span class='conop'>:</span> <span class='varid'>xs</span><span class='layout'>)</span> <span class='keyglyph'>=</span> <span class='varid'>p</span> <span class='conop'>:</span> <span class='varid'>sieve</span> <span class='keyglyph'>[</span><span class='varid'>x</span> <span class='keyglyph'>|</span> <span class='varid'>x</span> <span class='keyglyph'>&lt;-</span> <span class='varid'>xs</span><span class='layout'>,</span> <span class='varid'>x</span> <span class='varop'>`mod`</span> <span class='varid'>p</span> <span class='varop'>&gt;</span> <span class='num'>0</span><span class='keyglyph'>]</span>

    <span class='comment'>-- A function to compute fibonacci numbers</span>
    <span class='varid'>fibonacci</span> <span class='keyglyph'>=</span> <span class='num'>0</span> <span class='conop'>:</span> <span class='num'>1</span> <span class='conop'>:</span> <span class='varid'>zipWith</span> <span class='layout'>(</span><span class='varop'>+</span><span class='layout'>)</span> <span class='varid'>fibonacci</span> <span class='layout'>(</span><span class='varid'>tail</span> <span class='varid'>fibonacci</span><span class='layout'>)</span>
</pre>

<p>
Very importantly, we see our computational processes are just pure Haskell code,
and our main function is some IO skin, as usual. This is almost identical to code
you would write ignoring concurrency: nothing scary is needed to write parallel
Haskell!
</p>

<p>
Compiling this with the parallel runtime:
</p>

    <pre>
        $ ghc -threaded -O Server.hs
    </pre>

<p>
And running it on across 2 cores:
</p>

<pre>
    $ time ./Z +RTS -N2
    (2,0)
    (3,1)
    (5,1)
    (7,2)
    (11,3)
    (13,5)
    (17,8)
    (19,13)
    (23,21)
    (29,34)
    (31,55)
    (37,89)
    (41,144)
    (43,233)
    (47,377)
    (53,610)
    (59,987)
    (61,1597)
    (67,2584)
    ^C interrupted
</pre>

<p>
Easy! The key points to take away:
</p>

<ul>
  <li> parallel and concurrent code is easy in Haskell, much as in Erlang
    </li>
  <li> multi-core concurrency is well supported, out of the box
    </li>
  <li> concurrent Haskell is <a href="http://shootout.alioth.debian.org/gp4/benchmark.php?test=threadring&lang=all">damn fast</a>
    </li>
</ul>

<p>
And most importantly, there are no monadic headaches!
</p>

<p>
<a href="http://www.cse.unsw.edu.au/~dons/blog">/home</a>            :: 
<a href="http://www.cse.unsw.edu.au/~dons/blog/haskell">/haskell</a>   :: 
<a href="http://www.cse.unsw.edu.au/~dons/blog/2007/11/26#no-headaches">permalink</a> ::
<a href="http://cgi.cse.unsw.edu.au/~dons/blog/index.rss">rss</a>
</p>

</td>
<td width="30%" valign="top">

    <h1><a href="http://www.cse.unsw.edu.au/~dons/contact.html">About</a></h1>

    <h1><a href="http://www.realworldhaskell.org/blog/">Real World Haskell</a></h1>

    <center><a href="http://www.realworldhaskell.org/blog/"><img src="http://www.realworldhaskell.org/blog/wp-content/themes/mistylook-101/img/profile.jpg" alt="RWH Book Cover"></a>
    </center>

    <h1>Archives</h1>
    <ul>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2008/09">September 2008</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2008/08">August 2008</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2008/07">July 2008</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2008/06">June 2008</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2008/05">May 2008</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/11">November 2007</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/10">October 2007</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/07">July 2007</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/06">June 2007</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/05">May 2007</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/04">April 2007</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/03">March 2007</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/01">January 2007</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2006/12">December 2006</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2006/11">November 2006</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2006/10">October 2006</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2006/09">September 2006</a></li>
    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2006/08">August 2006</a></li>
    </ul>

    <h1>Recommended</h1>
    <ul>

    <li><a
        href="http://www.cse.unsw.edu.au/~dons/blog/2008/06/04#fast-fusion"
        >Working at a high altitude for low level performance</a>
    </li>

    <li><a
        href="http://cgi.cse.unsw.edu.au/~dons/blog/2008/05/16#fast"
        >Write Haskell as fast as C: exploiting strictness, laziness and recursion</a>
    </li>

    <li><a
        href="http://cgi.cse.unsw.edu.au/~dons/blog/2008/05/04#strict"
        >Haskell is a strict language</a>
    </li>

    <li><a
        href="http://cgi.cse.unsw.edu.au/~dons/blog/2007/11/29#smoking-4core"
        >Use those extra cores and beat C today!</a>
    </li>

    <li><a
        href="http://cgi.cse.unsw.edu.au/~dons/blog/2007/11/26#no-headaches"
        >No monadic headaches: multi-core concurrency is easy in Haskell</a>
    </li>

    <li><a
        href="http://cgi.cse.unsw.edu.au/~dons/blog/2007/11/14#no-exceptions">No
        more exceptions: debugging Haskell code with GHCi</a>
    </li>

    <li><a
        href="http://cgi.cse.unsw.edu.au/~dons/blog/2007/07/31#rle">Run length encoding in Haskell</a></li>

    <li><a
        href="http://cgi.cse.unsw.edu.au/~dons/blog/2007/06/02#xmonad-0.2">xmonad: a success for pure functional data and QuickCheck</a></li>

    <li><a href="http://www.cse.unsw.edu.au/~dons/blog/2007/05/17#xmonad_part1b_zipper">Tracking focus with a Zipper</a></li>

    <li><a href="http://cgi.cse.unsw.edu.au/~dons/blog/2007/05/01#xmonad_part1_model">Roll your own window manager</a></li>
    <li><a
        href="http://cgi.cse.unsw.edu.au/~dons/blog/2007/03/10#programmable-semicolons">The programmable semicolon: shell scripting and privilege separation</a></li>
    <li><a href="http://cgi.cse.unsw.edu.au/~dons/blog/2006/12/18#ph-3">Programming Haskell: argument handling</a></li>
    <li><a href="http://cgi.cse.unsw.edu.au/~dons/blog/2006/12/17#programming-haskell-part-2">Programming Haskell: string processing and concurrency</a></li>
    <li><a href="http://cgi.cse.unsw.edu.au/~dons/blog/2006/12/16#programming-haskell-intro">Programming Haskell: introduction</a></li>
    <li><a href="http://www.haskell.org/haskellwiki/Roll_your_own_IRC_bot">Roll your own IRC bot</a></li>
    <li><a href="http://www.haskell.org/haskellwiki/Simple_unix_tools">Simple unix tools</a></li>
    </ul>

    <h1>Blog Roll</h1>
    <ul>
    <li><a href="http://planet.haskell.org/">planet haskell</a></li>
    <li><a href="http://sequence.complete.org/">the haskell sequence</a></li>
    <li><a href="http://blog.well-typed.com/">well-typed</a></li>
    <li><a href="http://augustss.blogspot.com">augustss</a></li>
    <li><a href="http://blog.moertel.com">tmoertel</a></li>
    <li><a href="http://japple.blogspot.com/">japple</a></li>
    <li><a href="http://lennartkolmodin.blogspot.com">lennart</a></li>
    <li><a href="http://neilmitchell.blogspot.com">ndm</a></li>
    <li><a href="http://sigfpe.blogspot.com">sigfpe</a></li>
    <li><a href="http://www.randomhacks.net/">ekidd</a></li>
    <li><a href="http://www.serpentine.com/blog">bos</a></li>
    <li><a href="http://headrush.typepad.com/">creating passionate users</a></li>
    </ul>

    <h1>Syndicate</h1>
    <ul>
        <li>
        <a href="http://cgi.cse.unsw.edu.au/~dons/blog/index.rss">rss</a>
        </li>
    </ul>


    </td>
    </tr>
    </table>
</center>
    </ br>
    </ br>

  </div>


  <div id="footer">
<a href="http://www.blosxom.com/">blosxom</a>

.

<a href="http://cgi.cse.unsw.edu.au/~dons/blog/index.rss">rss</a>

.

<a href="http://cgi.cse.unsw.edu.au/~dons/blog">blog</a>
  </div>

</body>
</html>
