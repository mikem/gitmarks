<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<link rel="search" href="http://clojure.org/space/opensearch" type="application/opensearchdescription+xml" title="Wikispaces Search (clojure Wiki)" />
<link rel="alternate" type="application/x-wiki" title="Edit This Page" href="/page/edit/cheatsheet" />
<link rel="alternate" title="Clojure : cheatsheet - Edits" href="/page/xml/cheatsheet?v=rss_2_0" type="application/rss+xml" />
<link rel="alternate" title="Clojure : cheatsheet - Discussion" href="/message/xml/cheatsheet?v=rss_2_0" type="application/rss+xml" />
<link rel="alternate" title="Clojure - All Changes" href="/space/xmla?v=rss_2_0" type="application/rss+xml" />
<link rel="microsummary" href="/page/microsummary/cheatsheet/edits"/>
<link rel="microsummary" href="/page/microsummary/cheatsheet/messages"/>
<script type="text/javascript">
var wikispaces_isUserLoggedIn = false;
var wikispaces_isMain = true;
var wikispaces_username = '';
var wikispaces_spaceName = 'clojure';
var wikispaces_method = 'view';
var wikispaces_object = 'page';
var wikispaces_page = 'cheatsheet';
var wikispaces_id = '';
var wikispaces_domain = 'wikispaces.com';
var wikispaces_main_domain = 'wikispaces.com';
var wikispaces_asset_url_prefix = 'http://c1.wikicdn.com';
</script>
	<title>Clojure - cheatsheet</title>
	<link rel="icon" href="/space/showimage/favicon.png">
	<link rel="shortcut icon" href="/space/showimage/favicon.png">
	<link rel="stylesheet" href="http://c1.wikicdn.com/s/nogz/qvv3kx73-theme_common.css" type="text/css" />
	<link rel="stylesheet" href="/file/view/Clojure.css" type="text/css" media="all" />
	<link rel="stylesheet" href="/file/view/print.css" type="text/css" media="print" />
	<script type="text/javascript" src="/file/view/code_highlighter.js"></script>
	<script type="text/javascript" src="/file/view/clojure.js"></script>
	<style>.menuWrapper{height: 36px;}
		#wsMainEditor_external {position: fixed !important; top: 0 !important;}
	</style>
<link rel="stylesheet" href="http://clojure.org/stylesheet/view/clojure/26467729A.css" type="text/css" />
<link rel="stylesheet" href="http://c1.wikicdn.com/s/nogz/qkz33220-internal.css" type="text/css" />
<!--[if lte IE 6]>
<link rel="stylesheet" href="http://c1.wikicdn.com/s/nogz/jkqj31z6-internal_ie.css" type="text/css" />
<![endif]-->
<script src="http://c1.wikicdn.com/s/nogz/5j582684-common.min.js" type="text/javascript"></script>

<script type="text/javascript">
  var _gaq = _gaq || [];

  var wsGoogleAccount = 'UA-80504-1';
  _gaq.push(['_setAccount', wsGoogleAccount]);
  _gaq.push(['_gat._anonymizeIp']);
  _gaq.push(['_setDomainName', 'none']);
  _gaq.push(['_setAllowLinker', true]);
  _gaq.push(['_setAllowHash', false]);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<style type="text/css">#contentEditButton { display: none; }</style></head>
<body id="cheatsheet">
		<div id="AllContentContainer">
		<div id="Header">
			<a href="/" id="Logo"><img src="/space/showimage/clojure-icon.gif" width="100" height="100" alt="Clojure" /></a>
			<h1><a href="/" title="Clojure">Clojure</a></h1>
			<div id="Resources">
				<form action="/search/view" method="post" class="WikiSearch WikiElement">
					<input class="WikiSearchInput" name="q" id="q" size="10" value="" type="text">
					<input name="search" id="search" value="Search" alt="Search" type="submit">
				</form>
				<ul id="ResourcesB">
					<li><a class="wiki_link_ext" href="http://www.assembla.com/spaces/clojure" rel="nofollow">Dev</a></li>
					<li><a class="wiki_link_ext" href="irc://irc.freenode.net/#clojure" rel="nofollow">IRC</a>
						<li><a class="wiki_link_ext" href="http://clojure.blogspot.com/" rel="nofollow">News</a></li>
						<li><a class="wiki_link_ext" href="http://en.wikibooks.org/wiki/Clojure_Programming" rel="nofollow">Wiki</a></li>
					</ul>
					<ul id="ResourcesA">
						<li><a class="wiki_link_ext" href="/downloads" rel="nofollow">Download</a></li>
						<li><a class="wiki_link_ext" href="http://groups.google.com/group/clojure" rel="nofollow">Google Group</a></li>
						<li><a class="wiki_link_ext" href="http://clojure.blip.tv/" rel="nofollow">Screencasts</a></li>
						<li><a class="wiki_link_ext" href="http://github.com/clojure/clojure-contrib" rel="nofollow">Contrib Libraries</a></li>
					</li>
				</div>
			</div>
			<div id="leftcolumn">
				<div class="menu">
					<!-- google_ad_section_start --><div class="WikiCustomNav WikiElement wiki"><a class="wiki_link" href="/rationale">Rationale</a><br />
<a class="wiki_link" href="/state">On State and Identity</a><br />
<a class="wiki_link" href="/features">Features</a><br />

<ul>
    <li><a class="wiki_link" href="/dynamic">Dynamic Development</a></li>
    <li><a class="wiki_link" href="/functional_programming">Functional Programming</a></li>
    <li><a class="wiki_link" href="/lisp">Lisp</a></li>
    <li><a class="wiki_link" href="/runtime_polymorphism">Runtime Polymorphism</a></li>
    <li><a class="wiki_link" href="/concurrent_programming">Concurrent Programming</a></li>
    <li><a class="wiki_link" href="/jvm_hosted">Hosted on the JVM</a></li>
</ul>

<a class="wiki_link" href="/Reference">Reference</a><br />

<ul>
    <li><a class="wiki_link" href="/getting_started">Getting Started</a></li>
    <li><a class="wiki_link" href="/reader">The Reader</a></li>
    <li><a class="wiki_link" href="/repl_and_main">The REPL and main</a></li>
    <li><a class="wiki_link" href="/evaluation">Evaluation</a></li>
    <li><a class="wiki_link" href="/special_forms">Special Forms</a></li>
    <li><a class="wiki_link" href="/macros">Macros</a></li>
    <li><a class="wiki_link" href="/other_functions">Other Functions</a></li>
    <li><a class="wiki_link" href="/data_structures">Data Structures</a></li>
    <li><a class="wiki_link" href="/datatypes">Datatypes</a></li>
    <li><a class="wiki_link" href="/sequences">Sequences</a></li>
    <li><a class="wiki_link" href="/multimethods">Multimethods and Hierarchies </a></li>
    <li><a class="wiki_link" href="/Protocols">Protocols</a></li>
    <li><a class="wiki_link" href="/metadata">Metadata</a></li>
    <li><a class="wiki_link" href="/namespaces">Namespaces</a></li>
    <li><a class="wiki_link" href="/libs">Libs</a></li>
    <li><a class="wiki_link" href="/vars">Vars and Environment</a></li>
    <li><a class="wiki_link" href="/refs">Refs and Transactions</a></li>
    <li><a class="wiki_link" href="/agents">Agents</a></li>
    <li><a class="wiki_link" href="/atoms">Atoms</a></li>
    <li><a class="wiki_link" href="/java_interop">Java Interop</a></li>
    <li><a class="wiki_link" href="/compilation">Compilation and Class Generation</a></li>
    <li><a class="wiki_link" href="/other_libraries">Other Libraries</a></li>
    <li><a class="wiki_link" href="/lisps">Differences with Lisps</a></li>
    <li><a class="wiki_link_ext" href="http://clojure.github.com/clojure/" rel="nofollow">API</a></li>
    <li><a class="wiki_link" href="/cheatsheet">Cheat Sheet</a></li>
    <li><a class="wiki_link_ext" href="http://clojure.org/space/changes" rel="nofollow">Recent Changes</a></li>
</ul>

<a class="wiki_link" href="/libraries">Libraries</a><br />
<a class="wiki_link" href="/community">Community</a><br />
<a class="wiki_link" href="/Jobs">Jobs</a><br />
<a class="wiki_link" href="/license">License</a><br />
<a class="wiki_link" href="/contributing">Contributing</a></div><!-- google_ad_section_end -->				</div>
			</div>
			<!-- /leftcolumn -->
			<div id="rightcolumn">
				<div id="WikiNoticeJs" class="WikiNotice WikiElement" style="display: none"></div>				<div id="Content">
					<div class="contentBox"><div class="innerContentBox"><div id="WikiAdMargin" style="">

  <div class="WikispacesContent" id="WikiPageInfo" style="display: none;">
<div class="WikiPageInfo greyBox">
<table class="noborder fullWidth">
<tr>
  <th>Details</th>
  <td>
      last edit by <a class="userLink" href="http://www.wikispaces.com/user/view/puredanger" style="outline: none;"><img src="http://c1.wikicdn.com/i/user_none_sm.jpg" width="16" height="16" alt="puredanger" class="userPicture" /> </a> <a class="userLink" href="http://www.wikispaces.com/user/view/puredanger" style="outline: none;">puredanger</a> <a href="/page/diff/cheatsheet/186273307">Dec 7, 2010 10:32 pm</a> -
  <a href="/page/history/cheatsheet">19 revisions</a>
  </td>
<td class="alignRight"><a href="#" onclick="toggleDetails(); return false;"><img src="http://c1.wikicdn.com/i/w/W_close.gif" alt="hide details" title="hide details" /></a></td>
</tr>

<tr>
  <th>Tags</th>
  <td>
                  <form action="#" name="WikiTagForm" class="WikiTagForm WikiTokenAutocomplete"><input type="hidden" name="wikispacesFormToken" value="3e73f90394ebfaf6d72afbcbb76d5de748d4e3c7"/>
  <div class="WikiTagList medgrey">
        <ul>
          <li>none</li>
        </ul>
      </div>
  </form>  </td>
</tr>
</table>
</div>
</div>
  <textarea id="autosaveContent" style="display:none;" rows="1" cols="1"></textarea>
  <div id="autosavePrompt" style="display:none;"></div>

  <div class="wiki wikiPage" id="content_view">
      <div id="contentEditButton">
<img alt="Protected" title="You do not have permission to edit this page." src="http://c1.wikicdn.com/i/edit_nopermission.png" style="float: right; margin: 0 0 .5em .5em;" width="128" height="37" />
</div>    <!-- google_ad_section_start -->
  <h1 id="toc0"><a name="Clojure Cheat Sheet" style="display: inline-block;"></a>Clojure Cheat Sheet</h1>
 <a class="wiki_link_ext" href="http://clojure.org/file/view/clojure-cheat-sheet-a4.pdf/186272905/clojure-cheat-sheet-a4.pdf" rel="nofollow">Download PDF version</a><br />
<br />
<script language="JavaScript" type="text/javascript">
//<![CDATA[
document.write('<style type="text/css">  @media screen {      .page {        width: 600px; display: inline;      }  .gap {clear: both;}    }    code {      font-family: monospace;    }    .page {      clear: both;      page-break-after: always;      page-break-inside: avoid;    }    .column {      float: left;      width: 50%;    }    .header {      text-align: center;    }    .header h2 {      font-style: italic;    }    h1 {      font-size: 1.8em;    }    h2 {      font-size: 1.4em;    }    h3 {      font-size: 1.2em;    }    .section {      margin: 0.5em;      padding: 0.5em;      padding-top: 0;      background-color: #ebebeb;    }    table {      width: 100%;      border-collapse: collapse;    }    td, .single_row {      padding: 0 0.5em;      vertical-align: top;    }    tr.odd, .single_row {      background-color: #f5f5f5;    }    tr.even {      background-color: #fafafa;    }    .footer {      float: right;      text-align: right;      border-top: 1px solid gray;    } #foot {clear: both;}  <\/style>')
//]]>
</script>
<div class="page">
<div class="column">
<div class="section">
<h2>Documentation</h2>
<div class="single_row"><code>doc find-doc source</code> (clojure.contrib.repl-utils)</div>
</div>
<div class="section">
<h2>Primitives</h2>
<h3>Numbers</h3>
<table>
<tr class="odd">
<td>Arithmetic</td>
<td><code>+ - * / quot rem mod inc dec min max</code></td>
</tr>
<tr class="even">
<td>Compare</td>
<td><code>= == not= &lt; &gt; &lt;= &gt;=</code></td>
</tr>
<tr class="odd">
<td>Bitwise</td>
<td><code>bit-{and, or, xor, not, flip, set, shift-right, shift-left, and-not, clear, test}</code></td>
</tr>
<tr class="even">
<td>Cast</td>
<td><code>byte short int long float double bigint bigdec num rationalize</code></td>
</tr>
<tr class="odd">
<td>Test</td>
<td><code>nil? identical? zero? pos? neg? even? odd?</code></td>
</tr>
<tr class="even">
<td>Random</td>
<td><code>rand rand-int</code></td>
</tr>
<tr class="odd">
<td>BigInt</td>
<td><code>with-precision</code></td>
</tr>
<tr class="even">
<td>Unchecked</td>
<td><code>unchecked-{add, dec, divide, inc, multiply, negate, remainder, subtract}</code></td>
</tr>
</table>
<h3>Strings</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>str print-str println-str pr-str prn-str with-out-str</code></td>
</tr>
<tr class="even">
<td>Use</td>
<td><code>count get subs format</code></td>
</tr>
<tr class="odd">
<td>Cast/test</td>
<td><code>char char? string?</code></td>
</tr>
</table>
<h3>Characters</h3>
<div class="single_row"><code>char char-name-string char-escape-string</code></div>
<h3>Keywords</h3>
<div class="single_row"><code>keyword keyword?</code></div>
<h3>Symbols</h3>
<div class="single_row"><code>symbol symbol? gensym</code></div>
</div>
<div class="section">
<h2>Collections</h2>
<h3>Collections</h3>
<table>
<tr class="odd">
<td>Generic Ops</td>
<td><code>count empty not-empty into conj</code></td>
</tr>
<tr class="even">
<td>Content Tests</td>
<td><code>contains? distinct? empty? every? not-every? some not-any?</code></td>
</tr>
<tr class="odd">
<td>Capabilities</td>
<td><code>sequential? associative? sorted? counted? reversible?</code></td>
</tr>
<tr class="even">
<td>Type Tests</td>
<td><code>coll? seq? vector? list? map? set?</code></td>
</tr>
</table>
<h3>Lists</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>'() list list*</code></td>
</tr>
<tr class="even">
<td>As stack</td>
<td><code>peek pop</code></td>
</tr>
<tr class="odd">
<td>Examine</td>
<td><code>first rest peek list?</code></td>
</tr>
<tr class="even">
<td>'Change'</td>
<td><code>cons conj</code></td>
</tr>
</table>
<h3>Vectors</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>[] vector vec vector-of</code></td>
</tr>
<tr class="even">
<td>Examine</td>
<td><code>get nth peek rseq vector?</code></td>
</tr>
<tr class="odd">
<td>'Change'</td>
<td><code>assoc pop subvec replace conj</code></td>
</tr>
</table>
<h3>Sets</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>#{} hash-set sorted-set set get conj disj contains? count seq</code></td>
</tr>
<tr class="even">
<td>Operations</td>
<td><code>union difference intersection</code></td>
</tr>
<tr class="odd">
<td>Rel. Algebra</td>
<td><code>select index rename join project map-invert rename-keys</code></td>
</tr>
</table>
<h3>Maps</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>{} hash-map array-map zipmap sorted-map sorted-map-by bean frequencies</code></td>
</tr>
<tr class="even">
<td>'Change'</td>
<td><code>assoc assoc-in dissoc zipmap merge merge-with select-keys update-in</code></td>
</tr>
<tr class="odd">
<td>Examine</td>
<td><code>get get-in contains? find keys vals map?</code></td>
</tr>
<tr class="even">
<td>Entry</td>
<td><code>key val</code></td>
</tr>
<tr class="odd">
<td>Sorted Maps</td>
<td><code>rseq subseq rsubseq</code></td>
</tr>
</table>
</div>
</div>
<div class="column">
<div class="section">
<h3>StructMaps</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>defstruct create-struct accessor</code></td>
</tr>
<tr class="even">
<td>Individual</td>
<td><code>struct-map struct</code></td>
</tr>
<tr class="odd">
<td>Use</td>
<td><code>get assoc</code></td>
</tr>
</table>
<h3>Transients</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>transient persistent!</code></td>
</tr>
<tr class="even">
<td>Use</td>
<td><code>conj! pop! assoc! dissoc! disj!</code></td>
</tr>
<tr class="odd">
<td>'Change'</td>
<td><code>conj concat distinct group-by partition partition-all partition-by split-at split-with filter remove replace shuffle</code></td>
</tr>
<tr class="even">
<td>Iteration</td>
<td><code>for doseq map map-indexed mapcat reduce reductions max-key min-key doall dorun</code></td>
</tr>
</table>
<h3>Misc</h3>
<table>
<tr class="odd">
<td>Compare</td>
<td><code>= == identical? not= not</code></td>
</tr>
<tr class="even">
<td>Test</td>
<td><code>true? false? nil?</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Sequences</h2>
<h3>Creating a Lazy Seq</h3>
<table>
<tr class="odd">
<td>From collection</td>
<td><code>seq vals keys rseq subseq rsubseq</code></td>
</tr>
<tr class="even">
<td>From producer fn</td>
<td><code>lazy-seq repeatedly iterate</code></td>
</tr>
<tr class="odd">
<td>From constant</td>
<td><code>repeat replicate range</code></td>
</tr>
<tr class="even">
<td>From other</td>
<td><code>file-seq line-seq resultset-seq with-out-str Use count get subs format re-seq tree-seq xml-seq iterator-seq enumeration-seq</code></td>
</tr>
<tr class="odd">
<td>From seq</td>
<td><code>keep keep-indexed</code></td>
</tr>
</table>
<h3>Seq in, Seq out</h3>
<table>
<tr class="odd">
<td>Get shorter</td>
<td><code>distinct filter remove for</code></td>
</tr>
<tr class="even">
<td>Get longer</td>
<td><code>cons conj concat lazy-cat mapcat cycle interleave interpose</code></td>
</tr>
<tr class="odd">
<td>Tail items</td>
<td><code>rest fnext nnext drop drop-while nthrest for</code></td>
</tr>
<tr class="even">
<td>Head items</td>
<td><code>take take-nth take-while take-last butlast drop-last for</code></td>
</tr>
<tr class="odd">
<td>'Change'</td>
<td><code>conj concat distinct group-by partition partition-all partition-by split-at split-with filter remove replace shuffle</code></td>
</tr>
<tr class="even">
<td>Rearrange</td>
<td><code>reverse sort sort-by</code></td>
</tr>
<tr class="odd">
<td>Process each item</td>
<td><code>map pmap map-indexed mapcat for replace seque</code></td>
</tr>
<tr class="even">
<td>Un-lazy seq</td>
<td><code>sequence</code></td>
</tr>
</table>
<h3>Using a Seq</h3>
<table>
<tr class="odd">
<td>Extract item</td>
<td><code>first second last rest next ffirst rfirst nfirst fnext nnext nth nthnext rand-nth when-first max-key min-key</code></td>
</tr>
<tr class="even">
<td>Construct coll</td>
<td><code>zipmap into reduce reductions set vec into-array to-array-2d</code></td>
</tr>
<tr class="odd">
<td>Pass to fn</td>
<td><code>apply</code></td>
</tr>
<tr class="even">
<td>Search</td>
<td><code>some filter</code></td>
</tr>
<tr class="odd">
<td>Force evaluation</td>
<td><code>doseq dorun doall</code></td>
</tr>
</table>
</div>
<div class="section">
<h3>Zippers (clojure.zip)</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>zipper</code></td>
</tr>
<tr class="even">
<td>Get zipper</td>
<td><code>seq-zip vector-zip xml-zip</code></td>
</tr>
<tr class="odd">
<td>Get location</td>
<td><code>up down left right leftmost rightmost</code></td>
</tr>
<tr class="even">
<td>Get seq</td>
<td><code>lefts rights path children</code></td>
</tr>
<tr class="odd">
<td>'Change'</td>
<td><code>make-node replace edit insert-child insert-left insert-right append-child remove</code></td>
</tr>
<tr class="even">
<td>Move</td>
<td><code>next prev</code></td>
</tr>
<tr class="odd">
<td>Misc</td>
<td><code>root node branch? end?</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Printing</h2>
<table>
<tr class="odd">
<td>Print to *out*</td>
<td><code>pr prn print printf println newline</code></td>
</tr>
<tr class="even">
<td>Print to string</td>
<td><code>pr-str prn-str print-str println-str with-out-str</code></td>
</tr>
</table>
</div>
</div>
</div>
<div class="gap">&nbsp;</div>
<div class="page">
<div class="column">
<div class="section">
<h2>Functions</h2>
<table>
<tr class="odd">
<td>Create</td>
<td><code>fn defn defn- definline identity constantly memfn comp complement partial juxt memoize</code></td>
</tr>
<tr class="even">
<td>Call</td>
<td><code>-&gt; -&gt;&gt; apply</code></td>
</tr>
<tr class="odd">
<td>Test</td>
<td><code>fn? ifn?</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Multimethods</h2>
<table>
<tr class="odd">
<td>Create</td>
<td><code>defmulti defmethod</code></td>
</tr>
<tr class="even">
<td>Dispatch</td>
<td><code>get-method methods</code></td>
</tr>
<tr class="odd">
<td>Remove</td>
<td><code>remove-method remove-all-methods</code></td>
</tr>
<tr class="even">
<td>Prefer</td>
<td><code>prefer-method prefers</code></td>
</tr>
<tr>
<td>Relation</td>
<td><code>derive isa? parents ancestors descendants make-hierarchy</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Macros</h2>
<table>
<tr class="odd">
<td>Create</td>
<td><code>defmacro definline macroexpand-1 macroexpand</code></td>
</tr>
<tr class="even">
<td>Branch</td>
<td><code>and or when when-not when-let when-first if-not if-let cond condp</code></td>
</tr>
<tr class="odd">
<td>Loop</td>
<td><code>for doseq dotimes while</code></td>
</tr>
<tr class="even">
<td>Arrange</td>
<td><code>.. doto -&gt;</code></td>
</tr>
<tr class="odd">
<td>Scopes</td>
<td><code>binding locking time with-in-str with-local-vars with-open with-out-str with-precision</code></td>
</tr>
<tr class="even">
<td>Lazy</td>
<td><code>lazy-cat lazy-cons delay</code></td>
</tr>
<tr class="odd">
<td>Document</td>
<td><code>assert comment doc</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Reader Macros</h2>
<table>
<tr class="odd">
<td><code>'</code></td>
<td>Quote: <code>'<var>form</var></code> → <code>(quote <var>form</var>)</code></td>
</tr>
<tr class="even">
<td><code>\</code></td>
<td>Character literal</td>
</tr>
<tr class="odd">
<td><code>;</code></td>
<td>Single line comment</td>
</tr>
<tr class="even">
<td><code>^</code></td>
<td>Meta: <code>^<var>form</var></code> → <code>(meta <var>form</var>)</code></td>
</tr>
<tr class="odd">
<td><code>@</code></td>
<td>Deref: <code>@<var>form</var></code> → <code>(deref <var>form</var>)</code></td>
</tr>
<tr class="even">
<td><code>`</code></td>
<td>Syntax-quote</td>
</tr>
<tr class="odd">
<td><code>~</code></td>
<td>Unquote</td>
</tr>
<tr class="even">
<td><code>~@</code></td>
<td>Unquote-splicing</td>
</tr>
<tr class="odd">
<td><code>#"<var>p</var>"</code></td>
<td>Regex Pattern <var>p</var></td>
</tr>
<tr class="even">
<td><code>#^</code></td>
<td>Metadata <!--<code>#^<var>data</var> <var>form</var></code> &#x2192; <code>(with-meta <var>form</var> <var>data</var>)</code>--></td>
</tr>
<tr class="odd">
<td><code>#'</code></td>
<td>Var quote: <code>#'<var>x</var></code> → <code>(var <var>x</var>)</code></td>
</tr>
<tr class="even">
<td><code>#()</code></td>
<td><code>#(...)</code> → <code>(fn [args] (...))</code></td>
</tr>
<tr class="odd">
<td><code>#_</code></td>
<td>Ignore next form</td>
</tr>
</table>
</div>
<div class="section">
<h2>Vars and global environment</h2>
<table>
<tr class="odd">
<td>Def variants</td>
<td><code>defn defn- definline defmacro defmethod defmulti defonce defstruct</code></td>
</tr>
<tr class="even">
<td>Interned vars</td>
<td><code>declare intern binding find-var var</code></td>
</tr>
<tr class="odd">
<td>Var objects</td>
<td><code>with-local-vars var-get var-set alter-var-root var?</code></td>
</tr>
<tr class="even">
<td>Var validators</td>
<td><code>set-validator get-validator</code></td>
</tr>
<tr class="odd">
<td>Var metadata</td>
<td><code>doc find-doc test</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Namespace</h2>
<table>
<tr class="odd">
<td>Current</td>
<td><code>*ns*</code></td>
</tr>
<tr class="even">
<td>Create</td>
<td><code>in-ns ns create-ns</code></td>
</tr>
<tr class="odd">
<td>Switch</td>
<td><code>in-ns ns create-ns</code></td>
</tr>
<tr class="even">
<td>Add</td>
<td><code>alias def import intern refer</code></td>
</tr>
<tr class="odd">
<td>Find</td>
<td><code>all-ns find-ns</code></td>
</tr>
<tr class="even">
<td>Examine</td>
<td><code>ns-name ns-aliases ns-map ns-interns ns-publics ns-refers ns-imports</code></td>
</tr>
<tr class="odd">
<td>From symbol</td>
<td><code>resolve ns-resolve namespace</code></td>
</tr>
<tr class="even">
<td>Remove</td>
<td><code>ns-unalias ns-unmap remove-ns</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Loading</h2>
<table>
<tr class="odd">
<td>Loading libs</td>
<td><code>require use import refer</code></td>
</tr>
<tr class="even">
<td>Listing loaded libs</td>
<td><code>loaded-libs</code></td>
</tr>
<tr class="odd">
<td>Loading misc</td>
<td><code>load load-file load-reader load-string</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Special Forms</h2>
<div class="single_row"><code>def if do let quote var fn loop recur throw try monitor-enter monitor-exit</code></div>
</div>
</div>
<div class="column">
<div class="section">
<h2>Concurrency</h2>
<table>
<tr class="odd">
<td>Atoms</td>
<td><code>atom swap! reset! compare-and-set!</code></td>
</tr>
<tr class="even">
<td>Futures</td>
<td><code>future future-call future-done? future-cancel future-cancelled? future?</code></td>
</tr>
<tr class="odd">
<td>Threads</td>
<td><code>bound-fn bound-fn* get-thread-bindings push-thread-bindings pop-thread-bindings thread-bound?</code></td>
</tr>
<tr class="even">
<td>Misc</td>
<td><code>locking pcalls pvalues pmap seque promise deliver</code></td>
</tr>
</table>
<h2>Refs and Transactions</h2>
<table>
<tr class="odd">
<td>Create</td>
<td><code>ref</code></td>
</tr>
<tr class="even">
<td>Examine</td>
<td><code>deref @</code></td>
</tr>
<tr class="odd">
<td>Transaction Macros</td>
<td><code>sync dosync io!</code></td>
</tr>
<tr class="even">
<td>In Transaction</td>
<td><code>ensure ref-set alter commute</code></td>
</tr>
<tr class="odd">
<td>Validators</td>
<td><code>set-validator! get-validator</code></td>
</tr>
<tr class="even">
<td>History</td>
<td><code>ref-history-count ref-max-history ref-min-history</code></td>
</tr>
</table>
<h2>Agents and Asynchronous Actions</h2>
<table>
<tr class="odd">
<td>Create</td>
<td><code>agent</code></td>
</tr>
<tr class="even">
<td>Examine</td>
<td><code>agent-error</code></td>
</tr>
<tr class="odd">
<td>Change state</td>
<td><code>send send-off restart-agent</code></td>
</tr>
<tr class="even">
<td>Block waiting</td>
<td><code>await await-for</code></td>
</tr>
<tr class="odd">
<td>Ref validators</td>
<td><code>set-validator get-validator</code></td>
</tr>
<tr class="even">
<td>Watchers</td>
<td><code>add-watch remove-watch</code></td>
</tr>
<tr class="odd">
<td>Thread handling</td>
<td><code>shutdown-agents</code></td>
</tr>
<tr class="even">
<td>Error</td>
<td><code>error-handler set-error-handler! error-mode set-error-mode</code></td>
</tr>
<tr class="odd">
<td>Misc</td>
<td><code>*agent* release-pending-sends</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Java Interoperation</h2>
<table>
<tr class="odd">
<td>General</td>
<td><code>.. doto Classname/ Classname. new bean comparator enumeration-seq import iterator-seq memfn set!</code></td>
</tr>
<tr class="even">
<td>Cast</td>
<td><code>int long float double char num boolean short byte bigdec bigint</code></td>
</tr>
<tr class="odd">
<td>Exceptions</td>
<td><code>catch finally throw throw-if try</code></td>
</tr>
</table>
<h3>Arrays</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>make-array {object, boolean, byte, char, short, int, long, float, double}-array aclone to-array to-array-2d into-array</code></td>
</tr>
<tr class="even">
<td>Use</td>
<td><code>aget aset aset-{boolean, char, byte, int, long, short, float, double} alength amap areduce</code></td>
</tr>
<tr class="odd">
<td>Cast</td>
<td><code>booleans bytes chars ints shorts longs floats doubles</code></td>
</tr>
</table>
<h3>Proxy</h3>
<table>
<tr class="odd">
<td>Create</td>
<td><code>proxy get-proxy-class construct-proxy init-proxy</code></td>
</tr>
<tr class="even">
<td>Misc</td>
<td><code>proxy-mappings proxy-super update-proxy</code></td>
</tr>
</table>
</div>
<div class="section">
<h2>Other</h2>
<table>
<tr class="odd">
<td>Regex</td>
<td><code>#"<var>pattern</var>" re-pattern re-matcher re-find re-matches re-groups re-seq</code></td>
</tr>
<tr class="even">
<td>XML</td>
<td><code>parse xml-seq</code></td>
</tr>
<tr class="odd">
<td>REPL</td>
<td><code>*1 *2 *3 *e *print-dup* *print-length* *print-level* *print-meta* *print-readably*</code></td>
</tr>
<tr class="even">
<td>IO</td>
<td><code>*in* *out* *err* flush read-line read read-string slurp spit with-in-str</code></td>
</tr>
<tr class="odd">
<td>Code</td>
<td><code>*compile-files* *compile-path* *file* *warn-on-reflection* compile gen-class gen-interface loaded-libs test</code></td>
</tr>
<tr class="even">
<td>Misc.</td>
<td><code>eval force hash name *clojure-version* clojure-version *command-line-args*</code></td>
</tr>
</table>
</div>
<div class="footer">
<p>$Revision: 1.2, $Date: October 14, 2010<br />
Steve Tayon (steve.tayon googlemail com)</p>
<p>HTMLized by Rasmus Svensson (raek lysator.liu.se)</p>
</div>
</div>
</div>
<div class="gap">&nbsp;</div>
  <!-- google_ad_section_end -->
  </div>

<div id="pageEditor" class="editorWrapper editorLayer">
  <iframe id="target_editor" name="target_editor" src="/s/blank.html" style="width:0px;height:0px;border:0"></iframe>
  <form action="/page/edit/cheatsheet?goto=" method="post" class="editorForm" id="editorForm"><input type="hidden" name="wikispacesFormToken" value="a63f5fb46835a53054a1245abd54def5e7029a1d"/>
    <input type="hidden" name="mode" autocomplete="off" value="visual"/>
    <input type="hidden" id="version" name="version" autocomplete="off" value="186273307"/>
    <input type="hidden" name="contentPresent" autocomplete="off" value=""/>
    <input type="hidden" name="editorCleanup" autocomplete="off" value=""/>
    <textarea id="wsMainEditor" class="noContentHide" name="WikispacesEditorContent" style="width: 100%; height: 400px; position: absolute; top: -50000px; left: -50000px;" autocomplete="off"></textarea>

  <noscript>
    <style>
      
      #wsMainEditor { position: static !important; top: auto !important; left: auto !important; }
      
       .noContentHide { display: none }    </style>
    <div class="noContentHide">
      <br/>
      <button type="submit" name="update" value="1" class="btn primary"><span><span>Save</span></span></button>
      <a href="/cheatsheet" class="btn primary"><span><span>Cancel</span></span></a>
    </div>
  </noscript>

  </form>
  
  <div id="plainTextEditor" style="position:relative;display:none" class="editorLayer" >
    <textarea id="textEditor"></textarea>
    <p style="clear:both;" align="right"><a href="#" onclick="jQuery(document).scrollTop(0); jQuery('.WikispacesHelpTrigger').eq(0).click(); loadHelp('help.wikitext'); return false;">help on how to format text</a></p>
  </div>
</div>





</div></div></div>											<div id="showTags" style="display: none;">
							<div class="WikiTags"></div>						</div>
						<script type="text/javascript">
						<!--
						if (wikispaces_object == 'page' && wikispaces_method == 'view') {
							document.getElementById('showTags').style.display = 'block';
						}
						// -->
						</script>
									</div>
				<div id="foot">
					<div style="text-align: center;">Copyright 2008-2010 Rich Hickey</div>
									</div>
			</div>
			<!-- /rightcolumn -->
			<div id="DesignedBy">Logo &amp; site design by <a href="http://www.tomhickey.com" title="Visit Tom Hickey's website.">Tom Hickey</a>.</div>
		</div>
		<!-- /AllContentContainer -->
	
<div id="WikispacesHelp" class="jqmWindow">
  <div id="WikispacesHelpControls">
    <span id="WikispacesHelpBreadcrumbs">
      <span id="WikispacesHelpBreadcrumbHome" class="WikispacesHelpBreadcrumb WikispacesHelpBreadcrumbCurrent">
        <a href="http://help.wikispaces.com/Home" onclick="return gotoBreadcrumb(0);">Home</a>
      </span>
      <span id="WikispacesHelpBreadcrumbsEllipsis" style="display: none;">
        &gt; ...
      </span>
      <span id="WikispacesHelpBreadcrumbSpinner"></span>
    </span>
    <div class="WikispacesHelpClose"></div>
  </div>
  <div id="WikispacesHelpContent" class="wiki">Loading...</div>

  <div id="WikispacesGettingStartedControls">
    <span id="WikispacesGettingStartedBreadcrumbs">
      <span id="WikispacesGettingStartedBreadcrumbHome" class="WikispacesHelpBreadcrumb WikispacesHelpBreadcrumbCurrent">
        <a href="#" onclick="return showGettingStartedHome();">Home</a>
      </span>
      <span id="WikispacesGettingStartedCategory"></span>
    </span>

    <a href="http://www.wikispaces.com/site/gettingstarted/off" style="position: absolute; right: 50px;">Turn Off "Getting Started"</a>

    <div class="WikispacesHelpClose"></div>
  </div>
  <div id="WikispacesGettingStartedContent" class="wiki">Loading...</div>
</div>
<script src="http://c1.wikicdn.com/s/nogz/3xzx6j00-editorc.min.js" type="text/javascript"></script>


<script type="text/javascript">
<!--

jQuery(document).ready(function() {
  attachHelpWindow('/home');
});

jQuery(document).ready(function() {
  WikispacesEditor.loadEditorLibs('http://www.wikispaces.com/site/editorlibs/en/xk136qxq.js');
});

function startEditor(moreCoreOptions, moreMainOptions) {

  var coreOptions = {
    'content_css': 'http://clojure.org/stylesheet/editor/clojure/26467729A.css'
  };

  var mainOptions = {
    'wssave_cancel_url': '/cheatsheet',
    'wsimage_upload_url': 'http://clojure.org/file/multiupload',
    'wsimage_max_file_size': '51200',
    'wsimage_page_view_group': ''
  };

  WikispacesEditor.loadEditor(jQuery.extend(coreOptions, moreCoreOptions),
                              jQuery.extend(mainOptions, moreMainOptions));
}


  jQuery(document).ready(function() {
    WikispacesEditor.enableButtons(startEditor);
  });



--></script><!-- w7 83 mem:2:19(23) dql:2:4(5) -->

</body>
	</html>