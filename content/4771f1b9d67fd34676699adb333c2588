<html><head><meta content="text/html; charset=utf-8" http-equiv="Content-Type"/><style type="text/css">body { font-family: verdana, sans-serif; background-color: #fff;line-height: 20px; }a:link, a:visited { color: #4fa3da; }a:hover { text-decoration: none; color: #f65077; }div.header { border-bottom: 1px dashed #f65077; }code.header { margin-left: 30px; font-weight: bold;background-color: #fcf095; }h1 { font-size: 5em; margin: 0; padding-left: 30px; color: #4fa3da;clear: both; font-weight: bold; letter-spacing: -5px; }h1 a { text-decoration: none; }div.main{ float: left; width: 100%; }div.content { float: left; width: 70%; padding: 15px 0 15px 30px;line-height: 20px; }div.side{ float: left; padding: 10px; text-align: right;width: 20%; }div.footer{ text-align: center; border-top: 1px dashed #f65077;padding-top: 10px; font-size: small; }div.sheet { font-size: .8em; line-height: 17px; padding: 5px;font-family: courier, fixed-width; background-color: #e8e8e8; }pre.sheet { line-height: 15px; }li { list-style: none; }div.version { background-color: #fcf095; padding: 5px;width: 450px; margin-top: 50px; }p.error { background-color: #fcf095; padding: 5px; }div.clear{ clear: both; }div.clear_10 { clear: both; font-size: 10px; line-height: 10px; }textarea { font-family: courier; }code { background-color: #fcf095 }span.diff_cut { color: #f65077; }span.diff_add { color: #009933; }@media print {.side, .version, .footer { display: none; }div.content { width: 100%; }h1 a:link, h1 a:visited { color: #eee;}.header code { font-size: 18px; background: none; }div.header { border-bottom: none; }}</style><link rel="alternate" type="application/atom+xml" href="http://feeds.feedburner.com/cheatsheets" title="Recently Updated Cheat Sheets"/><title>$ cheat git</title></head><body><div class="main"><div class="header"><h1><a href="/s/git">cheat sheets.</a></h1><code class="header">$ cheat git</code></div><div class="content"><pre class="sheet">Setup
-----

git clone &lt;repo&gt;
  clone the repository specified by &lt;repo&gt;; this is similar to &quot;checkout&quot; in
  some other version control systems such as Subversion and CVS

Add colors to your ~/.gitconfig file:

  [color]
    ui = auto
  [color &quot;branch&quot;]
    current = yellow reverse
    local = yellow
    remote = green
  [color &quot;diff&quot;]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
  [color &quot;status&quot;]
    added = yellow
    changed = green
    untracked = cyan

Highlight whitespace in diffs

  [color]
    ui = true
  [color &quot;diff&quot;]
    whitespace = red reverse
  [core]
    whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol

Add aliases to your ~/.gitconfig file:

  [alias]
    st = status
    ci = commit
    br = branch
    co = checkout
    df = diff
    lg = log -p
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    ls = ls-files

Configuration
-------------

git config -e [--global]
  edit the .git/config [or ~/.gitconfig] file in your $EDITOR

git config --global user.name 'John Doe'
git config --global user.email johndoe@example.com
  sets your name and email for commit messages

git config branch.autosetupmerge true
  tells git-branch and git-checkout to setup new branches so that git-pull(1)
  will appropriately merge from that remote branch.  Recommended.  Without this,
  you will have to add --track to your branch command or manually merge remote
  tracking branches with &quot;fetch&quot; and then &quot;merge&quot;.

git config core.autocrlf true
  This setting tells git to convert the newlines to the systemâ€™s standard
  when checking out files, and to LF newlines when committing in

You can add &quot;--global&quot; after &quot;git config&quot; to any of these commands to make it
apply to all git repos (writes to ~/.gitconfig).


Info
----
git reflog 
  Use this to recover from *major* fuck ups! It's basically a log of the
  last few actions and you might have luck and find old commits that
  have been lost by doing a complex merge.

git diff
  show a diff of the changes made since your last commit
  to diff one file: &quot;git diff -- &lt;filename&gt;&quot;
  to show a diff between staging area and HEAD: `git diff --cached`

git status
  show files added to the staging area, files with changes, and untracked files

git log
  show recent commits, most recent on top. Useful options:
  --color       with color
  --graph       with an ASCII-art commit graph on the left
  --decorate    with branch and tag names on appropriate commits
  --stat        with stats (files changed, insertions, and deletions)
  -p            with full diffs
  --author=foo  only by a certain author
  --after=&quot;MMM DD YYYY&quot; ex. (&quot;Jun 20 2008&quot;) only commits after a certain date
  --before=&quot;MMM DD YYYY&quot; only commits that occur before a certain date
  --merge       only the commits involved in the current merge conflicts

git log &lt;ref&gt;..&lt;ref&gt;
  show commits between the specified range. Useful for seeing changes from
  remotes:
  git log HEAD..origin/master # after git remote update

git show &lt;rev&gt;
  show the changeset (diff) of a commit specified by &lt;rev&gt;, which can be any
  SHA1 commit ID, branch name, or tag (shows the last commit (HEAD) by default)

git show --name-only &lt;rev&gt;
  show only the names of the files that changed, no diff information.

git blame &lt;file&gt;
  show who authored each line in &lt;file&gt;

git blame &lt;file&gt; &lt;rev&gt;
  show who authored each line in &lt;file&gt; as of &lt;rev&gt; (allows blame to go back in
  time)

git gui blame
  really nice GUI interface to git blame

git whatchanged &lt;file&gt;
  show only the commits which affected &lt;file&gt; listing the most recent first
  E.g. view all changes made to a file on a branch:
    git whatchanged &lt;branch&gt; &lt;file&gt;  | grep commit | \
         colrm 1 7 | xargs -I % git show % &lt;file&gt;
  this could be combined with git remote show &lt;remote&gt; to find all changes on
  all branches to a particular file.

git diff &lt;commit&gt; head path/to/fubar
  show the diff between a file on the current branch and potentially another
  branch

git diff head -- &lt;file&gt;
  use this form when doing git diff on cherry-pick'ed (but not committed)
  changes
  somehow changes are not shown when using just git diff.

git ls-files
  list all files in the index and under version control.

git ls-remote &lt;remote&gt; [HEAD]
  show the current version on the remote repo. This can be used to check whether
  a local is required by comparing the local head revision.

Adding / Deleting
-----------------

git add &lt;file1&gt; &lt;file2&gt; ...
  add &lt;file1&gt;, &lt;file2&gt;, etc... to the project

git add &lt;dir&gt;
  add all files under directory &lt;dir&gt; to the project, including subdirectories

git add .
  add all files under the current directory to the project
  *WARNING*: including untracked files.

git rm &lt;file1&gt; &lt;file2&gt; ...
  remove &lt;file1&gt;, &lt;file2&gt;, etc... from the project

git rm $(git ls-files --deleted)
  remove all deleted files from the project

git rm --cached &lt;file1&gt; &lt;file2&gt; ...
  commits absence of &lt;file1&gt;, &lt;file2&gt;, etc... from the project

Ignoring
---------

Option 1:

Edit $GIT_DIR/info/exclude. See Environment Variables below for explanation on
$GIT_DIR.

Option 2:

Add a file .gitignore to the root of your project. This file will be checked in.

Either way you need to add patterns to exclude to these files.

Staging
-------

git add &lt;file1&gt; &lt;file2&gt; ...
git stage &lt;file1&gt; &lt;file2&gt; ...
  add changes in &lt;file1&gt;, &lt;file2&gt; ... to the staging area (to be included in
  the next commit

git add -p
git stage --patch
  interactively walk through the current changes (hunks) in the working
  tree, and decide which changes to add to the staging area.

git add -i
git stage --interactive
  interactively add files/changes to the staging area. For a simpler
  mode (no menu), try `git add --patch` (above)

Unstaging
---------

git reset HEAD &lt;file1&gt; &lt;file2&gt; ...
  remove the specified files from the next commit


Committing
----------

git commit &lt;file1&gt; &lt;file2&gt; ... [-m &lt;msg&gt;]
  commit &lt;file1&gt;, &lt;file2&gt;, etc..., optionally using commit message &lt;msg&gt;,
  otherwise opening your editor to let you type a commit message

git commit -a
  commit all files changed since your last commit
  (does not include new (untracked) files)

git commit -v
  commit verbosely, i.e. includes the diff of the contents being committed in
  the commit message screen

git commit --amend
  edit the commit message of the most recent commit

git commit --amend &lt;file1&gt; &lt;file2&gt; ...
  redo previous commit, including changes made to &lt;file1&gt;, &lt;file2&gt;, etc...


Branching
---------

git branch
  list all local branches

git branch -r
  list all remote branches

git branch -a
  list all local and remote branches

git branch &lt;branch&gt;
  create a new branch named &lt;branch&gt;, referencing the same point in history as
  the current branch

git branch &lt;branch&gt; &lt;start-point&gt;
  create a new branch named &lt;branch&gt;, referencing &lt;start-point&gt;, which may be
  specified any way you like, including using a branch name or a tag name

git push &lt;repo&gt; &lt;start-point&gt;:refs/heads/&lt;branch&gt;
  create a new remote branch named &lt;branch&gt;, referencing &lt;start-point&gt; on the
  remote.
  Example: git push origin origin:refs/heads/branch-1
  Example: git push origin origin/branch-1:refs/heads/branch-2

git branch --track &lt;branch&gt; &lt;remote-branch&gt;
  create a tracking branch. Will push/pull changes to/from another repository.
  Example: git branch --track experimental origin/experimental

git branch -d &lt;branch&gt;
  delete the branch &lt;branch&gt;; if the branch you are deleting points to a 
  commit which is not reachable from the current branch, this command 
  will fail with a warning.

git branch -r -d &lt;remote-branch&gt;
  delete a remote-tracking branch.
  Example: git branch -r -d wycats/master

git branch -D &lt;branch&gt;
  even if the branch points to a commit not reachable from the current branch,
  you may know that that commit is still reachable from some other branch or
  tag. In that case it is safe to use this command to force git to delete the
  branch.

git checkout &lt;branch&gt;
  make the current branch &lt;branch&gt;, updating the working directory to reflect
  the version referenced by &lt;branch&gt;

git checkout -b &lt;new&gt; &lt;start-point&gt;
  create a new branch &lt;new&gt; referencing &lt;start-point&gt;, and check it out.

git push &lt;repository&gt; :&lt;branch&gt;
  removes a branch from a remote repository.
  Example: git push origin :old_branch_to_be_deleted

git co &lt;branch&gt; &lt;path to new file&gt;
  Checkout a file from another branch and add it to this branch. File
  will still need to be added to the git branch, but it's present.
  Eg. git co remote_at_origin__tick702_antifraud_blocking
  ..../...nt_elements_for_iframe_blocked_page.rb
 
git show &lt;branch&gt; -- &lt;path to file that does not exist&gt;
  Eg. git show remote_tick702 -- path/to/fubar.txt
  show the contents of a file that was created on another branch and that 
  does not exist on the current branch.

git show &lt;rev&gt;:&lt;repo path to file&gt;
  Show the contents of a file at the specific revision. Note: path has to be
  absolute within the repo.

Merging
-------

git merge &lt;branch&gt;
  merge branch &lt;branch&gt; into the current branch; this command is idempotent
  and can be run as many times as needed to keep the current branch 
  up-to-date with changes in &lt;branch&gt;

git merge &lt;branch&gt; --no-commit
  merge branch &lt;branch&gt; into the current branch, but do not autocommit the
  result; allows you to make further tweaks

git merge &lt;branch&gt; -s ours
  merge branch &lt;branch&gt; into the current branch, but drops any changes in
  &lt;branch&gt;, using the current tree as the new tree


Cherry-Picking
--------------

git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] &lt;commit&gt;
  selectively merge a single commit from another local branch
  Example: git cherry-pick 7300a6130d9447e18a931e898b64eefedea19544


Squashing
---------
WARNING: &quot;git rebase&quot; changes history. Be careful. Google it.

git rebase --interactive HEAD~10
  (then change all but the first &quot;pick&quot; to &quot;squash&quot;)
  squash the last 10 commits into one big commit


Conflicts
---------

git mergetool
  work through conflicted files by opening them in your mergetool (opendiff,
  kdiff3, etc.) and choosing left/right chunks. The merged result is staged for
  commit.

For binary files or if mergetool won't do, resolve the conflict(s) manually 
and then do:

  git add &lt;file1&gt; [&lt;file2&gt; ...]

Once all conflicts are resolved and staged, commit the pending merge with:

  git commit


Sharing
-------

git fetch &lt;remote&gt;
  update the remote-tracking branches for &lt;remote&gt; (defaults to &quot;origin&quot;).
  Does not initiate a merge into the current branch (see &quot;git pull&quot; below).

git pull
  fetch changes from the server, and merge them into the current branch.
  Note: .git/config must have a [branch &quot;some_name&quot;] section for the current
  branch, to know which remote-tracking branch to merge into the current
  branch.  Git 1.5.3 and above adds this automatically.

git push
  update the server with your commits across all branches that are *COMMON*
  between your local copy and the server.  Local branches that were never 
  pushed to the server in the first place are not shared.

git push origin &lt;branch&gt;
  update the server with your commits made to &lt;branch&gt; since your last push.
  This is always *required* for new branches that you wish to share. After 
  the first explicit push, &quot;git push&quot; by itself is sufficient.

git push origin &lt;branch&gt;:refs/heads/&lt;branch&gt;
  E.g. git push origin twitter-experiment:refs/heads/twitter-experiment
  Which, in fact, is the same as git push origin &lt;branch&gt; but a little
  more obvious what is happening.
  
Reverting
---------

git revert &lt;rev&gt;
  reverse commit specified by &lt;rev&gt; and commit the result.  This does *not* do
  the same thing as similarly named commands in other VCS's such as &quot;svn 
  revert&quot; or &quot;bzr revert&quot;, see below

git checkout &lt;file&gt;
  re-checkout &lt;file&gt;, overwriting any local changes

git checkout .
  re-checkout all files, overwriting any local changes.  This is most similar 
  to &quot;svn revert&quot; if you're used to Subversion commands


Fix mistakes / Undo
-------------------

git reset --hard
  abandon everything since your last commit; this command can be DANGEROUS.
  If merging has resulted in conflicts and you'd like to just forget about
  the merge, this command will do that.

git reset --hard ORIG_HEAD
  undo your most recent *successful* merge *and* any changes that occurred
  after.  Useful for forgetting about the merge you just did.  If there are
  conflicts (the merge was not successful), use &quot;git reset --hard&quot; (above)
  instead.

git reset --soft HEAD^
  forgot something in your last commit? That's easy to fix. Undo your last
  commit, but keep the changes in the staging area for editing.

git commit --amend
  redo previous commit, including changes you've staged in the meantime.
  Also used to edit commit message of previous commit.


Plumbing
--------

test &lt;sha1-A&gt; = $(git merge-base &lt;sha1-A&gt; &lt;sha1-B&gt;)
  determine if merging sha1-B into sha1-A is achievable as a fast forward;
  non-zero exit status is false.


Stashing
--------

git stash
git stash save &lt;optional-name&gt;
  save your local modifications to a new stash (so you can for example
  &quot;git svn rebase&quot; or &quot;git pull&quot;)

git stash apply
  restore the changes recorded in the stash on top of the current working tree
  state

git stash pop
  restore the changes from the most recent stash, and remove it from the stack
  of stashed changes

git stash list
  list all current stashes

git stash show &lt;stash-name&gt; -p
  show the contents of a stash - accepts all diff args

git stash drop [&lt;stash-name&gt;]
  delete the stash

git stash clear
  delete all current stashes


Remotes
-------

git remote add &lt;remote&gt; &lt;remote_URL&gt;
  adds a remote repository to your git config.  Can be then fetched locally.
  Example:
    git remote add coreteam git://github.com/wycats/merb-plugins.git
    git fetch coreteam

git push &lt;remote&gt; :refs/heads/&lt;branch&gt;
  delete a branch in a remote repository

git push &lt;remote&gt; &lt;remote&gt;:refs/heads/&lt;remote_branch&gt;
  create a branch on a remote repository
  Example: git push origin origin:refs/heads/new_feature_name

git push &lt;repository&gt; +&lt;remote&gt;:&lt;new_remote&gt;
  replace a &lt;remote&gt; branch with &lt;new_remote&gt;
  think twice before do this
  Example: git push origin +master:my_branch

git remote prune &lt;remote&gt;
  prune deleted remote-tracking branches from &quot;git branch -r&quot; listing

git remote add -t master -m master origin git://example.com/git.git/
  add a remote and track its master

git remote show &lt;remote&gt;
  show information about the remote server.

git checkout -b &lt;local branch&gt; &lt;remote&gt;/&lt;remote branch&gt;
  Eg git checkout -b myfeature origin/myfeature
  Track a remote branch as a local branch.
  
git pull &lt;remote&gt; &lt;branch&gt;
git push
  For branches that are remotely tracked (via git push) but
  that complain about non-fast forward commits when doing a 
  git push. The pull synchronizes local and remote, and if 
  all goes well, the result is pushable.

Submodules
----------

git submodule add &lt;remote_repository&gt; &lt;path/to/submodule&gt;
  add the given repository at the given path. The addition will be part of the
  next commit.

git submodule update [--init]
  Update the registered submodules (clone missing submodules, and checkout
  the commit specified by the super-repo). --init is needed the first time.

git submodule foreach &lt;command&gt;
  Executes the given command within each checked out submodule.

Remove submodules

   1. Delete the relevant line from the .gitmodules file.
   2. Delete the relevant section from .git/config.
   3. Run git rm --cached path_to_submodule (no trailing slash).
   4. Commit and delete the now untracked submodule files. 

Patches
-------

git format-patch HEAD^
  Generate the last commit as a patch that can be applied on another
  clone (or branch) using 'git am'. Format patch can also generate a
  patch for all commits using 'git format-patch HEAD^ HEAD'
  All page files will be enumerated with a prefix, e.g. 0001 is the
  first patch.

git am &lt;patch file&gt;
  Applies the patch file generated by format-patch.

git diff --no-prefix &gt; patchfile
  Generates a patch file that can be applied using patch:
    patch -p0 &lt; patchfile
  Useful for sharing changes without generating a git commit.

Git Instaweb
------------

git instaweb --httpd=webrick [--start | --stop | --restart]


Environment Variables
---------------------

GIT_AUTHOR_NAME, GIT_COMMITTER_NAME
  Your full name to be recorded in any newly created commits.  Overrides
  user.name in .git/config

GIT_AUTHOR_EMAIL, GIT_COMMITTER_EMAIL
  Your email address to be recorded in any newly created commits.  Overrides
  user.email in .git/config

GIT_DIR
  Location of the repository to use (for out of working directory repositories)

GIT_WORKING_TREE
  Location of the Working Directory - use with GIT_DIR to specifiy the working
  directory root
  or to work without being in the working directory at all.</pre><div class="version">Version <strong>36</strong>, updated 39 days ago.  <br/>. o 0 (  | <a href="/s/git/35">previous</a> | <a href="/h/git">history</a> | <a href="/e/git/36">revert to</a> | <a href="/s/git">current</a> | <a href="/d/git/36">diff</a> )</div></div><div class="side">( <a href="/a">add new</a> | <a href="/b">see all</a> )<ul><li><strong>updated sheets</strong></li><li><a href="http://feeds.feedburner.com/cheatsheets"><img src="http://errtheblog.com/images/feed.png" border="0" alt="Recently Updated Cheat Sheets Feed"/></a></li><li><a href="/s/rails_review/">rails_review</a></li><li><a href="/s/semver/">semver</a></li><li><a href="/s/rails_checklist/">rails_checklist</a></li><li><a href="/s/dollar/">dollar</a></li><li><a href="/s/authorizenet/">authorizenet</a></li><li><a href="/s/cheat/">cheat</a></li><li><a href="/s/bash_emacskeys/">bash_emacskeys</a></li><li><a href="/s/scili/">scili</a></li><li><a href="/s/vim/">vim</a></li><li><a href="/s/dired/">dired</a></li><li><a href="/s/cakephp/">cakephp</a></li><li><a href="/s/chromium/">chromium</a></li><li><a href="/s/iptables/">iptables</a></li><li><a href="/s/sinatra/">sinatra</a></li><li><a href="/s/rspec/">rspec</a></li></ul></div><div class="clear"></div><div class="footer">Powered by <a href="http://code.whytheluckystiff.net/camping">Camping</a>, <a href="http://heroku.com/">Heroku</a> and, to a lesser extent, <a href="http://github.com/">GitHub</a>.</div></div><script src="http://getclicky.com/1070.js"> </script><noscript><img height=0 width=0 src="http://getclicky.com/1070ns.gif"></noscript></body></html>