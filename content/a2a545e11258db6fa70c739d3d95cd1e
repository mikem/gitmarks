<!DOCTYPE html>
<html dir="ltr" lang="en">
<head>
<meta charset="UTF-8" />
<title>Clojure tutorial: fetching web comics (part 2) &laquo;  Occasionally sane</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="stylesheet" href="http://s2.wp.com/wp-content/themes/pub/contempt/style.css?m=1292348161g" type="text/css" media="screen" />
<link rel="pingback" href="http://gnuvince.wordpress.com/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Occasionally sane &raquo; Feed" href="http://gnuvince.wordpress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Occasionally sane &raquo; Comments Feed" href="http://gnuvince.wordpress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Occasionally sane &raquo; Clojure tutorial: fetching web comics (part&nbsp;2) Comments Feed" href="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
function addLoadEvent(func){var oldonload=window.onload;if(typeof window.onload!='function'){window.onload=func;}else{window.onload=function(){oldonload();func();}}}
/* ]]> */
</script>
<link rel="stylesheet" href="http://s0.wp.com/wp-content/themes/h4/global.css?m=1291749258g" type="text/css" />
<script type='text/javascript' src='http://s2.wp.com/wp-includes/js/l10n.js?m=1290133841g&amp;ver=20101110'></script>
<script type='text/javascript' src='http://s1.wp.com/wp-includes/js/jquery/jquery.js?m=1290133841g&amp;ver=1.4.4'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-includes/js/comment-reply.js?m=1233868943g&amp;ver=20090102'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://gnuvince.wordpress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://gnuvince.wordpress.com/wp-includes/wlwmanifest.xml" /> 
<link rel='index' title='Occasionally sane' href='http://gnuvince.wordpress.com/' />
<link rel='prev' title='Clojure tutorial: fetching web comics (part&nbsp;1)' href='http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/' />
<link rel='next' title='Blind&nbsp;programming' href='http://gnuvince.wordpress.com/2008/12/11/blind-programming/' />
<meta name="generator" content="WordPress.com" />
<link rel='canonical' href='http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/' />
<link rel='shortlink' href='http://wp.me/p61GC-8f' />
<link rel="shortcut icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48" />
<link rel="icon" type="image/x-icon" href="http://s1.wp.com/i/favicon-stacked.ico?m=1284002170g" sizes="16x16 24x24 32x32 48x48" />
<link rel="apple-touch-icon" href="http://s0.wp.com/wp-content/themes/h4/i/webclip.png?m=1250548519g" />
	<style type="text/css">
	/* <![CDATA[ */
				div#likes { margin-top: 15px; }
		.like-button { border: 1px solid #eee; padding: 2px 6px; font-size: 13px; font-family: arial, tahoma, sans-serif; }
		#wpl-likebox { clear: left; font-size: 11px; font-family: arial, tahoma, verdana, sans-serif !important; min-height: 30px; margin: 10px 0 !important; padding: 5px 0 10px 0 !important; }
		#wpl-button { float: left; background: url( /i/buttonbg.png ) top left repeat-x; margin-right: 7px; border: 1px solid #d4d4d4; -moz-border-radius: 3px; -webkit-border-radius: 3px; border-radius: 3px; }
		#wpl-button a { color: #666 !important; line-height: 130% !important; text-decoration: none !important; outline: none; float: left; padding: 3px 6px 2px 24px !important; font-size: 11px !important; background: url( /i/likestar.png ) 6px 49.8% no-repeat; }
		#wpl-button.liked { background: #feffce; border: 1px solid #f3e389; }
		#wpl-button.liked a { color: #ba871b !important; }
		#wpl-likebox #wpl-count { min-height: 25px; line-height: 130% !important; float: left; padding-top: 4px; }
		#wpl-likebox #wpl-avatars { clear: left; max-height: 98px; overflow: hidden; margin-top: 15px; line-height: 130% !important; }
		#wpl-likebox #wpl-avatars img { border: none !important; }
		#wpl-likebox #wpl-mustlogin { line-height: 14px !important; font-size: 11px; clear: left; margin-top: 5px; background: #f0f0f0; padding: 10px; width: 65%; -moz-border-radius: 3px; -webkit-border-radius: 3px; border-radius: 3px; }
		#wpl-likebox #wpl-mustlogin a { color: #888; text-decoration: underline; }
		#wpl-likebox #wpl-mustlogin p { margin: 5px 0; padding: 0 }
		#wpl-likebox #wpl-mustlogin input.input { padding: 2px; background: #fff; font-size: 11px; font-family: inherit; border: 1px solid #ccc; -moz-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1) inset; -webkit-box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.1) inset; line-height: 12px; }
		#wpl-likebox #wpl-mustlogin input#wp-submit { border: 1px solid #ccc; font-size: 11px; background: #fafafa; repeat-x; -moz-border-radius: 3px; -webkit-border-radius: 3px; border-radius: 3px; padding: 2px 4px !important; line-height: 12px; }
		#wpl-likebox #wpl-mustlogin label { position: relative; cursor: text; }
		#wpl-likebox #wpl-mustlogin label span { position: absolute; top: 0px; left: 5px; padding: 0 !important; }
		#wpl-likebox #wpl-mustlogin label span { top /*\**/: -10px\9; }
	/* ]]> */
	</style>
	<link rel='openid.server' href='http://gnuvince.wordpress.com/?openidserver=1' />
<link rel='openid.delegate' href='http://gnuvince.wordpress.com/' />
<link rel="search" type="application/opensearchdescription+xml" href="http://gnuvince.wordpress.com/osd.xml" title="Occasionally sane" />
<link rel="search" type="application/opensearchdescription+xml" href="http://wordpress.com/opensearch.xml" title="WordPress.com" />
<style type="text/css">
#headerimg{
	background: url(http://s2.wp.com/wp-content/themes/pub/contempt/images/blue_flower/head.jpg) no-repeat;
}
#header h1 a, .description {
	color:#E5F2E9;
}
</style>
<meta name="application-name" content="Occasionally sane" /><meta name="msapplication-window" content="width=device-width;height=device-height" /><meta name="msapplication-task" content="name=Subscribe;action-uri=http://gnuvince.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico" /><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico" /></head>
<body>

<div id="page">

<div id="header">
	<div id="headerimg" onclick="location.href='http://gnuvince.wordpress.com';" style="cursor: pointer;">
		<h1><a href="http://gnuvince.wordpress.com/">Occasionally sane</a></h1>
		<div class="description"></div>
	</div>
</div>

<ul id="pagebar" class="menu" style="background: url(http://s2.wp.com/wp-content/themes/pub/contempt/images/blue_flower/pagebar.jpg);">
	<li class="page_item"><a href="http://gnuvince.wordpress.com/">Home</a></li>
	<li class="page_item page-item-2"><a href="http://gnuvince.wordpress.com/about/" title="About">About</a></li>
</ul>

<div id="grad" style="height: 65px; width: 100%; background: url(http://s2.wp.com/wp-content/themes/pub/contempt/images/blue_flower/topgrad.jpg);">&nbsp;</div>

	<div id="content" class="widecolumn">
				
  	

	
		<div class="post-511 post type-post status-publish format-standard hentry category-clojure" id="post-511">
			<h2><a href="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/" rel="bookmark" title="Permanent Link: Clojure tutorial: fetching web comics (part&nbsp;2)">Clojure tutorial: fetching web comics (part&nbsp;2)</a></h2>
	
			<div class="entry">
				<p><a href="http://gnuvince.wordpress.com/2008/10/31/fetching-web-comics-with-clojure-part-1/">Last time</a>, we saw how to fetch the image URL of web comics in Clojure by using regular expressions and some Java objects.  A short-coming of that program was that it could <em>only</em> fetch an image URL.  Some web comics (such as Xkcd) have a small tooltip text that appears when you hover the mouse cursor over the image on the web site; this text is often an integral part of the comic and we would like to fetch it as well.</p>
<h2>Today&#8217;s program</h2>
<p>In this article, we will modify our original program to fetch the latest Xkcd <b>with</b> its tooltip text.  To keep things interesting for the avid Clojure apprentice, we will use <a href="http://clojure.org/multimethods">multi-methods</a> for this purpose.  We will also see more aspects of Clojure&#8217;s integration with Java by using the <a href="http://htmlparser.sourceforge.net/">HTML Parser</a> library.</p>
<h2>Language changes</h2>
<p>Recently, Clojure had a couple of changes in its core library that will make it into 1.0.  For this tutorial to be useful with future stable versions of Clojure, I will now be using the SVN version of Clojure instead of the latest stable release.  The changes are not many, but they do affect the program from the first article.  Here is a list of things you&#8217;ll need to change:</p>
<h4>Regular expression literals are automatically escaped</h4>
<p>There was only one occurrence in the original program of a regular expression with a backslash in it, the <code>:regex</code> attribute for Penny Arcade.  Delete one backslash to make the line look like this:</p>
<pre>
:regex #"images/\d{4}/.+?(?:png|gif|jpg)"
</pre>
<h4>Binding syntax is done inside vectors everywhere</h4>
<p>Some people may have found it inconsistent that the syntax of certain binding-introducing forms was <code>(form [var val])</code> while other forms didn&#8217;t have the square brackets.  This has now been addressed and all bindings are done inside square brackets.  There were two such occurrences in the original program: the <code>with-open</code> call in <code>fetch-url</code> and <code>doseq</code> at the end of the program.  Change these two lines to the following:</p>
<pre>
(with-open [stream (. url (openStream))]

(doseq [comic *comics*]
</pre>
<h2>Multi-methods</h2>
<p>Multi-methods are one of Clojure&#8217;s ways to create polymorphic code.  There are two parts to them:</p>
<ul>
<li><b>The declaration:</b> We create a new multi-method with the <code>defmulti</code> macro.  We specify the name of the multi-method and  a <em>dispatch function</em>.  The dispatch function will be called with all the arguments passed to the multi and its return value will be used to choose which method to execute.  An optional third argument specifies a default dispatch value; if it&#8217;s omitted, <code>:default</code> is assumed.</li>
<li><b>The methods:</b> They&#8217;re called <b>multi-</b>methods because they can have multiple implementations.  You define a method with the <code>defmethod</code> macro.  You must supply the name of the multi, the dispatch value, the parameter vector and the body.</li>
</ul>
<p>To make this clearer, here is a simple example.  <code>report</code> is a multi-method that is passed a collection and returns <code>"I am empty"</code> if calling the dispatch function <code>empty?<code> on its argument returns true and <code>"I have elements"</code> otherwise.</p>
<pre>
(defmulti report empty?)
(defmethod report true [x] "I am empty")
(defmethod report :default [x] "I have elements")

(report "")         ; "I am empty"
(report [1 2 3])    ; "I have elements"
</pre>
<h2>fetch-comic</h2>
<p>We will declare a <code>fetch-comic</code> multi-method that takes a comic and dispatch on its <code>:type</code> value.  The default method will be our old regular expression function, which we'll transform into a method.</p>
<pre>
(defmulti fetch-comic :type)
</pre>
<p>Now, let's convert <code>image-url</code> to a method; the name was changed to <code>fetch-comic</code> because we don't simply fetch an URL anymore, we may get other information as well.  Don't forget to update the call in the <code>doseq</code> at the end of the program.  Methods cannot have documentation strings, so we've had to remove it.</p>
<pre>
(defmethod fetch-comic :default [comic]
  (let [src (fetch-url (:url comic))
        image (re-find (:regex comic) src)]
    (str (or (:prefix comic) (:url comic))
         image)))
</pre>
<p>The program should work just like it did before.</p>
<h2>Fetching image URL and tooltip</h2>
<p>With our old function transformed into a method, we are ready to tackle the tooltip-fetching method.  Although nothing stops us from using regular expressions for this task, we will use a Java library specifically designed for HTML parsing and extraction.</p>
<p>The method is fairly short (12 lines), but I must first introduce some concepts that will be used and talk about the HTML Parser library.</p>
<ul>
<li><b>Refs:</b> Despite being a functional language, Clojure recognizes that there are situations when having data that changes is necessary.  <a href="http://clojure.org/refs">Refs</a> are one way to do so: refs are basically variables that hold the address to an object.  When you modify the object, what actually happens behind the scene is that a new object is created and your ref will now point to the address of that new object, leaving the old one intact.</li>
<li><b><code>proxy</code>:</b> <a href="http://clojure.org/java_interop#toc20"><code>proxy</code></a> is a macro that extend a class, implements interfaces and returns an instance of that new class.</li>
<li><b>HTML Parser:</b> a Java library to parse and extract content from an HTML document.  The <code>org.htmlparser.Parser</code> constructor fetches the HTML online if its argument looks like an URL.  The library specifies many built-in filter classes, though none allow using a regular expression to search for a particular attribute in a tag.  We will therefore use the visitor pattern method provided.  <code>visitAllNodesWith</code> takes a <code>NodeVisitor</code> argument, and we'll use <code>proxy</code> to implement its <code>visitTag</code> method.</li>
</ul>
<pre>
(import '(org.htmlparser Parser)
        '(org.htmlparser.visitors NodeVisitor)
        '(org.htmlparser.tags ImageTag))

(defmethod fetch-comic :tooltip-comic [comic]
  (let [img-tags (ref [])
        parser (Parser. (:url comic))
        visitor (proxy [NodeVisitor] []
                  (visitTag [tag]
                            (when (and (instance? ImageTag tag)
                                       (re-find (:regex comic)
                                                (.getImageURL tag)))
                              (dosync (alter img-tags conj tag)))))]
    (.visitAllNodesWith parser visitor)
    [(.getImageURL (first @img-tags))
     (.getAttribute (first @img-tags) "title")]))
</pre>
<p>That may seem like a lot of code, but there's actually a lot of things you know in there.  Let's look at it in detail:</p>
<ul>
<li><b><code>import</code>:</b> we went over this in the first article, it just imports some names into the current namespace.  We import some classes from HTML Parser to keep our code a little more succinct.</li>
<li><b><code>defmethod</code>:</b> we've just seen this: create a method for the multi-method <code>fetch-comic</code> for when the dispatch value is <code>:tooltip-comic</code>.</li>
<li><b><code>let</code>:</b> we've seen <code>let</code> before also: it creates a new scope and establishes some bindings within that scope.</li>
<li><b><code>img-tags (ref [])</code>:</b> <code>ref</code> returns a reference that points to its argument.  We will store the image tags that fit our search criteria into img-tags.  We'll see in a minute why we need a "mutating" variable for this purpose.</li>
<li><b><code>parser (Parser. (:url comics))</code>:</b> call the <code>Parser</code> constructor with the URL of the comic.</li>
<li><b><code>visitor (proxy [NodeVisitor] [])</code>:</b> this is the really interesting part.  <code>proxy</code> will sub-class <code>NodeVisitor</code> and return an instance of this new class.  We implement the <code>visitTag</code> method: it takes one argument, a tag and has a <code>void</code> return value.  This is why we need to store the tags into a ref.  When that tag is an image tag and that its <code>src</code> value matches our regular expression, we conj it to <code>img-tags</code>
<li><b><code>(dosync (alter img-tags conj tag))</code>:</b> <code>dosync</code> executes the expressions in its body in a transaction.  <code>alter</code> (which must be called within a transaction) modifies the value pointed to by <code>img-tags</code> by conjing the current tag onto the value referenced by <code>img-tags</code></li>
<li><b><code>(.visitAllNodesWith parser visitor)</code>:</b> visit all the nodes of <code>parser</code> using our custom visitor object.  When this has completed, <code>img-tags</code> should have the image tag of the comic.</li>
<li><b><code>(.getImageURL (first @img-tags))</code>:</b> get the URL of the first image tag. <code>@img-tags</code> is syntactic sugar for <code>(deref img-tags)</code>; it returns the value referenced by the ref.  <code>getImageURL</code> returns the complete URL of the image, we won't need a prefix like we did with the other method.</li>
<li><b><code>(.getAttribute (first @img-tags) "title")</code>:</b> <code>getAttribute</code> returns the value of an arbitrary attribute of a tag.</code>  The tooltip text of a comic is in the <code>title</code> tag.</li>
</ul>
<h2>Data</h2>
<p>The final step is to add Xkcd to our <code>*comics*</code> vector:</p>
<pre>
{:name "Xkcd"
 :url "http://www.xkcd.com"
 :regex #"comics"
 :type :tooltip-comic
}
</pre>
<h2>Running the script</h2>
<p>To run the script, you will need to include HTML Parser in your class path:</p>
<pre>
$ java -cp $HOME/src/clojure/clojure.jar:$HOME/src/htmlparser1_6/lib/htmlparser.jar \
clojure.lang.Script comics2.clj

Penny-Arcade: http://www.penny-arcade.com/images/2008/20081117.jpg
We The Robots: http://www.wetherobots.com/comics/2008-11-14-Gnawed.jpg
Xkcd: ["http://imgs.xkcd.com/comics/a_bunch_of_rocks.png" "I call Rule 34 on Wolfram's Rule 34."]
</pre>
<h2>Full program</h2>
<p>You can download the full program <a href="http://pastebin.com/f51173b1f">here</a></p>
<p>Special thanks to Chouser for proof reading a draft of this post.</p>
	
					
				<p class="postmetadata alt">
					<small>
					This entry was posted  on Tuesday, November 18th, 2008 at 10:08 pm and is filed under <a href="http://en.wordpress.com/tag/clojure/" title="View all posts in clojure" rel="category tag">clojure</a>.					You can follow any responses to this entry through the <a href='http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/feed/'>RSS 2.0</a> feed. 

											You can <a href="#respond">leave a response</a>, or <a href="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/trackback/" rel="trackback">trackback</a> from your own site.
											
					</small>
				</p>
	
			</div>
		</div>
		
	<div id="wpl-likebox"><div id="wpl-button"><a href='http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/?like=1&amp;_wpnonce=1c6ce24a74' title='I like this post' class='like needs-login'><span>Like</span></a></div><div id="wpl-count">Be the first to like this post.</div></div><div id="comments">


<h3 id="comments-title">6 Responses to <em>Clojure tutorial: fetching web comics (part&nbsp;2)</em></h3>


<ol class="commentlist">
			<li class="comment even thread-even depth-1" id="comment-1726">
				<div id="div-comment-1726" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/22788ec68b2aee512f8f4c5d8ae819ae?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn"><a href='http://technomancy.us' rel='external nofollow' class='url'>Phil</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/#comment-1726">
			November 28, 2008 at 12:17 am</a>		</div>

		<p>Thanks, this is helpful.</p>
<p>I wonder if in a future installation you could cover various methods of loading in new code. The explanation of &#8220;import&#8221; is helpful, but it would be good to have more detail about how that ties into the classpath, for those of us who have never heard the term before. I&#8217;ve seen &#8220;use&#8221; being used in a similar way to &#8220;import&#8221;&#8211;how do the two differ?</p>
<p>And what about &#8220;load-file&#8221; and &#8220;require&#8221; that we&#8217;ve seen before in Lisp? How does clojure decide where to look for the files you try to load or require since there&#8217;s no load-path variable? And how would you wrap all this up in a shell script so that users of your program don&#8217;t have to type a ridiculously long invocation just to get things going?</p>
<p>Just some thoughts from someone who&#8217;s just getting started with clojure. Thanks!</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/11/18/fetching-web-comics-with-clojure-part-2/?replytocom=1726#respond' onclick='return addComment.moveForm("div-comment-1726", "1726", "respond", "511")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment byuser comment-author-gnuvince bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-1727">
				<div id="div-comment-1727" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/7a2d25dc0e3fd2ff9a12ffda439e584d?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn">gnuvince</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/#comment-1727">
			November 28, 2008 at 8:29 am</a>		</div>

		<p>Hello Phil,</p>
<p>Like I said in the first installment of this series, I will try to include parts that discuss the questions and/or comments of the commenters.  I&#8217;ll look into your suggestion for a future article, though probably not the next one, as I want to get into agents.</p>
<p>Thanks for the input.</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/11/18/fetching-web-comics-with-clojure-part-2/?replytocom=1727#respond' onclick='return addComment.moveForm("div-comment-1727", "1727", "respond", "511")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment even thread-even depth-1" id="comment-1728">
				<div id="div-comment-1728" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/6a938a76eef91762f6995516cb1d118e?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn"><a href='http://issuu.com/' rel='external nofollow' class='url'>Attila Babo</a></cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/#comment-1728">
			November 30, 2008 at 2:48 pm</a>		</div>

		<p>Thanks for the good article, my only concern is a formal problem: it&#8217;s hard to read the &#8216;Running the script&#8217; part. The end of the line has been clipped and the output of the command is confusing as there is no clean separation from input.</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/11/18/fetching-web-comics-with-clojure-part-2/?replytocom=1728#respond' onclick='return addComment.moveForm("div-comment-1728", "1728", "respond", "511")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment byuser comment-author-gnuvince bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-1729">
				<div id="div-comment-1729" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/7a2d25dc0e3fd2ff9a12ffda439e584d?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn">gnuvince</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/#comment-1729">
			November 30, 2008 at 4:23 pm</a>		</div>

		<p>Thank you for the comment Attila Babo; I added a line break + backslash so that the whole input visible.</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/11/18/fetching-web-comics-with-clojure-part-2/?replytocom=1729#respond' onclick='return addComment.moveForm("div-comment-1729", "1729", "respond", "511")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment even thread-even depth-1" id="comment-1740">
				<div id="div-comment-1740" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/bfcc9047bea80035a936648dc1912ec4?s=32&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn">Gavin Sinclair</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/#comment-1740">
			January 12, 2009 at 1:38 am</a>		</div>

		<p>Hi Vince,</p>
<p>I enjoyed this.  Nice to see a good practical use of refs.  However, I was confused throughout about this: (defmulti fetch-comic :type)  You didn&#8217;t explain the &#8220;type&#8221; part.  The reader was led to believe that a comic had certain properties: name, url, regex, and (optionally) prefix.  Nothing about type!  It all sort of made sense in the end, but a paragraph about your intentions would have been helpful.</p>
<p>I&#8217;m still confused about the :default&#8230;</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/11/18/fetching-web-comics-with-clojure-part-2/?replytocom=1740#respond' onclick='return addComment.moveForm("div-comment-1740", "1740", "respond", "511")'>Reply</a>		</div>
				</div>
		</li>
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2085">
				<div id="div-comment-2085" class="comment-body">
				<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/cee512f1dcd234e978f7249daa1a2525?s=32&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D32&amp;r=G' class='avatar avatar-32' height='32' width='32' />		<cite class="fn">mighty15</cite> <span class="says">says:</span>		</div>

		<div class="comment-meta commentmetadata"><a href="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/#comment-2085">
			October 23, 2009 at 2:55 pm</a>		</div>

		<p>FYI, Penny Arcade has changed their comic URL.  Using the code you have, I found these changes in *comic* will make it work again:</p>
<p>Change the regex to:<br />
:regex #&#8221;http://art.penny-arcade.com/photos/+[0-9]+_+[a-z].+?(?:png|gif|jpg)&#8221;</p>
<p>and change the prefix to:<br />
:prefix &#8220;&#8221;</p>

		<div class="reply">
		<a class='comment-reply-link' href='/2008/11/18/fetching-web-comics-with-clojure-part-2/?replytocom=2085#respond' onclick='return addComment.moveForm("div-comment-2085", "2085", "respond", "511")'>Reply</a>		</div>
				</div>
		</li>
</ol>



								<div id="respond">
				<h3 id="reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2008/11/18/fetching-web-comics-with-clojure-part-2/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://gnuvince.wordpress.com/wp-comments-post.php" method="post" id="commentform">
																			<p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p>							<p class="comment-form-author"><label for="author">Name</label> <span class="required">*</span><input id="author" name="author" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-email"><label for="email">Email</label> <span class="required">*</span><input id="email" name="email" type="text" value="" size="30" aria-required='true' /></p>
<p class="comment-form-url"><label for="url">Website</label><input id="url" name="url" type="text" value="" size="30" /></p>
												<p class="comment-form-comment"><label for="comment">Comment</label><textarea id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea></p>						<p class="form-allowed-tags">You may use these <abbr title="HyperText Markup Language">HTML</abbr> tags and attributes:  <code>&lt;a href=&quot;&quot; title=&quot;&quot;&gt; &lt;abbr title=&quot;&quot;&gt; &lt;acronym title=&quot;&quot;&gt; &lt;b&gt; &lt;blockquote cite=&quot;&quot;&gt; &lt;cite&gt; &lt;code&gt; &lt;pre&gt; &lt;del datetime=&quot;&quot;&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=&quot;&quot;&gt; &lt;strike&gt; &lt;strong&gt; </code></p>						<p class="form-submit">
							<input name="submit" type="submit" id="submit" value="Post Comment" />
							<input type='hidden' name='comment_post_ID' value='511' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
						</p>
						
<input type="hidden" name="genseq" value="1293265301" />
<p><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;" tabindex="6"/> <label class="subscribe-label" id="subscribe-label" for="subscribe">Notify me of follow-up comments via email.</label></p><p><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto;" tabindex="7"/> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog">Notify me of new posts via email.</label></p><input type="hidden" name="sub-type" value="comment-form-text0" /><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="45621c787f" /></p>					</form>
							</div><!-- #respond -->
						
</div><!-- #comments -->	
		
	</div>
	
	

	<div id="sidebar">
		<ul>

		<li id="search-2" class="widget widget_search"><form method="get" id="searchform" action="http://gnuvince.wordpress.com/">
<div><label for="s" class="search-label">Search</label><input type="text" value="" name="s" id="s" />
<input type="submit" id="searchsubmit" value="Search" />
</div>
</form></li>
		<li id="recent-posts-2" class="widget widget_recent_entries">		<h2 class="widgettitle">Recent Posts</h2>
		<ul>
				<li><a href="http://gnuvince.wordpress.com/2010/11/28/cycling-with-closures/" title="Cycling with&nbsp;closures">Cycling with&nbsp;closures</a></li>
				<li><a href="http://gnuvince.wordpress.com/2010/09/29/turing-machine-in-scala/" title="Turing Machine in&nbsp;Scala">Turing Machine in&nbsp;Scala</a></li>
				<li><a href="http://gnuvince.wordpress.com/2010/08/23/edge-cases-in-computer-programs/" title="Edge cases in computer&nbsp;programs">Edge cases in computer&nbsp;programs</a></li>
				<li><a href="http://gnuvince.wordpress.com/2009/10/18/my-quick-review-of-winning-low-limit-hold-em-by-lee-jones/" title="My quick review of Winning Low Limit Hold &#8216;em, by Lee&nbsp;Jones">My quick review of Winning Low Limit Hold &#8216;em, by Lee&nbsp;Jones</a></li>
				<li><a href="http://gnuvince.wordpress.com/2009/10/12/weechat/" title="Weechat">Weechat</a></li>
				</ul>
		</li>
<li id="linkcat-460" class="widget widget_links"><h2 class="widgettitle">Blogs</h2>

	<ul class='xoxo blogroll'>
<li><a href="http://debugfailure.wordpress.com/">Debugger&#8217;s weblog</a></li>
<li><a href="http://www.haineault.com/blog/">Haineault.com</a></li>
<li><a href="http://hbfs.wordpress.com">Harder, Better, Faster, Stronger</a></li>
<li><a href="http://www.noidea.ca/">Un bout de DBA MySQL</a></li>

	</ul>
</li>

		<li id="top-posts" class="widget widget_stats_topposts">			<h2 class="widgettitle">Top Posts</h2>
			<ul><li><a href='http://gnuvince.wordpress.com/2008/03/28/7-ways-to-copy-protected-photos/'>7 ways to copy "protected" photos</a></li><li><a href='http://gnuvince.wordpress.com/2007/09/14/a-django-template-tag-for-the-current-active-page/'>A Django template tag for the current active page</a></li><li><a href='http://gnuvince.wordpress.com/2007/02/24/emacs-and-vim/'>Emacs and Vim</a></li><li><a href='http://gnuvince.wordpress.com/2009/09/08/enums-in-c/'>Enums in C</a></li><li><a href='http://gnuvince.wordpress.com/2007/12/22/django-paths-and-urls/'>Django, paths and URLs</a></li></ul>		</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>
		<ul>
			<li><a href='http://gnuvince.wordpress.com/2010/11/' title='November 2010'>November 2010</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2010/09/' title='September 2010'>September 2010</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2010/08/' title='August 2010'>August 2010</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/10/' title='October 2009'>October 2009</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/09/' title='September 2009'>September 2009</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/08/' title='August 2009'>August 2009</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/06/' title='June 2009'>June 2009</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/05/' title='May 2009'>May 2009</a>&nbsp;(4)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/04/' title='April 2009'>April 2009</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/03/' title='March 2009'>March 2009</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/02/' title='February 2009'>February 2009</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2009/01/' title='January 2009'>January 2009</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/12/' title='December 2008'>December 2008</a>&nbsp;(4)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/11/' title='November 2008'>November 2008</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/10/' title='October 2008'>October 2008</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/09/' title='September 2008'>September 2008</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/08/' title='August 2008'>August 2008</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/07/' title='July 2008'>July 2008</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/05/' title='May 2008'>May 2008</a>&nbsp;(1)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/04/' title='April 2008'>April 2008</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/03/' title='March 2008'>March 2008</a>&nbsp;(4)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/02/' title='February 2008'>February 2008</a>&nbsp;(5)</li>
	<li><a href='http://gnuvince.wordpress.com/2008/01/' title='January 2008'>January 2008</a>&nbsp;(2)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/12/' title='December 2007'>December 2007</a>&nbsp;(4)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/11/' title='November 2007'>November 2007</a>&nbsp;(6)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/10/' title='October 2007'>October 2007</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/09/' title='September 2007'>September 2007</a>&nbsp;(15)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/08/' title='August 2007'>August 2007</a>&nbsp;(5)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/07/' title='July 2007'>July 2007</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/06/' title='June 2007'>June 2007</a>&nbsp;(7)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/05/' title='May 2007'>May 2007</a>&nbsp;(8)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/04/' title='April 2007'>April 2007</a>&nbsp;(5)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/03/' title='March 2007'>March 2007</a>&nbsp;(6)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/02/' title='February 2007'>February 2007</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2007/01/' title='January 2007'>January 2007</a>&nbsp;(3)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/12/' title='December 2006'>December 2006</a>&nbsp;(7)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/11/' title='November 2006'>November 2006</a>&nbsp;(16)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/10/' title='October 2006'>October 2006</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/09/' title='September 2006'>September 2006</a>&nbsp;(20)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/08/' title='August 2006'>August 2006</a>&nbsp;(6)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/07/' title='July 2006'>July 2006</a>&nbsp;(7)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/06/' title='June 2006'>June 2006</a>&nbsp;(11)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/05/' title='May 2006'>May 2006</a>&nbsp;(23)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/04/' title='April 2006'>April 2006</a>&nbsp;(12)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/03/' title='March 2006'>March 2006</a>&nbsp;(20)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/02/' title='February 2006'>February 2006</a>&nbsp;(16)</li>
	<li><a href='http://gnuvince.wordpress.com/2006/01/' title='January 2006'>January 2006</a>&nbsp;(27)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/12/' title='December 2005'>December 2005</a>&nbsp;(41)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/11/' title='November 2005'>November 2005</a>&nbsp;(38)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/10/' title='October 2005'>October 2005</a>&nbsp;(35)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/09/' title='September 2005'>September 2005</a>&nbsp;(22)</li>
	<li><a href='http://gnuvince.wordpress.com/2005/08/' title='August 2005'>August 2005</a>&nbsp;(40)</li>
		</ul>
</li>
		</ul>
	</div>
	
	


<div id="footer">
	<p>
	Theme: <a href="http://theme.wordpress.com/themes/contempt/">Contempt</a> by <a href="http://www.vault9.net" rel="designer">Vault9</a>.<br />
	<a href="http://wordpress.com/?ref=footer" rel="generator">Blog at WordPress.com</a>.
	</p>
</div>

</div>

		<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script>	<script type="text/javascript">
	/* <![CDATA[ */
		jQuery( function() {
			
			jQuery('#wpl-button > a.like').click( function(e) {
				e.preventDefault();
				
				jQuery('#wpl-mustlogin').remove();

				jQuery.post( 'http://gnuvince.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_like_click'
				} );

				var tenMins = new Date();
				tenMins.setTime( tenMins.getTime() + 600000 );
				document.cookie = 'wpl_rand=2233b79549; expires=' + tenMins.toGMTString() + '; domain=wordpress.com; path=/;';
				
				jQuery('#wpl-count').after( '\
					<div id="wpl-mustlogin"> \
						<form action="http://gnuvince.wordpress.com/wp-login.php" method="post"> \
							<p>Just one more step to like this post:</p> \
							<label><span>Username</span> <input type="text" name="log" id="user_login" class="input" value="" size="20" tabindex="80" /></label> \
							<label><span>Password</span> <input type="password" name="pwd" id="user_pass" class="input" value="" size="20" tabindex="81" /></label> \
							<input type="submit" name="wp-submit" id="wp-submit" class="button-primary" value="Log In" tabindex="82" /> \
							<input type="hidden" name="redirect_to" value="http://gnuvince.wordpress.com/2008/11/18/fetching-web-comics-with-clojure-part-2/?like=1" /> \
							<input type="hidden" name="wpl_rand" value="2233b79549" /> \
							<p>Not a member yet? <a href="http://wordpress.com/signup/?ref=likebox" id="wpl-signup-link">Sign up with WordPress.com</a></p> \
						</form> \
					</div> \
				');
				
				jQuery('#wpl-mustlogin').hide().slideDown('fast');
			} );
			
			jQuery('#wpl-mustlogin input.input').live( 'focus', function() {
				jQuery(this).prev().hide();
			}).live( 'blur', function() {
				if ( jQuery(this).val() == '' )
					jQuery(this).prev().show();
			});
			
			jQuery('#wpl-mustlogin input#wp-submit').live( 'click', function(e) {
				e.preventDefault();
				
				jQuery.post( 'http://gnuvince.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_login_submit'
				}, function() {
					jQuery('#wpl-mustlogin form').submit();
				} );
			});			
			
			jQuery('#wpl-mustlogin a#wpl-signup-link').live( 'click', function(e) {
				e.preventDefault();
				
				var link = jQuery(this).attr('href');
				
				jQuery.post( 'http://gnuvince.wordpress.com/wp-admin/admin-ajax.php', { 
					'action': 'wpl_record_stat',
					'stat_name': 'loggedout_signup_click'
				}, function() {
					location.href = link;
				} );
			});					
			
		});
	/* ]]> */
	</script>
<script type="text/javascript">_qoptions={qacct:'p-18-mFEk4J448M',labels:'language.en,type.wpcom'};</script>
<script type="text/javascript" src="http://edge.quantserve.com/quant.js"></script>
<noscript><p><img class="robots-nocontent" src="http://pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif?labels=language.en%2Ctype.wpcom" style="display:none" height="1" width="1" alt="" /></p></noscript>
<script type='text/javascript' src='http://s.gravatar.com/js/gprofiles.js?n&#038;ver=MU'></script>
	<script type="text/javascript">	
	// <![CDATA[
	WPGroHo = {
		data: {},
		renderers: {},
		syncProfileData: function( hash, id ) {
			if ( !WPGroHo.data[hash] ) {
				WPGroHo.data[hash] = {};
				a = jQuery( 'div.grofile-hash-map-' + hash + ' span' ).each( function() {
					WPGroHo.data[hash][this.className] = jQuery( this ).text();
				} );
			}

			WPGroHo.appendProfileData( WPGroHo.data[hash], hash, id );
		},
		appendProfileData: function( data, hash, id ) {
			for ( var key in data ) {
				if ( jQuery.isFunction( WPGroHo.renderers[key] ) ) {
					return WPGroHo.renderers[key]( data[key], hash, id, key );
				}

				jQuery( '#' + id ).find( 'h4' ).after( jQuery( '<p class="grav-extra ' + key + '" />' ).html( data[key] ) );
			}
		}
	};
	jQuery(document).ready(function($){
		Gravatar.profile_cb = function( h, d ) {
			WPGroHo.syncProfileData( h, d );
		};
		Gravatar.attach_profiles();
	});
	// ]]>
	</script>
	<div style="display:none">
	<div class="grofile-hash-map-22788ec68b2aee512f8f4c5d8ae819ae">
	</div>
	<div class="grofile-hash-map-7a2d25dc0e3fd2ff9a12ffda439e584d">
	</div>
	<div class="grofile-hash-map-6a938a76eef91762f6995516cb1d118e">
	</div>
	<div class="grofile-hash-map-bfcc9047bea80035a936648dc1912ec4">
	</div>
	<div class="grofile-hash-map-cee512f1dcd234e978f7249daa1a2525">
	</div>
	</div>
<script type="text/javascript" src="http://b.scorecardresearch.com/beacon.js"></script><script type="text/javascript">try{COMSCORE.beacon({c1:2,c2:7518284});}catch(e){}</script><noscript><p class="robots-nocontent"><img src="http://b.scorecardresearch.com/p?cj=1c1=2&#038;c2=7518284" alt="" style="display:none" width="1" height="1" /></p></noscript><script src="http://s.stats.wordpress.com/w.js?19" type="text/javascript"></script>
<script type="text/javascript">
st_go({'blog':'1436454','v':'wpcom','user_id':'0','post':'511','subd':'gnuvince'});
ex_go({'crypt':'RDZ8LFkxbXFDLnxkNj0xeTJkcS9ZcVtLLHhNNFg4V0VXb01jXz9mdEF5QlduQndhSi03N0Z2K2xFP0t1QUFuVk1qQ1IuWnglRGdyLXRzRjJ6UGdGa29NZVNfaV0rYXpZTysmLDZoYT9bNyxNWFlkcUNKMSZYeVt5T1ZpS2lWemFmYl1RYXxkVmU5al81WEVWejJuYS5YeE8vS05kQ3FWNi0uLUJBTFVZUlZwbXhic2ZNPUdjb0J5MnROaGovfHhOTjhZSHBrU245Rj9p'});
addLoadEvent(function(){linktracker_init('1436454',511);});
	</script>

</body>
</html>